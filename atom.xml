<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>辣椒の酱</title>
  
  <subtitle>尚未执佩剑，转眼即江湖</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://removeif.github.io/"/>
  <updated>2020-03-03T04:07:42.038Z</updated>
  <id>https://removeif.github.io/</id>
  
  <author>
    <name>辣椒の酱</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>英语语法-介词</title>
    <link href="https://removeif.github.io/english-learn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95-%E4%BB%8B%E8%AF%8D.html"/>
    <id>https://removeif.github.io/english-learn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95-%E4%BB%8B%E8%AF%8D.html</id>
    <published>2020-03-02T11:16:44.000Z</published>
    <updated>2020-03-03T04:07:42.038Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介词"><a href="#介词" class="headerlink" title="介词"></a>介词</h3><p><strong>特点：</strong>不能单独使用，后面需带宾语（名词，代词，数词，动名词，动名词短语，名词从句）<br><strong>搭配：</strong>在介词前的词：动词（depend on）名词（pay attention  to）形容词（be kind to） <a id="more"></a><br><strong>充当：</strong></p><p>   与其宾语构成介词短语后可充当主语，补足语 ，定语，状语</p><p><strong>作用：词与词之间的表示关系</strong></p><h4 id="种类："><a href="#种类：" class="headerlink" title="种类："></a>种类：</h4><h5 id="简单介词（at-by-for-from-in-near-of-off-on）"><a href="#简单介词（at-by-for-from-in-near-of-off-on）" class="headerlink" title="简单介词（at, by, for, from, in,near, of, off, on）"></a>简单介词（at, by, for, from, in,near, of, off, on）</h5><h5 id="复合介词"><a href="#复合介词" class="headerlink" title="复合介词"></a>复合介词</h5><p>​         简单链接：inside, into, onto, out of, outside, throughout, upon, within, without</p><p>​         搭配连用：as to, from above, from behind, from beneath, from under, until after</p><h5 id="介词短语："><a href="#介词短语：" class="headerlink" title="介词短语："></a>介词短语：</h5><p>   at the cost of, at the mercy of, at odds with, by means of, by reason of, by virtue of,</p><p>   by way of, in place of, in favor of, in spite of, with an eye to. </p><p>   关于：in/with reference to, in/with respect to, in/ with regard to</p><h4 id="时间介词："><a href="#时间介词：" class="headerlink" title="时间介词："></a>时间介词：</h4><h5 id="1-at-in-on"><a href="#1-at-in-on" class="headerlink" title="1.at, in, on"></a>1.at, in, on</h5><h6 id="1-at-时间点"><a href="#1-at-时间点" class="headerlink" title="1)at(时间点)"></a>1)at(时间点)</h6><p>​      a.特定时刻：at nine after ten</p><p>​      b.不确定时刻：at night, at dawn, at midnight, at that time, at the moment, at Christmas</p><p>​      c.年龄段：</p><p>​          at the age of eight/at eight</p><p>​          He got married at twenty</p><h6 id="2-in-时间段"><a href="#2-in-时间段" class="headerlink" title="2)in(时间段)"></a>2)in(时间段)</h6><p>​      a.长时间段</p><p>​          in the morning/afternoon/evening</p><p>​          in spring/summer/autumn/winter</p><p>​          in the past, in the past ten years</p><p>​          in the twenty-first cenfury</p><p>​          a man in his  thirties</p><p>​      b.在时间之内/后，表将来时</p><p>​          He said he would come back in a month</p><p>​          The train is leaving in a minute</p><p>​      c.in+动名词：在做…过程中</p><p>​          In crossing the river, we caught some fish.</p><p>​          In working, we can learn a lot.</p><p>​      d.几月：in October</p><h6 id="3-on-表示具体日期"><a href="#3-on-表示具体日期" class="headerlink" title="3)on(表示具体日期)"></a>3)on(表示具体日期)</h6><p>​      a.具体日期和星期</p><p>​          on Monday   On my birthday</p><p>​     b.特定某天上午、下午等</p><p>​          On the night of December 31,1999</p><p>​          On the eve of christmas/New Year</p><p>​          On a hot midnight in July</p><p>​     c.在第几天</p><p>​          On his first day to school.</p><p>​          On the tenth day I was in Beijing.     </p><p>​     d.on+动名词 or 名词 = as  soon as：一…就…</p><p>​          On hearing the bad news, she burst into tears.</p><p>​          On arriving, I came directly to visit you.</p><p>​          The first thing I did on arrival of Beijing was visit him.</p><p><strong>at the beginning of 在..的开头</strong></p><p>​       at the begining of a book there is often a table of contents.</p><p>​       at the begining of the concert.</p><p>​       at the beginning of January. </p><p><strong>in the begining：at first = in the early stages</strong></p><p>​       In the begining, I wrote to my family regularly. later I just gave up</p><p><strong>at the end of</strong></p><p>​       But at the end of this process, unfortunately, the students are none the wiser.</p><p>​       At the end of abook there may be an index</p><p>​       At the end of the concert        at the end of January</p><p><strong>in the end：eventually = at last：最终….</strong></p><p>​       Jim couldn’t decide where to go for his holidays. He didn’t go anywhere in the end.</p><p><strong>有last/next/this/every不再加介词</strong></p><p>​      I’ll see your next Friday.</p><p><strong>during   for</strong></p><p>​     during在…期间内，强调这时间内发生了什么  for表示延续时间的长短</p><p>​     I had lived in the countryside for 8 years before I moved to Beijing.</p><p>​     I studied in this university for 4 years. During that time most of my time was spent in learning English.</p><p>​     My father was in hospital for six weeks during the summer. </p><p><strong>during接表示一段时间的名词：stay， visit，travel</strong></p><p>​     During my visit to China</p><p>​     During the travel to the south</p><p>​     During the Middle ages</p><h6 id="for-时间段"><a href="#for-时间段" class="headerlink" title="for+时间段"></a>for+时间段</h6><p>​     for six years   for two months   for ever   for two hours</p><h6 id="from"><a href="#from" class="headerlink" title="from"></a>from</h6><p>​     和to 或 till/untill连用</p><p>​     Most people work from nine to five.</p><h6 id="since"><a href="#since" class="headerlink" title="since"></a>since</h6><p>​     和时间点连用，从那一时刻起。现在完成时，过去完成时连用</p><p>​     He has been here since last Sunday</p><p>​     I haven’t seen him since two years ago</p><p>​     I haven’t seen him for two years</p><p>​     It’s two years since I last saw him</p><h6 id="for"><a href="#for" class="headerlink" title="for"></a>for</h6><p>和时间段连用，表示动作延续到说话的那一刻。现在完成时，过去完成时连用</p><p>​     I have lived here for a year</p><p>​     I have lived here since this time last year </p><p>before, after, till/until(可做介词接短语，可做连词接从句)</p><p>​    后接时间点，某时刻前（before）某时刻后（after）直到某一时刻（till/until）</p><p>​    We finished the work before 10 o’ clock</p><p>​    I’ll wait for you till 10 o’ clock</p><h6 id="till-until特点"><a href="#till-until特点" class="headerlink" title="till/until特点"></a>till/until特点</h6><p>​    延续性句子谓语(肯定)+till/untill+时间点（若是从句，则从句中谓语动词为短暂性动词）</p><p>​    短暂性句子谓语(否定)+till/untill+时间点（若是从句，则从句中谓语动词为短暂性动词）</p><p>​    He didn’t finish the work untill 10 o’ clock（finish短暂动词，用否定）</p><p>​    He didn’t leave the office till 12 o’ clock</p><p>​    He will stay here until next Sunday（stay延续性动词，用肯定）</p><h6 id="by"><a href="#by" class="headerlink" title="by"></a>by</h6><p>​    a.no later than：不迟于某个时间，到了某个时间</p><p>​        by the end of next year</p><p>​    b.by引导时间状语常与将来完成时 or 过去完成时连用</p><p>​        By the end of next year I’ll have learned 2000 words</p><p>​        By the end of last year I had learned 2000 words</p><h4 id="方位介词"><a href="#方位介词" class="headerlink" title="方位介词"></a>方位介词</h4><h5 id="at-in"><a href="#at-in" class="headerlink" title="at, in"></a>at, in</h5><p>  <strong>at表示小地方</strong></p><p>  at home, at the office, ata school, at the bridge, at the crossroads, at the bus-stop</p><p>  at the doctor’s, at the hairdresser’s</p><p>  <strong>in表示大地方</strong></p><p>  in a country, in a town, in a village, in the street, in the forest, in a field, in a desert</p><p>  <strong>其他情况</strong></p><p>  in a line/in a row/in a queue</p><p>  in a photo/in a picture</p><p>  in a mirror</p><p>  in the sky/in the world</p><p>  in a book/in a newspaper/in a magazine/in a letter</p><p>  in the front/back row(at the front/back)</p><p>  in the front/back of the car</p><p>  at the front/back of the building/cinema/classroom</p><h5 id="谈论建筑"><a href="#谈论建筑" class="headerlink" title="谈论建筑"></a>谈论建筑</h5><p>  <strong>at表示事情发生场合</strong></p><p>  I met him at the cinema last night.</p><p>  <strong>in表示建筑物本身</strong></p><p>  I enjoyed the film but it was very cold in the cinema</p><p>  <strong>in强调在建筑里，at包括建筑物周围及里面</strong></p><p>  at the restaurant(可以是餐馆内，也可以是在餐馆附近的某个地方)</p><p>  in the restaurant(在餐馆里)</p><p>  at the cinema(在电影院，不一定在里面)</p><p>  in the cinema(在里面)</p><p>  There were a lot of people in the shop, It was very crowed</p><p>  Go along this road, then turn left at the shop</p><h5 id="on-over-above"><a href="#on-over-above" class="headerlink" title="on, over, above"></a>on, over, above</h5><p>  <strong>on表示两者接触</strong></p><p>  Put away the books on the desk</p><p>  The dictionary on the table is not mine</p><p>  There is some water in the bottle</p><p>  There is a label on the bottle</p><p>  There is somebody at the door. Shall I go and see who it is?</p><p>  There is a notice on the door. It says “Do not disturb”</p><p>  <strong>on的其他情况</strong></p><p>  on the left/on the right</p><p>  on the first/second floor</p><p>  on a map</p><p>  on the page/on page seven(at the top/bottom of the page)</p><p>  on the menu</p><p>  on the list</p><p>  on a farm</p><p>  on  the way to school</p><p>  on the corner of street, in the corner of the room</p><h5 id="over不仅接触，还有覆盖的含义"><a href="#over不仅接触，还有覆盖的含义" class="headerlink" title="over不仅接触，还有覆盖的含义"></a>over不仅接触，还有覆盖的含义</h5><p>  Spread the cloth over the table</p><p>  Mon put a rug over me when I was asleep</p><h5 id="over还可以表示正上方"><a href="#over还可以表示正上方" class="headerlink" title="over还可以表示正上方"></a>over还可以表示正上方</h5><p>  There is a bridge over the river</p><p>  There is a lamp over the desk</p><h5 id="above仅表示上下位关系，不接触，也不是正上方"><a href="#above仅表示上下位关系，不接触，也不是正上方" class="headerlink" title="above仅表示上下位关系，不接触，也不是正上方"></a>above仅表示上下位关系，不接触，也不是正上方</h5><p>  The sun rose above the horizon</p><p>  There is a bridge above the river</p><p>  He is over me(He is my immediate superior)</p><p>  He is above me</p><h5 id="below-under-beneath"><a href="#below-under-beneath" class="headerlink" title="below,under,beneath"></a>below,under,beneath</h5><p>  under在下方，可接触，可不接触</p><p>  I put the money under the mattess</p><p>  The dog is groveling under the table</p><h5 id="below表示两个表面之间间隔距离"><a href="#below表示两个表面之间间隔距离" class="headerlink" title="below表示两个表面之间间隔距离"></a>below表示两个表面之间间隔距离</h5><p>  They live below us</p><h5 id="beneath可以替换under，但是偏向抽象含义"><a href="#beneath可以替换under，但是偏向抽象含义" class="headerlink" title="beneath可以替换under，但是偏向抽象含义"></a>beneath可以替换under，但是偏向抽象含义</h5><p>  He would think it beneath him to tell a lie</p><p>  She married beneath her</p><h4 id="手段介词"><a href="#手段介词" class="headerlink" title="手段介词"></a>手段介词</h4><h5 id="by-1"><a href="#by-1" class="headerlink" title="by"></a>by</h5><p>  <strong>表示行为方式</strong></p><p>  send something by post</p><p>  do something by hand</p><p>  pay by check/by credit card(pay in cash)</p><p>  <strong>某事发生：by mistake/by accident/by chance(on purpose)</strong></p><p>  <strong>表示交通工具</strong></p><p>  by car, by train, by plane/air, by boat/sea/ship, by bus, </p><p>  by bicycle, by metro/subway/underground(on foot)</p><p>  by car(in a car, im my car, in the car)</p><p>  I don’t mind going by car but I don’t want to go in your car</p><p>  <strong>car, taxi前用介词in</strong></p><p>  They didn’t come in their car. They came in a taxi.</p><p>  <strong>自行车和公共交通设施前用on</strong></p><p>  on the train/by train, on his bicycle/by bicycle</p><p>  <strong>表示通过 某种手段达到预期效果（与with区别）</strong></p><p>  We succeeded by cooperating with them</p><p>  Our mission is to help our clients achieve their business goals by providing a service</p><p>  for the timely delivery of qualified staff to support their operational needs.</p><h5 id="with"><a href="#with" class="headerlink" title="with"></a>with</h5><p>  <strong>表示用具体的工具做某事</strong></p><p>  I killed a fly with a flyflap</p><p>  We can see with our eyes and write with our hands</p><h5 id="in"><a href="#in" class="headerlink" title="in"></a>in</h5><p>  <strong>表示以某种方式做某事</strong></p><p>  Write in pencil/in ink</p><p>  Express this in  your own  words</p><p>  Speak in a low voice</p><p>  Pay  in installments</p><h5 id="through"><a href="#through" class="headerlink" title="through"></a>through</h5><p>  <strong>与by相近，through一般多根名词连用， by多跟 动名词连用</strong></p><p>   they talked to each other through an interpreter.</p><p>参考文章:<br><a href="https://github.com/yizutianya/English_Grammar_Learning">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;介词&quot;&gt;&lt;a href=&quot;#介词&quot; class=&quot;headerlink&quot; title=&quot;介词&quot;&gt;&lt;/a&gt;介词&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;特点：&lt;/strong&gt;不能单独使用，后面需带宾语（名词，代词，数词，动名词，动名词短语，名词从句）&lt;br&gt;&lt;strong&gt;搭配：&lt;/strong&gt;在介词前的词：动词（depend on）名词（pay attention  to）形容词（be kind to）
    
    </summary>
    
    
      <category term="English" scheme="https://removeif.github.io/categories/English/"/>
    
      <category term="grammar" scheme="https://removeif.github.io/categories/English/grammar/"/>
    
    
      <category term="English" scheme="https://removeif.github.io/tags/English/"/>
    
      <category term="grammar" scheme="https://removeif.github.io/tags/grammar/"/>
    
  </entry>
  
  <entry>
    <title>英语语法-基本句子结构</title>
    <link href="https://removeif.github.io/english-learn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95-%E5%9F%BA%E6%9C%AC%E5%8F%A5%E5%AD%90%E7%BB%93%E6%9E%84.html"/>
    <id>https://removeif.github.io/english-learn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95-%E5%9F%BA%E6%9C%AC%E5%8F%A5%E5%AD%90%E7%BB%93%E6%9E%84.html</id>
    <published>2020-03-02T11:16:33.000Z</published>
    <updated>2020-03-03T04:07:42.038Z</updated>
    
    <content type="html"><![CDATA[<h4 id="subject-intransitive-verb-主-不及物动词"><a href="#subject-intransitive-verb-主-不及物动词" class="headerlink" title="subject + intransitive verb: 主 + 不及物动词"></a>subject + intransitive verb: 主 + 不及物动词</h4><p>  Man proposes; God disposes</p><p>  Modesty benefits; pride hurts</p><p>  The sun rises and the sun sets. Stars glitter and stars vanish. There are ups and downs in life <a id="more"></a></p><h5 id="常常带有状语"><a href="#常常带有状语" class="headerlink" title="常常带有状语"></a>常常带有状语</h5><p>​    Great minds think alike</p><p>​    The sun sets in the west </p><h4 id="Subject-Link-Verb-Subject-Complement-主-系动词-表语（主语补足语）"><a href="#Subject-Link-Verb-Subject-Complement-主-系动词-表语（主语补足语）" class="headerlink" title="Subject + Link Verb + Subject Complement: 主 + 系动词 + 表语（主语补足语）"></a>Subject + Link Verb + Subject Complement: 主 + 系动词 + 表语（主语补足语）</h4><p>  He looks unhappy</p><p>  The leaf will trun yellow in autumn</p><p>  I’ve got to return the book this afternoon; it falls overdue a week</p><p>  The best proof of love is trust</p><p>  Bread is the staff of life</p><h5 id="介词短语也可以做表语"><a href="#介词短语也可以做表语" class="headerlink" title="介词短语也可以做表语"></a>介词短语也可以做表语</h5><p>​    Beauty is in the eye of the beholder</p><h5 id="表示特征状态-feel-look-sound-taste-smell-seem-appear"><a href="#表示特征状态-feel-look-sound-taste-smell-seem-appear" class="headerlink" title="表示特征状态: feel, look. sound, taste, smell, seem, appear"></a>表示特征状态: feel, look. sound, taste, smell, seem, appear</h5><p>​    The iron feels hot.</p><p>​    The rose doesn’t smell much</p><h5 id="状态转变-become-grow-get-turn-fall-go-come"><a href="#状态转变-become-grow-get-turn-fall-go-come" class="headerlink" title="状态转变: become, grow, get, turn, fall, go, come"></a>状态转变: become, grow, get, turn, fall, go, come</h5><p>​    Our supplies of sugar and rice fell short</p><p>​    The jokes fell flat</p><p>​    fall asleep</p><p>​    fall due</p><p>​    go hungry     go sour     go wrong</p><p>​    Hope your dreams will come ture</p><p>​    The leaf will turn yellow in autumn</p><p>​    I’ve got to return the book this afternoon. it falls overdue a week</p><h5 id="状态保持-continue-remain-stay-keep-hold-rest-prove"><a href="#状态保持-continue-remain-stay-keep-hold-rest-prove" class="headerlink" title="状态保持: continue, remain, stay, keep, hold, rest, prove"></a>状态保持: continue, remain, stay, keep, hold, rest, prove</h5><p>​    The weather continued fine for several days</p><p>​    He held silent fo the whole day</p><p>​    He has fallen into the habit of doing morning exercises</p><p>​    You may rest assured that he will come to the party</p><h5 id="近似不及物动词的系动词"><a href="#近似不及物动词的系动词" class="headerlink" title="近似不及物动词的系动词"></a>近似不及物动词的系动词</h5><p>​    Mr. Bean often acted weird in public</p><p>​    All the audience sat silent</p><p>​    He was born poor</p><p>​    The boy blushed scarlet</p><p>​    I married young</p><p>​    He died young</p><p>​    Jane Austin died a spinster</p><p>​    He died a hero’s death</p><h4 id="Subject-Transsitive-Verb-Object-主-谓-宾"><a href="#Subject-Transsitive-Verb-Object-主-谓-宾" class="headerlink" title="Subject + + Transsitive Verb + Object: 主 + 谓 +宾"></a>Subject + + Transsitive Verb + Object: 主 + 谓 +宾</h4><p>​    Beauty will buy no beef</p><p>​    I want to go home now</p><p>​    I’ve finished reading the book</p><p>​    I’ll pick you up this evening</p><h4 id="Subject-Dative-Verb-Indirect-Object-Direct-Object-主-谓-间接宾语-直接宾语"><a href="#Subject-Dative-Verb-Indirect-Object-Direct-Object-主-谓-间接宾语-直接宾语" class="headerlink" title="Subject + Dative Verb + Indirect Object + Direct Object: 主 + 谓 + 间接宾语 + 直接宾语"></a>Subject + Dative Verb + Indirect Object + Direct Object: 主 + 谓 + 间接宾语 + 直接宾语</h4><p>​    He showed the guard this passport</p><p>​    I will buy you a meal</p><p>​    <strong>1. assign, award, bring, deliver, deny, feed, give, grant, hand, lend, offer, owe, pass</strong></p><p>​      <strong>pass, pay, promise, post, read, recomment, sell, send, show, take, write</strong></p><p>​      He showed his passport to the guard</p><p>​      He showed the guard his passport</p><p>​    <strong>2. 介词用for: book, buy, build, change, choose, cook, fetch, find, get, keep, make,</strong> <strong>order, prepare, sing</strong></p><p>​      I am going to buy a gift for her</p><p>​      I am going to buy her a gift</p><p>​    <strong>3. 不能用介词: charge, cost, bet</strong></p><p>​      I’ll bet you ten dollars</p><p>​      The repairman charged me ten dollars</p><p>​      <strong>特殊: ask</strong></p><p>​          Can I ask you a question?</p><p>​          Can I ask a question of you</p><h4 id="Subject-Factitive-Verb-Object-Object-Complement"><a href="#Subject-Factitive-Verb-Object-Object-Complement" class="headerlink" title="Subject + Factitive Verb + Object + Object Complement"></a>Subject + Factitive Verb + Object + Object Complement</h4><p>​    They appointed John chairman</p><p>​    I believe him to be true</p><p>​    The chairman declared the meeting over</p><p>​    They elected John chairman</p><p>​    You can leave the door open</p><p>​    A hedge between keeps friendship green</p><p>​    <strong>双宾语和复合宾语区分:宾语后加上be，若能成完整句子则是补足语</strong></p><p>参考文章:<br><a href="https://github.com/yizutianya/English_Grammar_Learning">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;subject-intransitive-verb-主-不及物动词&quot;&gt;&lt;a href=&quot;#subject-intransitive-verb-主-不及物动词&quot; class=&quot;headerlink&quot; title=&quot;subject + intransitive verb: 主 + 不及物动词&quot;&gt;&lt;/a&gt;subject + intransitive verb: 主 + 不及物动词&lt;/h4&gt;&lt;p&gt;  Man proposes; God disposes&lt;/p&gt;
&lt;p&gt;  Modesty benefits; pride hurts&lt;/p&gt;
&lt;p&gt;  The sun rises and the sun sets. Stars glitter and stars vanish. There are ups and downs in life
    
    </summary>
    
    
      <category term="English" scheme="https://removeif.github.io/categories/English/"/>
    
      <category term="grammar" scheme="https://removeif.github.io/categories/English/grammar/"/>
    
    
      <category term="English" scheme="https://removeif.github.io/tags/English/"/>
    
      <category term="grammar" scheme="https://removeif.github.io/tags/grammar/"/>
    
  </entry>
  
  <entry>
    <title>英语语法-关系从句</title>
    <link href="https://removeif.github.io/english-learn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95-%E5%85%B3%E7%B3%BB%E4%BB%8E%E5%8F%A5.html"/>
    <id>https://removeif.github.io/english-learn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95-%E5%85%B3%E7%B3%BB%E4%BB%8E%E5%8F%A5.html</id>
    <published>2020-02-29T09:37:37.000Z</published>
    <updated>2020-03-01T02:21:25.281Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概念：用句子修饰另一句子中的概念-词-to-整个句子"><a href="#概念：用句子修饰另一句子中的概念-词-to-整个句子" class="headerlink" title="概念：用句子修饰另一句子中的概念(词 to 整个句子)"></a>概念：用句子修饰另一句子中的概念(词 to 整个句子)</h4><p> <strong>单词：</strong>The woman who lives next door is a famous dancer.</p><p> <strong>短语：</strong>He likes climbing mountains, which is a good exercise.</p><p> <strong>分句</strong>：He said that he had no time, which isn’t true. <a id="more"></a></p><p> <strong>整句：</strong>He arrived an hour later, which annoyed his girlfriend very much.</p><h4 id="形成：两个句子共用的概念为连接点"><a href="#形成：两个句子共用的概念为连接点" class="headerlink" title="形成：两个句子共用的概念为连接点"></a>形成：两个句子共用的概念为连接点</h4><p> He laughs best who laughs last.</p><p>​    <strong>句子1.</strong> he laughs best     <strong>句子2.</strong> he laughs last    关系词 who  </p><p>​    <strong>共用He，句1：描述事实，句2：限定作用</strong></p><h4 id="种类：形式区别：有无-“，”"><a href="#种类：形式区别：有无-“，”" class="headerlink" title="种类：形式区别：有无 “，”"></a>种类：形式区别：有无 “，”</h4><p><strong>限制性：提供必要信息，若去掉，含义不明</strong></p><p> I don’t like people 意思不明</p><p>I don’t like people who never keep their words.</p><p><strong>非限制性：补充附加信息，若去掉，含义仍明</strong></p><p>   Beijing, which is the capital of China, has developed into an international city.</p><h4 id="关系词：根据关系词在从句中充当的成分，被分为：关系代词，关系副词"><a href="#关系词：根据关系词在从句中充当的成分，被分为：关系代词，关系副词" class="headerlink" title="关系词：根据关系词在从句中充当的成分，被分为：关系代词，关系副词"></a>关系词：根据关系词在从句中充当的成分，被分为：关系代词，关系副词</h4><h4 id="关系代词"><a href="#关系代词" class="headerlink" title="关系代词"></a>关系代词</h4><table><thead><tr><th>关系代词</th><th>用法</th><th>例句</th></tr></thead><tbody><tr><td>who:只指人</td><td>前不可加介词</td><td>The girl who you work with is his girl friend</td></tr><tr><td>whom:只指人</td><td>只宾/表,宾语非限制性必用</td><td>Li, with whom you work, is his girl friend</td></tr><tr><td>which:不指人</td><td>非限制性句首时用as</td><td>As I expected, he didn’t believe me</td></tr><tr><td>that:指人or物</td><td>不加介词，无非限制性</td><td>The world in which we live is made up of matter.</td></tr><tr><td>whose+名词指人or物</td><td>whose = of which</td><td>These children sit in a schoolroom of which all the windows are broken.</td></tr></tbody></table><h5 id="特殊关系代词"><a href="#特殊关系代词" class="headerlink" title="特殊关系代词"></a>特殊关系代词</h5><p><strong>as：正如</strong></p><p><strong>限制性：只能用在such，the same，as，so</strong></p><p>​    a. He’ll repeat such points as are discussed in the book.</p><p>​    b. Such a student as works hard will be sure to succeed.</p><p>​    c. He tried to make as few mistakes as he could avoid.</p><p>​    d. He is not the same playboy as we knew.</p><p><strong>非限制性：位于句首必须用as</strong></p><p> As is known, the whale is not fish but a mammal.</p><p><strong>代替全句：as：主从句内容一致   which：主从句内容互斥</strong></p><p> She has married again, as was expected.</p><p> She has married again, which was unexpected.</p><h5 id="what：等于-先行词-关系词"><a href="#what：等于-先行词-关系词" class="headerlink" title="what：等于 先行词 + 关系词"></a>what：等于 先行词 + 关系词</h5><p><strong>单独使用：不能有先行词</strong></p><p> She is not what she used to be = She is not the girl that she used to be.</p><p><strong>what+名词：所有的…</strong></p><p> a. I will give you what help I can.</p><p> b. What money I have has been given to you = All the money that I have…</p><p><strong>辨析：结构上也可以理解成名词从句，意思上如下</strong></p><p> <strong>名词从句：整个句子的意思</strong></p><p> What he said shows that he is cruel.</p><p> <strong>what从句：只指what这个人或物</strong></p><p> He is not what he was a few years ago.</p><h5 id="than：主句有比较级"><a href="#than：主句有比较级" class="headerlink" title="than：主句有比较级"></a>than：主句有比较级</h5><p> a. Don’t drink more wine than is good for health.</p><p> b. Don’t give him more money than is needed, since money will burn a hole in his pocket.</p><p><strong>but：eq that/who/whom…not</strong></p><p>​    a. There is no man but errs = There is no man who doesn’t err.</p><p>​    b. There are few but admire his talent = There are few who don’t admire his talent.</p><p>​    c. There are very few people in this club but he knows =whom he doesn’t know.</p><h4 id="关系副词"><a href="#关系副词" class="headerlink" title="关系副词"></a>关系副词</h4><h5 id="限制性-or-非限制性-从句中必做状语"><a href="#限制性-or-非限制性-从句中必做状语" class="headerlink" title="限制性 or 非限制性   从句中必做状语"></a>限制性 or 非限制性   从句中必做状语</h5><table><thead><tr><th>关系副词</th><th>先行词</th><th>例句</th></tr></thead><tbody><tr><td>when=on which</td><td>时间:day,year,time</td><td>I’ll never forget the day (when) I met you(紧随其后可省略)I’ll never forget the time which I spent on campus(不做状语时)</td></tr><tr><td>where=in/at which</td><td>(抽象)地点place,housesituation, point,joint</td><td>When you read books, you had better make a mark at the spot where you have any question(定语从句修饰spot)When you read book, you had better make a mark where you have any question(状语从句)</td></tr><tr><td>why无非限制性</td><td>原因:why等</td><td>This is the reason why I didn’t come herewhy = for which</td></tr><tr><td>方式the way</td><td>in whichthat省略</td><td>You know the old golden rule, “Care for others the way in which you would like them to care for you”</td></tr></tbody></table><h5 id="介词-关系代词-whom-which-whose"><a href="#介词-关系代词-whom-which-whose" class="headerlink" title="介词+关系代词(whom/which/whose)"></a>介词+关系代词(whom/which/whose)</h5><p><strong>动词/形容词搭配的介词，可前可后</strong></p><table><thead><tr><th>线索</th><th>说明</th><th>例句</th></tr></thead><tbody><tr><td>从句中介词和动词搭配形容词搭配名词搭配</td><td>最常用常见较少</td><td>He is the man on whom I think you can depend.He referred me to some books with which I am not very familiar.I am sending you an inquiry, to which your prompt attention is highly appreciated.</td></tr><tr><td>介词先行词搭配</td><td>at the ratewith ease</td><td>The speed at which an animal lives is determined by measuring the rate at which it uses oxygen.</td></tr><tr><td>修饰部分of which</td><td>最高级+of whom/which</td><td>The total cultivated area is 13,000 acres, of which 10,000 acres are irrigated fields.</td></tr><tr><td>in which to do</td><td>此结构注意</td><td>A house in which to store grains = A house to store grains inI can’t think of anybody whom to invite  没有介词不能用介词不能置后不能用关系副词代替</td></tr></tbody></table><h5 id="引导词辨析"><a href="#引导词辨析" class="headerlink" title="引导词辨析"></a>引导词辨析</h5><table><thead><tr><th>从句</th><th>that</th><th>which</th></tr></thead><tbody><tr><td>定语从句</td><td>充当成分The rumor that he spread everywhere turned out to be untrue.(充当定语)</td><td>单独使用Anger is a wind which blows out the lamp of the mind.</td></tr><tr><td>名词从句</td><td>不当成分THe rumor that Tom was a thief truned out to be untrue.(句子完整)</td><td>which + 名词连用You should vote for which candidate you assume best.</td></tr></tbody></table><h5 id="复杂定语从句"><a href="#复杂定语从句" class="headerlink" title="复杂定语从句"></a>复杂定语从句</h5><table><thead><tr><th>定语从句后置</th><th>先行词和定语从句分开</th><th>Consequently, nothing seems good or normal that does not accord with the requirements of the free market.</th></tr></thead><tbody><tr><td>带有插入语</td><td>表达个人观点紧跟关系词后</td><td>He ran all the way from the station, which I thought was incredible.</td></tr><tr><td>并列定语从句</td><td>and/or/but连接多个从句修饰同一词</td><td>I’d much rather receive a gift that was unique or that I knew my friend had put some thought into.</td></tr><tr><td>嵌套修饰</td><td>定语从句修饰“先行词+定语从句”</td><td>He is the only person that we know who speaks so many foreign languages.</td></tr></tbody></table><p>参考文章:<br><a href="https://github.com/yizutianya/English_Grammar_Learning">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;概念：用句子修饰另一句子中的概念-词-to-整个句子&quot;&gt;&lt;a href=&quot;#概念：用句子修饰另一句子中的概念-词-to-整个句子&quot; class=&quot;headerlink&quot; title=&quot;概念：用句子修饰另一句子中的概念(词 to 整个句子)&quot;&gt;&lt;/a&gt;概念：用句子修饰另一句子中的概念(词 to 整个句子)&lt;/h4&gt;&lt;p&gt; &lt;strong&gt;单词：&lt;/strong&gt;The woman who lives next door is a famous dancer.&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;短语：&lt;/strong&gt;He likes climbing mountains, which is a good exercise.&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;分句&lt;/strong&gt;：He said that he had no time, which isn’t true.
    
    </summary>
    
    
      <category term="English" scheme="https://removeif.github.io/categories/English/"/>
    
      <category term="grammar" scheme="https://removeif.github.io/categories/English/grammar/"/>
    
    
      <category term="English" scheme="https://removeif.github.io/tags/English/"/>
    
      <category term="grammar" scheme="https://removeif.github.io/tags/grammar/"/>
    
  </entry>
  
  <entry>
    <title>英语语法-副词</title>
    <link href="https://removeif.github.io/english-learn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95-%E5%89%AF%E8%AF%8D.html"/>
    <id>https://removeif.github.io/english-learn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95-%E5%89%AF%E8%AF%8D.html</id>
    <published>2020-02-29T09:37:25.000Z</published>
    <updated>2020-03-01T02:21:25.282Z</updated>
    
    <content type="html"><![CDATA[<h4 id="时间副词"><a href="#时间副词" class="headerlink" title="时间副词"></a>时间副词</h4><h5 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h5><p>​    <strong>1.确切时间：</strong>yesterday, today, now, tomorrow</p><p>​    <strong>2.不确切时间：</strong>already, recently, lately, before, soon, then, afterwards</p><p>​    <strong>3.副词短语：</strong>this morning, last night, in the morning, a week ago, three months ago, <a id="more"></a></p><p>​    at once, in a while, in recent days.</p><h5 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h5><p>​    <strong>确切时间副词：句首 or 句末(更常见)（祈使句只在句末）</strong></p><p>​                 Tomorrow I’m leaving for Beijing on a businiess tour.</p><p>​                  I’m leaving for Beijing on a business tour a week ago.</p><p>​                 Come to my office this afternoon.</p><p>​    <strong>不确切时间副词：句首 or 句中 or 句末</strong></p><p>​                 Very soon we’ll be there</p><p>​                 We’ll very soon be there</p><p>​                 I have been busy recently.</p><p>​                 before, early, immediately, late 句末</p><p>​               Ｉhave never heard such a story before.</p><p>​                He came to school late.</p><p>​    <strong>总结：句末保险，句中的副词不多，祈使句只在句末。</strong></p><h4 id="地点副词"><a href="#地点副词" class="headerlink" title="地点副词"></a>地点副词</h4><h5 id="种类-1"><a href="#种类-1" class="headerlink" title="种类"></a>种类</h5><p>​    <strong>1.表示方向：</strong>away, down, in, off, on, over, out, round, up</p><p>​    <strong>2.表示位置：</strong>here, there, somewhere, anywhere, nowhere, everywhere</p><p>​               <strong>介词短语：</strong>in the park, at home, in the street</p><h5 id="位置（一般：动词后）"><a href="#位置（一般：动词后）" class="headerlink" title="位置（一般：动词后）"></a>位置（一般：动词后）</h5><p>​    <strong>1.方向副词在地点副词之前：</strong>He often walks around in the garden after supper.</p><p>​    <strong>2.大地点副词在后：</strong>He works in a foreign-funded company in Beijing.</p><p>​    <strong>3.方向副词：</strong>away, down, in, off, on, over, out, round, up, here, there可以倒装</p><p>​             <strong>倒装1：副词+动态动词+名词主语</strong></p><p>​                    Here comes the teacher.</p><p>​                    Round and round flew the plane.</p><p>​             <strong>倒装2：副词+物主代词+动态动词</strong></p><p>​                    Away they went.</p><p>​                    Here he comes.</p><p>​    <strong>4.介词短语+动词+主语 倒装：</strong>down, from, in, on, over, out ,of, round, up</p><p>​             From the trees hang a lot of monkeys.</p><p>​             Down this street stand a lot of shops.</p><p>​             On the ground lies a man whose legs are broken.</p><p>  <strong>总结：一般句末；有些倒装结构句首。</strong></p><h4 id="频率副词"><a href="#频率副词" class="headerlink" title="频率副词"></a>频率副词</h4><h5 id="种类-2"><a href="#种类-2" class="headerlink" title="种类"></a>种类</h5><p>​    <strong>1.确切频率：</strong>daily, weekly, monthly, yearly/annually, twice a week/month/year</p><p>​    <strong>2.不确切频率：</strong>always, often, usually, sometimes, occasionally, frequently, continually,</p><p>​                 repeatedly, once, ever, never, rarely, seldom(否定).</p><h5 id="位置-1"><a href="#位置-1" class="headerlink" title="位置"></a>位置</h5><h5 id="1-不确切频率在-句中"><a href="#1-不确切频率在-句中" class="headerlink" title="1.不确切频率在 句中"></a>1.不确切频率在 句中</h5><p>​      <strong>1)实义动词前(am, is, are, was, were)，助动词后(will, should, have)</strong></p><p>​        a. I often do some shopping on weekends.</p><p>​        b. She is often late for school.</p><p>​        c. I have never seen him since we parted.</p><p>​      <strong>2)多个助动词时，在第一个助动词后</strong></p><p>​        a. This project will never be finished.</p><p>​        b. You should never have trusted him.</p><p>​      <strong>3)加强语气，在系动词 or 助动词 前</strong></p><p>​        a. You really will get a reward one day.</p><p>​        b. I always have been patient.</p><p>​      <strong>4)只有助动词而省略了实义动词的句子，在助动词前</strong></p><p>​        a. You should have known better thaan to trust him.  I never will(trust him)</p><p>​        b. Can you find a plaace to park your car in the street?  Yes, I usually can.</p><p>​        <strong>也要用在省略了标语的系动词前：</strong> No, she never was.</p><h5 id="2-确切频率在-句末"><a href="#2-确切频率在-句末" class="headerlink" title="2.确切频率在 句末"></a>2.确切频率在 句末</h5><p>​      a. Milk is delivered daily.</p><p>​      b. We have meetings twice a week.</p><h5 id="3-不确切频率也可用在句首-or-句末"><a href="#3-不确切频率也可用在句首-or-句末" class="headerlink" title="3.不确切频率也可用在句首 or 句末"></a>3.不确切频率也可用在句首 or 句末</h5><p>​      a. Often/Sometimes/Usually I work late into the night.</p><p>​      often不单独在句末，需加very or quite修饰</p><p>​      b. He comes late for school quite often.</p><h5 id="4-always除在祈使句中句首，其他时候在句末"><a href="#4-always除在祈使句中句首，其他时候在句末" class="headerlink" title="4.always除在祈使句中句首，其他时候在句末"></a>4.always除在祈使句中句首，其他时候在句末</h5><p>​      a. You always make the same mistakes.</p><p>​      b. Always remember not to argue with your boss.</p><h5 id="5-否定句中的频率副词"><a href="#5-否定句中的频率副词" class="headerlink" title="5.否定句中的频率副词"></a>5.否定句中的频率副词</h5><p>​      a.often/sometimes/usually not</p><p>​        His wife complains that he sometimes doesn’t listen to her.</p><p>​      b.not always</p><p>​        He doesn’t always leave before 6 o’clock, sometimes he works until 8 o’clock.</p><h5 id="6-never-rarely-seldom"><a href="#6-never-rarely-seldom" class="headerlink" title="6.never, rarely, seldom"></a>6.never, rarely, seldom</h5><p>​      a.不能再与not连用</p><p>​        He seldom goes out at night.</p><p>​      b.若在句首则倒装</p><p>​        Never have I heard such a story (I have enever heard such a story)</p><p>​    <strong>总结：不确切频率在句中，确切频率在句末。</strong></p><h4 id="程度副词"><a href="#程度副词" class="headerlink" title="程度副词"></a>程度副词</h4><p>  <strong>意义：表示程度或大小，修饰形容词、副词、动词、甚至名词</strong></p><h5 id="位置：被修饰词前"><a href="#位置：被修饰词前" class="headerlink" title="位置：被修饰词前"></a>位置：被修饰词前</h5><p>  <strong>比较</strong></p><p>​    Only I saw him at the party last night(Nobody else saw him)</p><p>​    I only saw him at the party last night(I didn’t talk to him)</p><p>​    I saw only him at the party last night(I didn’t see any other friends)</p><p>​    I saw him only at the party last night(I didn’t see him at other places)</p><p>​    I saw him at the party only last night(I didn’t see him until last night)</p><p>  <strong>enough：在所修饰形容词 or 副词之后</strong></p><p>​    He is not old enough to go to school</p><p>​    He didn’t work quickly enough</p><p>  <strong>否定副词不与否定词连用 barely, scarcely, hardly</strong></p><p>​    <strong>注意：与频率副词rarely区别</strong></p><p>​          不说：He hardly attends class </p><p>​          应说：He rarely attends class</p><p>  <strong>可以修饰名词的程度副词</strong></p><p>​     quite, only, even, particularly, especially, almost, rather.</p><p>​     quite some, quite an expert</p><p>​     It was quite a surprise.</p><p>​     rather a bore, rather a shame</p><p>​     <strong>注意：quite在a/an前，rather可前可后</strong></p><p>​           quite a nice day.</p><p>​           rather a long way   a rather long way.</p><p>​     vegetables, especially spinach, are good for you</p><p>​     He is almost a child</p><p>​     Even a boy knows the answer</p><h4 id="方式副词"><a href="#方式副词" class="headerlink" title="方式副词"></a>方式副词</h4><p>  <strong>修饰：动词专用</strong></p><p>  <strong>构成：数目不固定，可由形容词+ly构成</strong></p><h5 id="位置：修饰动词的后边"><a href="#位置：修饰动词的后边" class="headerlink" title="位置：修饰动词的后边"></a>位置：修饰动词的后边</h5><table><thead><tr><th>有宾语时，宾语在前</th><th>I can’t speak English well.He can finish the job quickly.</th></tr></thead><tbody><tr><td>若动词后成分很长，则在动词前</td><td>He firmly believes that he will succeed.I happily pronouce you man and wife.</td></tr><tr><td>动词+介词+宾语，可位于宾语后或介词前</td><td>The class is listening to the teacher carefullyThe class is listening carefully to the teacher</td></tr><tr><td>方式副词在被动分词之前</td><td>I was badly paid in that company when I just graduated.When do you think you will have completely finished?</td></tr></tbody></table><h4 id="句子副词"><a href="#句子副词" class="headerlink" title="句子副词"></a>句子副词</h4><p>  <strong>修饰：整个句子</strong></p><h5 id="位置：句首"><a href="#位置：句首" class="headerlink" title="位置：句首"></a>位置：句首</h5><p>  <strong>意义：</strong></p><p>  <strong>表示说话角度：</strong>Geologically, a thousand years is a short time.</p><p>  <strong>表示说话人态度：</strong>Frankly, I think he is dishonest.</p><p>​               Hopefully, we can get there in time</p><p>  <strong>比较方式副词和句子副词</strong></p><p>​            <strong>句子副词：</strong>Happily, he didn’t die.  幸好，他还活着</p><p>​            <strong>方式副词：</strong>He didn’t die happily.   他不是安然地离开了这个世界</p><h5 id="其他位置"><a href="#其他位置" class="headerlink" title="其他位置"></a>其他位置</h5><p>  <strong>副词顺序：方式副词+地点副词+时间副词</strong></p><p>​           She sang an English song nicely in the auditorium last night.</p><p>​           She checked the accounts carefully in the office this morning.</p><p>  <strong>(不)确定性副词：probably, possibly, perhaps, certainly, definitely, surely.不在句末</strong></p><p>​           He has probably not been there before.</p><p>​           I definitely know how to deal with this matter.</p><p>参考文章:<br><a href="https://github.com/yizutianya/English_Grammar_Learning">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;时间副词&quot;&gt;&lt;a href=&quot;#时间副词&quot; class=&quot;headerlink&quot; title=&quot;时间副词&quot;&gt;&lt;/a&gt;时间副词&lt;/h4&gt;&lt;h5 id=&quot;种类&quot;&gt;&lt;a href=&quot;#种类&quot; class=&quot;headerlink&quot; title=&quot;种类&quot;&gt;&lt;/a&gt;种类&lt;/h5&gt;&lt;p&gt;​    &lt;strong&gt;1.确切时间：&lt;/strong&gt;yesterday, today, now, tomorrow&lt;/p&gt;
&lt;p&gt;​    &lt;strong&gt;2.不确切时间：&lt;/strong&gt;already, recently, lately, before, soon, then, afterwards&lt;/p&gt;
&lt;p&gt;​    &lt;strong&gt;3.副词短语：&lt;/strong&gt;this morning, last night, in the morning, a week ago, three months ago,
    
    </summary>
    
    
      <category term="English" scheme="https://removeif.github.io/categories/English/"/>
    
      <category term="grammar" scheme="https://removeif.github.io/categories/English/grammar/"/>
    
    
      <category term="English" scheme="https://removeif.github.io/tags/English/"/>
    
      <category term="grammar" scheme="https://removeif.github.io/tags/grammar/"/>
    
  </entry>
  
  <entry>
    <title>英语语法-动名词</title>
    <link href="https://removeif.github.io/english-learn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95-%E5%8A%A8%E5%90%8D%E8%AF%8D.html"/>
    <id>https://removeif.github.io/english-learn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95-%E5%8A%A8%E5%90%8D%E8%AF%8D.html</id>
    <published>2020-02-28T10:02:06.000Z</published>
    <updated>2020-02-28T14:22:52.415Z</updated>
    
    <content type="html"><![CDATA[<h4 id="做主语"><a href="#做主语" class="headerlink" title="做主语"></a>做主语</h4><h5 id="1-直接句首做主语：谓语动词用单数"><a href="#1-直接句首做主语：谓语动词用单数" class="headerlink" title="1. 直接句首做主语：谓语动词用单数"></a>1. 直接句首做主语：谓语动词用单数</h5><p>​    a. Seeing is believing.</p><p>​    b. Reading is like permitting a man to talk a long time, and refusing you the right to answer.<a id="more"></a></p><p>​    c. Having a successsful marriage takes effort and patience, and communication is  the key.</p><h5 id="2-It-is-no-good-doing-sth句型"><a href="#2-It-is-no-good-doing-sth句型" class="headerlink" title="2. It is no good doing sth句型"></a>2. It is no good doing sth句型</h5><p>​    <strong>it形式主语，真正主语是doing sth</strong></p><p>​    <strong>no可以替换为：any/some  good, any/some/no use, a waste of time.</strong></p><p>​    a. Is it any good trying to explain?</p><p>​    c. It’s not much use my buying salmon if you don’t like fish.</p><p>​    d. it’s simply a waste of time and money seeing that movie.</p><h5 id="3-there-be句型"><a href="#3-there-be句型" class="headerlink" title="3. there be句型"></a>3. there be句型</h5><p>​    <strong>1) there is no point (in) doing something,做某事没有意义</strong></p><p>​      a. there is no point in my going out to date somedone, I might really like if I met him a the time, but who, right now, has no chance of being anything to me but a transitional man</p><p>​    <strong>2) there is no use/good (in) doing something</strong></p><p>​      a. there is no use your arguing  with him</p><p>​      b. there is no use your complaining to me about this.</p><p>​    <strong>3) there is no doing something = it’s impossible to do something = we can’t do something.</strong></p><p>​      a. there is no denying the fact that…毋庸置疑</p><p>​      b. there is no gainsaying the fact that…毋庸置疑</p><p>​      c. there is no telling what will happen tomorrow.</p><p>​      d. there’s no knowing the future = it’s impossible to know the future, or we can’t know it.</p><h4 id="做宾语"><a href="#做宾语" class="headerlink" title="做宾语"></a>做宾语</h4><h5 id="1-一些动词后只能用动名词做宾语"><a href="#1-一些动词后只能用动名词做宾语" class="headerlink" title="1. 一些动词后只能用动名词做宾语"></a>1. 一些动词后只能用动名词做宾语</h5><p>​    <strong>appreciate, avoid, consider, delay, dislike, enjoy, escape, feel like, finish, can’t help, invlove,</strong></p><p>​    <strong>overlook, permit, postpone, practise, risk, can’t  stand, suggest, tolerate, understand.</strong></p><p>​    a. I will overlook your being so rude to my sister this time but don’t let it happen again.</p><p>​    b. Many of the things we do invlove taking some risk in order to achieve a sitisfactory result</p><p>​    c. Being a bad-tempered man , he would not tolerate having this lectures interrupted.</p><h4 id="接动名词和不定式有区别的动词："><a href="#接动名词和不定式有区别的动词：" class="headerlink" title="接动名词和不定式有区别的动词："></a>接动名词和不定式有区别的动词：</h4><p>  <strong>很多动词接动名词和不定式均可</strong>，但是意思有很大差别。</p><h5 id="1-demand-deserve-need-require-want"><a href="#1-demand-deserve-need-require-want" class="headerlink" title="1. demand, deserve, need, require, want"></a>1. demand, deserve, need, require, want</h5><p>  <strong>动名词：主动形式表示被动</strong> </p><p>  <strong>不定式：必须用被动形式</strong></p><p>​    a. The garden needs watering/ to be watered. 不说 The garden needs being watered.</p><p>​    b. Your hair needs cutting/ to be cut.</p><h5 id="2-remember-forget-stop-go-on-regret"><a href="#2-remember-forget-stop-go-on-regret" class="headerlink" title="2. remember, forget, stop, go on, regret."></a>2. remember, forget, stop, go on, regret.</h5><p>  <strong>动名词：表示发生于这些动词之前的事</strong></p><p>  <strong>不定式：表示发生在这些动词之后的事</strong></p><p>  <strong>1) remember</strong></p><p>  <strong>remember doing sth: remember/ recall something that happened in the past.</strong></p><p>  <strong>记得已做过某事</strong></p><p>​    a. I still remember being taken to Beijing for the first time.</p><p>​    b. I don’t remember/recall locking my suitcase</p><p>​      = as far as I know, my suitcase should be open</p><p>  <strong>remember to do sth: remember to perform a responsibility, duty or task.</strong></p><p>  <strong>记得需要履行的职责 or 任务。</strong></p><p>​    a. Remember to go to the post office, won’t you?</p><p>​    b. Remember to do some shopping after work.</p><p>​    c. Clint always remembers to turn off the lights when he leaves the room.</p><h5 id="2-forget"><a href="#2-forget" class="headerlink" title="2) forget"></a>2) forget</h5><p>  <strong>forget doing sth: forget something that happened in the past.</strong></p><p>  <strong>忘记了已做过的某事</strong></p><p>​    I forgot locking the door. So when I came back, I found the door locked.</p><p>​    as far as I know, the door should be open.</p><p>  forget to do sth: forget to perform a responsibility, duty or task.</p><p>  <strong>忘记要做的事</strong></p><p>​    As well as getting on everybody’s nerves, he’s got a habit of borrowing money and forgetting to pay it back.</p><h5 id="3-stop"><a href="#3-stop" class="headerlink" title="3) stop"></a>3) stop</h5><p>  <strong>stop doing: 停下经常做的或手头正在做的事情</strong></p><p>​    I really must stop smoking.</p><p>  <strong>stop to do: 停下来去做某事</strong></p><p>​    stop to have a rest.</p><h5 id="4-go-on"><a href="#4-go-on" class="headerlink" title="4) go on"></a>4) go on</h5><p>  <strong>go on doing sth: 继续做一直在做的事情。</strong></p><p>​    a. The teacher went on explaining the text.</p><p>​    b. Peter went on sleeping despite the noise.</p><p>  <strong>go on to do sth: 改做另一件事</strong></p><p>​    a. He welcomed the new students and then went on to explain the college regulations.</p><p>​    b. Finishing the new words, the teacher went on to attack the text.</p><h5 id="5-regret"><a href="#5-regret" class="headerlink" title="5) regret"></a>5) regret</h5><p>  <strong>regret doing sth: regret something that happened in the past.</strong></p><p>  <strong>对已发生的事情感到遗憾</strong></p><p>​    a. I don’t regret telling her what I thought, even if it upset her.</p><p>​    b. I regret letting slip that opportunity.</p><p>​    c. I regret lending him so much money. He never paid me back.</p><p>​    d. Now he regrets not having gone to university.</p><p>  <strong>regret to do something: regret to say, to tell someone, or to inform someone of some bad news 遗憾的告诉或通知某人某个坏消息。</strong></p><p>​    a. We regret to inform you that we are unable to offer you employment.</p><p>​    b. I regret to tell you that you failed the test.</p><p>​    c. We regret to inform you that the flight has been cancelled.</p><h4 id="动名词的其他结构"><a href="#动名词的其他结构" class="headerlink" title="动名词的其他结构"></a>动名词的其他结构</h4><h4 id="1-have-difficulty-in-doing-sth"><a href="#1-have-difficulty-in-doing-sth" class="headerlink" title="1. have difficulty (in) doing sth"></a>1. have difficulty (in) doing sth</h4><p>​         trouble</p><p>​         problem</p><p>​         (a lot of fun)</p><p>​         (lots of) pleasure</p><p>​         a hard time</p><p>​         a good time</p><p>​         a difficult time</p><p>  <strong>注意: take the trouble to do sth, trouble to do sth, have (no) time to do sth.</strong></p><p>​    a. I worked sos late in the office last night that I hardly had time to catch the last bus.</p><p>​    b. I have a hard time getting used to living in a big place.</p><h5 id="2-can’t-help-doing-can’t-resist-doing-can’t-keep-from-doing-can’t-hold-back-from-doing"><a href="#2-can’t-help-doing-can’t-resist-doing-can’t-keep-from-doing-can’t-hold-back-from-doing" class="headerlink" title="2. can’t help doing, can’t resist doing, can’t keep from doing, can’t hold back from doing"></a>2. can’t help doing, can’t resist doing, can’t keep from doing, can’t hold back from doing</h5><p>​    can’t keep back from  doing</p><p>​    <strong>注意: can’t help but do, can’t but do, can’t choose but do,etc.</strong></p><p>​    No one can help liking Tom; he  is such a cute boy.</p><h5 id="3-be-worth-doing值得做；主动形式表示被动"><a href="#3-be-worth-doing值得做；主动形式表示被动" class="headerlink" title="3. be worth doing值得做；主动形式表示被动"></a>3. be worth doing值得做；主动形式表示被动</h5><p>​    be worthy of being done  或  be worthy to be done.</p><p>​    a. The book is worth reading.</p><p>​    b. The book is worthy of being read.</p><p>​    c. The book is worthy to be read.</p><h4 id="动名词的复合结构"><a href="#动名词的复合结构" class="headerlink" title="动名词的复合结构"></a>动名词的复合结构</h4><p><strong>物主代词(his, my ,your等)所有格名词(Mary’s Tom’s)与动名词连用，即构成动名词的符合结构。用来引出动名词的逻辑主语，以区别于句子主语。</strong></p><p>  Clint insisted on reading the letter. (Clint看了信)</p><p>  Clint insisted on my reading the letter. (我不得不看信)</p><p>  Would you mind telling us the whole story? (你告诉)</p><p>  Would you mind Tom’s telling us the whole story? = Would you mind  if Tom tells us the story</p><p>  He  disliked working late</p><p>  He disliked my working late</p><p>  I object to making private calls on this phone</p><p>  I object to his making private calls on this phone.</p><h5 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h5><p>  <strong>做主语或宾语</strong></p><p>​    a. Tom’s coming home at last was a great consolation (做主语)</p><p>​    b. Do you mind my making a suggestion? (做及物动词宾语)</p><p>​    c. Our discussion of earthquakes would be imncomplete if we didn’t  raise the  possibility of their being caused by external forces.</p><p>  <strong>物主代词(his)可以改为宾格代词(him) or 所有格名词(Tom’s)改成普通格名词(Tom)</strong></p><p>​    a. It’s no use Tom arguing with his boss.</p><p>​    b. Do you mind me making a suggestion?</p><p>​    c. I am annoyed about John forgetting to pay.</p><h5 id="应用原则："><a href="#应用原则：" class="headerlink" title="应用原则："></a>应用原则：</h5><p>​    <strong>1) 若动名词复合结构在句中做主语，最好用所有格形式</strong></p><p>​      a. Tom’s refusing to accept the invitation upset me.</p><p>​      b. His refusing to accept the invitation upset me.</p><p>​      c. It was a great consolation his coming home at last.</p><p>​    <strong>2)动名词复合结构在句中做宾语时候，用普通格或所有格均可</strong></p><p>​      a. Do you mind me making a suggestion?</p><p>​      b. I am annoyed about John forgetting to pay. </p><p>参考文章:<br><a href="https://github.com/yizutianya/English_Grammar_Learning">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;做主语&quot;&gt;&lt;a href=&quot;#做主语&quot; class=&quot;headerlink&quot; title=&quot;做主语&quot;&gt;&lt;/a&gt;做主语&lt;/h4&gt;&lt;h5 id=&quot;1-直接句首做主语：谓语动词用单数&quot;&gt;&lt;a href=&quot;#1-直接句首做主语：谓语动词用单数&quot; class=&quot;headerlink&quot; title=&quot;1. 直接句首做主语：谓语动词用单数&quot;&gt;&lt;/a&gt;1. 直接句首做主语：谓语动词用单数&lt;/h5&gt;&lt;p&gt;​    a. Seeing is believing.&lt;/p&gt;
&lt;p&gt;​    b. Reading is like permitting a man to talk a long time, and refusing you the right to answer.
    
    </summary>
    
    
      <category term="English" scheme="https://removeif.github.io/categories/English/"/>
    
      <category term="grammar" scheme="https://removeif.github.io/categories/English/grammar/"/>
    
    
      <category term="English" scheme="https://removeif.github.io/tags/English/"/>
    
      <category term="grammar" scheme="https://removeif.github.io/tags/grammar/"/>
    
  </entry>
  
  <entry>
    <title>英语语法-动词不定式</title>
    <link href="https://removeif.github.io/english-learn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95-%E5%8A%A8%E8%AF%8D%E4%B8%8D%E5%AE%9A%E5%BC%8F.html"/>
    <id>https://removeif.github.io/english-learn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95-%E5%8A%A8%E8%AF%8D%E4%B8%8D%E5%AE%9A%E5%BC%8F.html</id>
    <published>2020-02-28T10:01:55.000Z</published>
    <updated>2020-02-28T14:22:52.422Z</updated>
    
    <content type="html"><![CDATA[<h4 id="做主语：It-to-do-sth-句型"><a href="#做主语：It-to-do-sth-句型" class="headerlink" title="做主语：It + to do sth 句型"></a>做主语：It + to do sth 句型</h4><h5 id="1-It-to-do-sth句型；it做形式主语"><a href="#1-It-to-do-sth句型；it做形式主语" class="headerlink" title="1. It + to do sth句型；it做形式主语"></a>1. It + to do sth句型；it做形式主语</h5><p>​    a. It is easier to spend money than to make money.</p><p>​    b. It takes time to study English well.</p><p>​    形式主语it不能用this或that替换 <a id="more"></a></p><p>​    This is impossible for people to stare directly at the sun.应用it</p><h5 id="2-不定式置于句首做主语，谓语动词要用单数。"><a href="#2-不定式置于句首做主语，谓语动词要用单数。" class="headerlink" title="2. 不定式置于句首做主语，谓语动词要用单数。"></a>2. 不定式置于句首做主语，谓语动词要用单数。</h5><p>​    a. To err is human; to forgive, divine</p><p>​    b. To  solve this problem takes a genius like Einstein.</p><p>​    c. To love for the sake of being loved is human, but to love for the sake of loving is angelic.</p><p>​    d. To send a letter is a good way to go somewhere without moving anything but your heart.</p><h4 id="做宾语：动词-to-do"><a href="#做宾语：动词-to-do" class="headerlink" title="做宾语：动词 + to do"></a>做宾语：动词 + to do</h4><h5 id="1-直接跟在一个及物动词后面做宾语"><a href="#1-直接跟在一个及物动词后面做宾语" class="headerlink" title="1. 直接跟在一个及物动词后面做宾语"></a>1. 直接跟在一个及物动词后面做宾语</h5><p>​    <strong>特点一：句子的主语和不定式的逻辑主语是一致的，动作都是由主语发出。</strong></p><p>​    <strong>特点二：这时句子谓语动词多是描写态度；不定式动作则说明行为。</strong></p><p>​           a. I hope to see you again.</p><p>​           b. This company refused to cooperate with us.</p><p>​           c. He promised not to tell anyone about it.</p><p>​    <strong>接不定式做宾语的动词有</strong></p><p>​       agree, appear, beg, begin, dare, decide, expect, fail, forget, happen, hate, hesitate</p><p>​       hope, intend, like, love, manage, mean, prefer, prepare, pretend, promise, propose</p><p>​       refuse, regret, remember, seem, start, swear, try, want, wish</p><h5 id="2-连接词引导宾语从句的简略形式：动词-连接代词or连接副词or连词whether-to-do"><a href="#2-连接词引导宾语从句的简略形式：动词-连接代词or连接副词or连词whether-to-do" class="headerlink" title="2. 连接词引导宾语从句的简略形式：动词 + 连接代词or连接副词or连词whether + to do"></a>2. 连接词引导宾语从句的简略形式：动词 + 连接代词or连接副词or连词whether + to do</h5><p>​    a. I wonder who to invite. (= who I should invite)</p><p>​    b. Show us what to do. (= what we must do)</p><p>​    c. I don’t know whether to answer his letter. (= whether I should answer)</p><p>​    <strong>类似动词还有：</strong><code>ask, consider, decide, discover, explain, forget, find out, guess, imagine,</code></p><p>​                 <code>know, learn, observe, remember, see, tell, teach, think, understand, wonder</code></p><h4 id="做宾语补足语：动词-sb-to-do-sth"><a href="#做宾语补足语：动词-sb-to-do-sth" class="headerlink" title="做宾语补足语：动词 + sb to do sth"></a>做宾语补足语：动词 + sb to do sth</h4><h5 id="1-通常结构：动词-sb-to-do-sth"><a href="#1-通常结构：动词-sb-to-do-sth" class="headerlink" title="1. 通常结构：动词 + sb to do sth"></a>1. 通常结构：动词 + sb to do sth</h5><p>​    a. They don’t allow people to smoke in the theater.</p><p>​    b. The chairman declared the meeting to be over.</p><p>​    c. Allow me to drink to your success.</p><p>​    d. Allow me to propose a toast to our friendship.</p><p>​    f. My mother wishes me to return to China.</p><p>​    <strong>常用动词：</strong><code>advise, allow, ask, beg, cause, encourage, expect, forbid, force, get, help, like</code></p><p>​              <code>order, permit, persuade, remind, teach, tell, want, warn, wish(hope不可)</code></p><h5 id="2-在let-make-have-see-hear-feel-watch-notice-listen-to等动词后面，不定式做宾语补足语to要省略，改为被动语态，则必须带to-详见“不带to的不定式”"><a href="#2-在let-make-have-see-hear-feel-watch-notice-listen-to等动词后面，不定式做宾语补足语to要省略，改为被动语态，则必须带to-详见“不带to的不定式”" class="headerlink" title="2. 在let, make, have, see, hear, feel, watch, notice, listen to等动词后面，不定式做宾语补足语to要省略，改为被动语态，则必须带to(详见“不带to的不定式”)"></a>2. 在let, make, have, see, hear, feel, watch, notice, listen to等动词后面，不定式做宾语补足语to要省略，改为被动语态，则必须带to(详见“不带to的不定式”)</h5><h4 id="做定语：名词-to-do-sth"><a href="#做定语：名词-to-do-sth" class="headerlink" title="做定语：名词 + to do sth"></a>做定语：名词 + to do sth</h4><h5 id="1-动宾关系"><a href="#1-动宾关系" class="headerlink" title="1. 动宾关系"></a>1. 动宾关系</h5><p>​    <strong>被修饰名词在逻辑上做不定式的宾语</strong></p><p>​    a. She has four children to take care of.</p><p>​    b. I had no place to live in.</p><p>​    c. You just regard me as a thing, an object to look at, to use, to touch, but not to listen to or  to take seriously.</p><p>​    d. I gave the  kid a comic to read.</p><p>​    e. He needs a place to live in.</p><p>​    f. I have no partner to speak English with.</p><p>​    g. I need a pen to write with.</p><p>​    h. I need a piiece of paper to write on.</p><p>​    <strong>注意：</strong></p><p>​      <strong>1. 不定式一般不用被动形式</strong></p><p>​      <strong>2. 不定式动词后面不能再加宾语</strong></p><p>​        a. I gave the kid a comic to read it. *</p><p>​        b. I need something to eat it. *</p><p>​      <strong>3.  不定式动词后介词不省略</strong></p><p>​        a. I have no partner to speak English. *</p><p>​        b. I need a pen to write. *</p><h5 id="2-被only-last-next-序数词-最高级修饰的名词通常用不定式做定语"><a href="#2-被only-last-next-序数词-最高级修饰的名词通常用不定式做定语" class="headerlink" title="2. 被only, last, next, 序数词, 最高级修饰的名词通常用不定式做定语"></a>2. 被only, last, next, 序数词, 最高级修饰的名词通常用不定式做定语</h5><p>​    a. I don’t think he is the best man to do the job.</p><p>​    b. The next train to arrive is from New York.</p><p>​    c. Clint was the second person to fall into this trap.</p><p>​    d. Clint was the only person to survive the air crash.</p><h4 id="做独立成分"><a href="#做独立成分" class="headerlink" title="做独立成分"></a>做独立成分</h4><p>  修饰整个句子： to begin with, to tell the truth, to make a long story short, so to speak, to be brief/exaact/frank/honest, to say nothing of(姑且不所说), to say the least(至少可以这么说)</p><p>  a. To begin with, on behalf of (代表)all of your American guests, I wish to thank you for the incomparable hospitality.</p><p>  b. I have a point there, to say the least.</p><p>  c. To make a long story short, he is in hospital now.</p><h4 id="做状语：目的在状语-and-结果状语"><a href="#做状语：目的在状语-and-结果状语" class="headerlink" title="做状语：目的在状语 and 结果状语"></a>做状语：目的在状语 and 结果状语</h4><h5 id="1-做目的状语"><a href="#1-做目的状语" class="headerlink" title="1.做目的状语"></a>1.做目的状语</h5><p>  a. Hating people is like burning down your own house to get rid of a rat.</p><p>  b. To avoid criticsim, do nothing, say nothing, be nothing.</p><p>  c. To acquire knowledge, one must study; but to acquire wisdom, one must observe.</p><p>  d. We had better start early to catch the train.</p><p>  e. I went to the post office to mail a letter.</p><p>  <strong>可以用in order to do 或 so as to do 强调目的状语</strong></p><p>​    a. We had better start early so as to catch the train.</p><p>​    b. I went to the post office in order to mail a letter.</p><p>​    c. I quote others in order to better express my own self.</p><p>​    d. The teacher raised her voice in order for us to hear more clearly.</p><p>​    <strong>注意：so as to不放在句首；to do和in order to do可以放句首。</strong></p><h5 id="2-做结果状语"><a href="#2-做结果状语" class="headerlink" title="2.做结果状语"></a>2.做结果状语</h5><p>  <strong>1. 直接做结果状语</strong></p><p>​    a. He lived to be a hundred years.</p><p>​    b. What have I done to offend you?</p><p>​    c. He lived to see second world war.(= he lived until he saw world war II)</p><p>  <strong>2. never to do表结果</strong></p><p>​    a. John left his hometown ten years ago, never to return.</p><p>​    b. We parted never to see each other.</p><p>  <strong>3. only to do引出意想不到或不愉快的结果</strong></p><p>​    a. We hurried to the railway station, only to find the train had just left.</p><p>​    b. All too often, women complain that they’re educated as equals, only to go out into the workforce to be treated as inferiors.</p><p>​    c. He worked very hard, only to find he had not finished half of the job.</p><p>  <strong>4. enough to</strong></p><p>​    a. He is not old enough to go to school.</p><p>​    b. The teacher speaks loudly enough to make himself heard clearly.</p><p>  <strong>5. too…to结构：太…而不能</strong></p><p>​    a. The box is too heavy for me to even move.</p><p>​    b. The tea is too hot to drink.</p><h4 id="形容词后的不定式"><a href="#形容词后的不定式" class="headerlink" title="形容词后的不定式"></a>形容词后的不定式</h4><h5 id="1-句子主语和不定式可以构成逻辑上的主谓关系"><a href="#1-句子主语和不定式可以构成逻辑上的主谓关系" class="headerlink" title="1. 句子主语和不定式可以构成逻辑上的主谓关系"></a>1. 句子主语和不定式可以构成逻辑上的主谓关系</h5><p>  <strong>这类形容词通常表示人的性格特征或行为表现</strong></p><p>  brave, careful, careless, clever, considerate, cruel, foolish, generous, kind, modest, nice</p><p>  polite, rude, selfish, silly, stupid, thoughtful.</p><p>​    a. He was surprised to learn how much he had spent.</p><p>​    b. The boy was careless to break the window.</p><h5 id="2-句子主语和不定式构成逻辑上的动宾关系"><a href="#2-句子主语和不定式构成逻辑上的动宾关系" class="headerlink" title="2. 句子主语和不定式构成逻辑上的动宾关系"></a>2. 句子主语和不定式构成逻辑上的动宾关系</h5><p>  a. She is interesting to listen to = It is interesting to listen to her.</p><p>  b. Relativity theory isn’t easy to understand = it isn’t easy to understand relativity theory.</p><p>  c. She is very nice to talk to = It is very nice to talk to her.</p><p>  d. Mary is easy to get on with = It is easy to get on with Mary.</p><p>  e. English is difficult to speak.</p><p>  f. Football is very interesting to watch.</p><p>  g. Barbara is interesting to listen to because she reads a lot.</p><h5 id="在动宾关系的情况需要注意："><a href="#在动宾关系的情况需要注意：" class="headerlink" title="在动宾关系的情况需要注意："></a>在动宾关系的情况需要注意：</h5><p>​    <strong>1)不定式动词不用被动式(最容易出错)</strong></p><p>​      a. English is difficult to be spoken</p><p>​      b. Football is interesting to be watched</p><p>​    <strong>2)不定式后不加宾语</strong></p><p>​      a. Football is very interesting to watch it</p><p>​      b. She is nice to talk to her</p><p>​    <strong>3)不定式动词所带介词不能省略</strong></p><p>​      a. She is interesting to listen</p><p>​      b. She is easy to get on </p><p>● It’s impossble for fish to live without water.</p><p>● it’s necessary for students to do more exercise in learning English.</p><p>● The boy was made to sing the song once again.</p><p>● He couldn’t help  bursting into tears after he heard the news.</p><p>● She could not but admit that they were justified in this</p><p>● They forbade him to go to the park</p><p>● The first explorer to reach California by land was Strong Smith, a trapper who crossed the southwestern deserts of the United States in 1826</p><p>● He was the first to arrive and the last to leave</p><p>● The teachers don’t know what it takes to start and run a school.</p><h4 id="不带to的不定式"><a href="#不带to的不定式" class="headerlink" title="不带to的不定式"></a>不带to的不定式</h4><h5 id="动词的复合宾语中to省去"><a href="#动词的复合宾语中to省去" class="headerlink" title="动词的复合宾语中to省去"></a>动词的复合宾语中to省去</h5><p>  <strong>1. 感觉动词：see, hear, watch, notice, feel, observe</strong></p><p>  <strong>2. 使役动词：let, make, have</strong></p><p>​    a. The teacher has us write a composition every week.</p><p>​    b. I saw a man enter the shop.</p><p>​    <strong>但为被动结构时，后面需要 + to</strong></p><p>​      a. A man was seen to enter the shop.</p><h4 id="一些短语中to省略"><a href="#一些短语中to省略" class="headerlink" title="一些短语中to省略"></a>一些短语中to省略</h4><p>  had better, would rather, would sooner, would just a soon, might(just) as well, cannot but</p><p><strong>cannot choose but, cannot help but</strong></p><p>​    a. I cannot but admire his courage.</p><p>​    b. We might as well put up here for tonight.</p><p>​    c. I couldn’t help but fall in love with you.</p><p><strong>do nothing/anything/everything but do省略</strong></p><p>  a. I have nothing to do but wait.</p><p>  b. I have no choice but to wait(but前没有do，则不定式 + to)</p><p>  c. He needs nothing but to succeed.</p><p>  d. He will do anything but give in</p><p><strong>在解释do的精确含义的名词从句和定语从句做主语的句子中，be动词后直接 + do</strong></p><p>  e. All that I could do then was wait.</p><p>  f. What I could do then was wait.</p><p>  g. All you do now is complete this form.</p><p>  h. No mountains too high for you to climb. All you have to do is have some climbing faith.</p><p>  g. No rivers too wide for you to make it across. All you have to do is believe it when you pray.</p><p>​参考文章:<br> <a href="https://github.com/yizutianya/English_Grammar_Learning">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;做主语：It-to-do-sth-句型&quot;&gt;&lt;a href=&quot;#做主语：It-to-do-sth-句型&quot; class=&quot;headerlink&quot; title=&quot;做主语：It + to do sth 句型&quot;&gt;&lt;/a&gt;做主语：It + to do sth 句型&lt;/h4&gt;&lt;h5 id=&quot;1-It-to-do-sth句型；it做形式主语&quot;&gt;&lt;a href=&quot;#1-It-to-do-sth句型；it做形式主语&quot; class=&quot;headerlink&quot; title=&quot;1. It + to do sth句型；it做形式主语&quot;&gt;&lt;/a&gt;1. It + to do sth句型；it做形式主语&lt;/h5&gt;&lt;p&gt;​    a. It is easier to spend money than to make money.&lt;/p&gt;
&lt;p&gt;​    b. It takes time to study English well.&lt;/p&gt;
&lt;p&gt;​    形式主语it不能用this或that替换
    
    </summary>
    
    
      <category term="English" scheme="https://removeif.github.io/categories/English/"/>
    
      <category term="grammar" scheme="https://removeif.github.io/categories/English/grammar/"/>
    
    
      <category term="English" scheme="https://removeif.github.io/tags/English/"/>
    
      <category term="grammar" scheme="https://removeif.github.io/tags/grammar/"/>
    
  </entry>
  
  <entry>
    <title>英语语法-定语从句</title>
    <link href="https://removeif.github.io/english-learn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95-%E5%AE%9A%E8%AF%AD%E4%BB%8E%E5%8F%A5.html"/>
    <id>https://removeif.github.io/english-learn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95-%E5%AE%9A%E8%AF%AD%E4%BB%8E%E5%8F%A5.html</id>
    <published>2020-02-27T11:35:28.000Z</published>
    <updated>2020-02-28T03:41:10.314Z</updated>
    
    <content type="html"><![CDATA[<h4 id="完整句子做定语"><a href="#完整句子做定语" class="headerlink" title="完整句子做定语"></a>完整句子做定语</h4><p>形容词做定语放在被修饰词前面</p><p>完整句子做定语放在被修饰词后面</p><h4 id="定语从句的重要概念"><a href="#定语从句的重要概念" class="headerlink" title="定语从句的重要概念"></a>定语从句的重要概念</h4><p><strong>先行词</strong>：被修饰或限定的词（the people） <a id="more"></a></p><p><strong>关系词</strong>：重复指代先行词，起连接作用并在定语从句中充当成分</p><p>   <strong>代词作用</strong>：重复指代先行词，从句中充当成分</p><p>   <strong>连接作用</strong>：连接主句和从句的作用 </p><h4 id="关系代词的用法"><a href="#关系代词的用法" class="headerlink" title="关系代词的用法"></a>关系代词的用法</h4><p>  先行词指人<code>who，whom</code></p><p>  先行词指物<code>which</code></p><p>  先行词指人或物均可：<code>that，whose</code></p><h4 id="先行词指人"><a href="#先行词指人" class="headerlink" title="先行词指人"></a>先行词指人</h4><p>  <strong>who和whom区别</strong></p><ul><li><strong><code>who</code>在从句中<code>可做主语，宾语，表语</code>，但who之前不可用介词</strong></li></ul><p>​      I like the people <code>who</code> I work with</p><p>​      I like the people <code>with whom</code> I work</p><ul><li><strong><code>whom</code>在定语从句中<code>不能做主语</code>，可以<code>做表语或宾语</code></strong></li></ul><p>​      A rich person is not one <code>who</code> has the most, but is one <code>who</code> needs the least. </p><ul><li><p><strong>表示人或物的所有关系：whose + 名词：在从句中可做`主语，动词宾语，介词宾语</strong>`</p><p>a. When I looked through the window, I saw a girl <code>whose beauty</code> took my breath away.</p><p>b. It was a meeting <code>whose importance</code> I did not realize at the time</p></li></ul><p>​    <strong>动词宾语</strong></p><p>  c. Atlas(in Greek mythology) was a kneeling man <code>on whose</code> shoulders the world rested.</p><p>​    <strong>介词宾语</strong> </p><h4 id="先行词指物"><a href="#先行词指物" class="headerlink" title="先行词指物"></a>先行词指物</h4><ul><li><strong>a. which可以指代单个名词</strong></li></ul><p>​    Perhaps it is human to appreciate little <code>that which</code> we have and to long for <code>that which</code>  we have not</p><ul><li><strong>b. which可以指代单个短语</strong></li></ul><p>​    He likes <strong>climbing mountains</strong>, <code>which</code> is a good exercise.</p><ul><li><strong>c. which可以指代前面整个句子</strong></li></ul><p>​    <strong>She wore her swimming things in the office</strong>, <code>which</code> shocked her boss a great deal. </p><p><strong>非限定性定语从句：被修饰的句子不需要定语从句意思也完整，只是补充说明</strong></p><h4 id="that指代人或指代物：注意不可以用在介词后面"><a href="#that指代人或指代物：注意不可以用在介词后面" class="headerlink" title="that指代人或指代物：注意不可以用在介词后面"></a>that指代人或指代物：注意<code>不可以用在介词后面</code></h4><p>  The world <code>that/which</code> we live in is made up of matter.</p><p>  The world in <code>which</code> we live is made up of matter.</p><h4 id="最好用that情况"><a href="#最好用that情况" class="headerlink" title="最好用that情况"></a>最好用that情况</h4><ul><li><strong>先行词有人也有物时，用that</strong></li></ul><p>​    The writer and his novels <code>that</code> the article deals with are quite familiar to us.</p><ul><li><strong>先行词为指物的all, little, few, much, none, the first用that</strong></li></ul><p>​    a. All that glitters is not gold.</p><p>​    b. This book contains little that is useful.</p><p>​    c. There is not much that can be done.</p><p>​    d. As long as you stand up to the difficulties, there are none that cannot be overcome.</p><ul><li><strong>先行词是不定代词something, anything, nothing, everything用that</strong></li></ul><p>​    a. Is there <strong><em>anything</em></strong> that I can do for you?</p><p>​    b.Greater expense does not always equal better gift, I would much rather receive <strong>a gift</strong> that was unique or that I knew my friend had put some thought into rather than <strong>something</strong> that cost a lot of money but that I didn’t need or want. I would much rather receive <strong>something</strong> that made me laugh, made me reminisce, or fit my personality that <strong>something</strong> that cost a lot but that I will just throw  in my closet and forget about.</p><ul><li><strong>先行词被any, only, all, every, no, some, much, few, little, 序数词，最高级，the only, the one, the very, the right, the last，修饰时用that</strong></li></ul><p>​    a. Tell us all things <strong>that</strong> you know.</p><p>​    b. There is no difficulty (<strong>that</strong>) they can’t overcome.</p><p>​    c. The only thing <strong>that</strong> we should do is find our way home.</p><p>​    d. The very problem <strong>that</strong> I want to solve is like this.</p><p>​    e. He is the only man <strong>that</strong> can speak four foreign languages in our company. </p><h4 id="关系代词省略"><a href="#关系代词省略" class="headerlink" title="关系代词省略"></a>关系代词省略</h4><p>  <strong>关系代词who, whom, which, that 若在定语从句中用作宾语，可以省略</strong></p><p>​    a. Tina likes the present which I gave her for her birthday.</p><p>​    b. Tina likes the present that I gave her for her birthday.</p><p>​    c. Tina likes the present I gave her for ther birthday.</p><p>​    d. I like the people who I work with.</p><p>​    e. I like the people I work with.</p><p>​    f. I’m talking about friends who you can share almost everything with.</p><p>​    g. I’m talking abouot friends you can share almost everything with.</p><h4 id="关系副词的用法：when-where-why，从句中做时间状语，地点状语，-原因状语"><a href="#关系副词的用法：when-where-why，从句中做时间状语，地点状语，-原因状语" class="headerlink" title="关系副词的用法：when, where, why，从句中做时间状语，地点状语， 原因状语"></a>关系副词的用法：when, where, why，从句中做时间状语，地点状语， 原因状语</h4><ul><li><strong>先行词指时间</strong></li></ul><p>​    when 引导限制性和非限制性定语从句，先行词须是表示<strong><em>时间的名词</em></strong></p><p>​    day, year, time,      <strong><em>when可以用on which来替换</em></strong></p><p>​    a. I’ll never forget <strong><em>the day</em></strong> when I met you.</p><p>​    b. I’ll never forget <strong><em>the day</em></strong> on which I met you.</p><p>​    c. We will put off the outing until <strong><em>next week</em></strong>, when we won’t be so busy.</p><p>​    d. The <strong><em>day</em></strong> may soon come when we don’t bother to go to office but just work at home.</p><ul><li><strong>关系副词when在从句中做时间状语</strong></li></ul><p>​    <strong><em>当心</em></strong>：<code>表示时间的先行词，若定语从句中不缺少状语和是缺少宾语或主语，要用which或</code></p><p><code>that来引导定语从句。因为when来引导定语从句的前提条件是：when 在其引导的定语从句中做时间状语。</code></p><p>​     a. <strong><em>The day</em></strong>, which began brightly, ended with a violent storm. (which做主语)</p><p>​     b. I’ll never forget <strong><em>the time</em></strong> which I spent on campus. (which做spent宾语)</p><p>​     c. I’ll never forget <strong><em>the day</em></strong> when we first met in the park. (when做时间状语修饰met)</p><h4 id="where的用法-at-which或in-which"><a href="#where的用法-at-which或in-which" class="headerlink" title="where的用法 = at which或in which"></a>where的用法 = at which或in which</h4><ul><li><strong>where引导定语从句，先行词必须是表示地点的名词，如place, house</strong></li></ul><p>​    a. Do you know <strong><em>any place</em></strong> where I can buy Clint’s grammar book?</p><p>​    b. Do you know <strong><em>any place</em></strong> at which I can buy Clint’s grammar book?</p><p>​    c. This is <strong><em>the town</em></strong> where(in which) I spent my childhood.</p><p>​    d. This is <strong><em>the restaurant</em></strong> where I often have my breakfast.</p><ul><li><strong>关系副词where在从句中做地点状语</strong></li></ul><p>​    a. This is <strong><em>the town</em></strong> where I spent my childhood.</p><p>​    b. This is <strong><em>the town</em></strong> which I told you about before. which做about的宾语</p><p>​    c. The library <strong>where</strong> students often study was on fire last night.</p><p>​    d. The library, <strong>which</strong> was built in the 1930’s, needs to be renovated.</p><p>​    e. One of the <strong><em>places</em></strong> which I want to visit someday is Tibet. which做visit宾语</p><p><strong>why的用法：只用来引导限制定语从句，先行词是reason等表示原因的名词</strong></p><p><strong>因为说明原因，所以不是补充说明，不能做非限制定语从句 = for which</strong></p><p>  This is <strong><em>the reason</em></strong> why I didn’t come here </p><h4 id="限制性和非限制性的定语从句"><a href="#限制性和非限制性的定语从句" class="headerlink" title="限制性和非限制性的定语从句"></a>限制性和非限制性的定语从句</h4><p>   形式上：有无 “，” 分割开来</p><p><strong>限制性定语从句</strong></p><p>​     作用：用来提供必要的信息，限定身份或性质，限制范围，若去掉从句，含义不明</p><p>​     例子：I don’t like people意思不明</p><p>​          I don’t like people who never keep their words.</p><p><strong>非限制性定语从句</strong></p><p>​     作用：提供附加的非必要信息，补充说明或解释，去掉从句，不会引起误解。</p><p>​     例子：Beijing, which is the capital of China, has developed into an international city.</p><p><strong>如果定语从句修饰一个专有名词，我用一般用逗号，就是要用非限定性定语从句。</strong></p><p><strong>因为专有名词本身意思已经很完整，不需要限制，只是用定语从句进行补充</strong></p><h4 id="用不用逗号的句子意义有差别"><a href="#用不用逗号的句子意义有差别" class="headerlink" title="用不用逗号的句子意义有差别"></a>用不用逗号的句子意义有差别</h4><table><thead><tr><th>限制性</th><th>非限制性</th><th>解释</th></tr></thead><tbody><tr><td>he has a daughter who works in a hospital</td><td>he has a daughter, who works in a hospital</td><td>a，表示他有多个女儿，其中一个在医院工作b，强调他有一个女儿，不是儿子，在医院工作</td></tr><tr><td>the food which wasn’t in  the fridge all went off.</td><td>the food, which wasn’t in the fridge, all went off</td><td>a，没有放在冰箱里的那部分食物坏了b，食物都坏了，因为没有放在冰箱里。此时的定语从句补充说明变坏的原因。</td></tr></tbody></table><p>  <code>限制性定语从句一般翻译成定语形式“….的”</code></p><p>  <strong>非性质性定语从句往往翻译成各种状语</strong></p><p>  a. the food, which wasn’t in the fridge, all went off.</p><p>​     <strong>翻译成原因状语从句</strong></p><p>  b. the Ambassador gave a dinner to the scientists, with whom the especially wished to talk</p><p>​     <strong>翻译成原因状语从句</strong></p><p>  c. the people were desperate for work, any work, which could support their family.</p><p>​     <strong>条件状语从句</strong></p><p>  d. the millionaire had another house built, which he didn’t need at all</p><p>​     <strong>让语状语从句</strong></p><h4 id="that引导的定语从句和同位语从句的区别"><a href="#that引导的定语从句和同位语从句的区别" class="headerlink" title="that引导的定语从句和同位语从句的区别"></a>that引导的定语从句和同位语从句的区别</h4><ul><li><strong>that是否做成分：that在定语从句中充当成分，在同位语从句中不做任何成分</strong></li></ul><p>​     a. the rumor that he spread everywhere turned out to be untrue.</p><p>​     b. the rumor that tom was a thief turned out to be untrue.</p><p>​     a 中that在从句he spread everywhere 做成分，充当spread的宾语，为定语从句</p><p>​     b 中that在从句tom was a thief中不做任何成分。</p><ul><li><strong>从句作用</strong></li></ul><p>​    定语从句相当于形容词，他对先行词起到修饰，描述和限制的作用。</p><p>​    同位语从句相当于一个名词，他是前面名词的内容的具体表述。两者是同位的关系。</p><p>参考文章:<br><a href="https://github.com/yizutianya/English_Grammar_Learning">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;完整句子做定语&quot;&gt;&lt;a href=&quot;#完整句子做定语&quot; class=&quot;headerlink&quot; title=&quot;完整句子做定语&quot;&gt;&lt;/a&gt;完整句子做定语&lt;/h4&gt;&lt;p&gt;形容词做定语放在被修饰词前面&lt;/p&gt;
&lt;p&gt;完整句子做定语放在被修饰词后面&lt;/p&gt;
&lt;h4 id=&quot;定语从句的重要概念&quot;&gt;&lt;a href=&quot;#定语从句的重要概念&quot; class=&quot;headerlink&quot; title=&quot;定语从句的重要概念&quot;&gt;&lt;/a&gt;定语从句的重要概念&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;先行词&lt;/strong&gt;：被修饰或限定的词（the people）
    
    </summary>
    
    
      <category term="English" scheme="https://removeif.github.io/categories/English/"/>
    
      <category term="grammar" scheme="https://removeif.github.io/categories/English/grammar/"/>
    
    
      <category term="English" scheme="https://removeif.github.io/tags/English/"/>
    
      <category term="grammar" scheme="https://removeif.github.io/tags/grammar/"/>
    
  </entry>
  
  <entry>
    <title>英语语法-被动语态</title>
    <link href="https://removeif.github.io/english-learn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95-%E8%A2%AB%E5%8A%A8%E8%AF%AD%E6%80%81.html"/>
    <id>https://removeif.github.io/english-learn/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95-%E8%A2%AB%E5%8A%A8%E8%AF%AD%E6%80%81.html</id>
    <published>2020-02-27T11:35:07.000Z</published>
    <updated>2020-02-28T03:41:10.315Z</updated>
    
    <content type="html"><![CDATA[<h4 id="构成：be-过去分词"><a href="#构成：be-过去分词" class="headerlink" title="构成：be + 过去分词"></a>构成：be + 过去分词</h4><h5 id="不同时态的被动语态be变化"><a href="#不同时态的被动语态be变化" class="headerlink" title="不同时态的被动语态be变化"></a>不同时态的被动语态be变化</h5><p><code>is, is being, has been, was, was being, had been, will be, will have been</code></p><h4 id="不用by情况"><a href="#不用by情况" class="headerlink" title="不用by情况"></a>不用by情况</h4><ul><li><strong>实施者明显</strong></li></ul><p>​    a. The rubbish hasn’t been collected. <a id="more"></a></p><p>​    b. Your hand will be X-rayed.</p><p>​    c. The streets are swept every day. </p><ul><li><strong>实施者未知或没必要提及</strong></li></ul><p>​    a. The President has been murdered.</p><p>​    b. My car has been moved.</p><p>​    c. Rice is grown in many countries.</p><p>​    d. The library was built in 1890.</p><ul><li><strong>泛指人们</strong></li></ul><p>​    <code>acknowledge, assume, believe, claim, consider, estimate, feel, find, know, presume, report,</code></p><p>​    <code>say, think</code></p><p>​    People believe him to be honest.     </p><p>​    He is believed to be honest.</p><ul><li><strong>主句主语是<code>one</code>, you, they 通常用被动语态</strong></li></ul><p>​    One/ You see this kind of advertisement everywhere.</p><p>​    This kind of advertisement is seen everywhere.</p><p>​    They are building a new public library in our town.</p><p>​    A new public library is being built in our town.</p><ul><li><strong>避免改换主语(可以接by短语)</strong></li></ul><p>​    When he arrived home, a detective arrested him.</p><p>​    When he arrived home, he was arrested.</p><h4 id="不及物动词没有被动语态"><a href="#不及物动词没有被动语态" class="headerlink" title="不及物动词没有被动语态"></a>不及物动词没有被动语态</h4><p>  He came here last night.</p><p>  He looks fine.   </p><h4 id="双宾语可以有两种被动语态-人做主语更常见"><a href="#双宾语可以有两种被动语态-人做主语更常见" class="headerlink" title="双宾语可以有两种被动语态(人做主语更常见)"></a>双宾语可以有两种被动语态(人做主语更常见)</h4><p>  Someone gave me a gift.  </p><p>  I was given a gift.</p><p>  Someone gave a gift to me.   </p><p>  A gift was given to me.</p><h4 id="静态被动语态"><a href="#静态被动语态" class="headerlink" title="静态被动语态"></a>静态被动语态</h4><table><thead><tr><th>句子</th><th>解释</th></tr></thead><tbody><tr><td>Now the door is locked</td><td>这里的is locked 只是强调动作，起着形容词的作用。</td></tr><tr><td>I locked the door two minutes ago. The door was locked by me two minutes ago.</td><td>这里的was locked强调动作</td></tr></tbody></table><p>  Clint broke the window last night</p><p>  The window was broken last night</p><p>  Now the window is broken.</p><ul><li><strong>常见<code>interested, excited, satisfied, married, disappointed, scared, frightened, worried, lost</code></strong></li></ul><p>​    a. I am interested in grammar.</p><p>​    b. I am satisfied with Clint’s grammar course.</p><p>​    c. She is married to her teacher.</p><p>​    d. The table is made of wood.</p><p>​    e. Are you scared of snake?</p><h4 id="get与被动语态-get与过去分词连用"><a href="#get与被动语态-get与过去分词连用" class="headerlink" title="get与被动语态(get与过去分词连用)"></a>get与被动语态(get与过去分词连用)</h4><ul><li><strong>可以构成被动语态</strong></li></ul><p>​    a. My watch got broken while I was playing with the children.</p><p>​    b. He got caught by the police because he exceeded the speed limit.</p><ul><li><strong>可以接静态的被动形式，表示主语的状态</strong></li></ul><p>​    a. I stopped working because I got tired.</p><p>​    b. I got worried because he was two hours late.</p><p>​    c. She is getting dressed to the party and has trouble deciding what clothes to wear.</p><h4 id="have-get-sth-done"><a href="#have-get-sth-done" class="headerlink" title="have/get sth done"></a>have/get sth done</h4><p>  <code>have sth done或者get sth done</code></p><ul><li><strong>安排别人把事情做好(主要用法)</strong></li></ul><p>​    a. Are you going to repair the car yourself?</p><p>​    b. No, I’m going to have it repaired.</p><p>​    c. I want to have/get my iterms repaired. (My iterms need repairing.)</p><p>​    d. I must get my hair cut = I want someone to cut my hair.</p><p>​    e. You should get/have your bike repaired.</p><p>​    g. If you don’t get our of my house, I’ll have you arrested.</p><ul><li><strong>意外或不行的事情</strong></li></ul><p>​    a. I got my car stolen last year.</p><p>​    b. Have you ever had your passport stolen?</p><p>​    c. Joe had his leg broken in a fight.</p><p>​    d. It took me two hours to get the washing done.</p><p>​    e. Don’t get your plans changed. </p><p>参考文章:<br><a href="https://github.com/yizutianya/English_Grammar_Learning">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;构成：be-过去分词&quot;&gt;&lt;a href=&quot;#构成：be-过去分词&quot; class=&quot;headerlink&quot; title=&quot;构成：be + 过去分词&quot;&gt;&lt;/a&gt;构成：be + 过去分词&lt;/h4&gt;&lt;h5 id=&quot;不同时态的被动语态be变化&quot;&gt;&lt;a href=&quot;#不同时态的被动语态be变化&quot; class=&quot;headerlink&quot; title=&quot;不同时态的被动语态be变化&quot;&gt;&lt;/a&gt;不同时态的被动语态be变化&lt;/h5&gt;&lt;p&gt;&lt;code&gt;is, is being, has been, was, was being, had been, will be, will have been&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;不用by情况&quot;&gt;&lt;a href=&quot;#不用by情况&quot; class=&quot;headerlink&quot; title=&quot;不用by情况&quot;&gt;&lt;/a&gt;不用by情况&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;实施者明显&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​    a. The rubbish hasn’t been collected.
    
    </summary>
    
    
      <category term="English" scheme="https://removeif.github.io/categories/English/"/>
    
      <category term="grammar" scheme="https://removeif.github.io/categories/English/grammar/"/>
    
    
      <category term="English" scheme="https://removeif.github.io/tags/English/"/>
    
      <category term="grammar" scheme="https://removeif.github.io/tags/grammar/"/>
    
  </entry>
  
  <entry>
    <title>spring-boot实现动态增删启停定时任务</title>
    <link href="https://removeif.github.io/java/frame/spring-boot%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%A2%9E%E5%88%A0%E5%90%AF%E5%81%9C%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1.html"/>
    <id>https://removeif.github.io/java/frame/spring-boot%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%A2%9E%E5%88%A0%E5%90%AF%E5%81%9C%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1.html</id>
    <published>2020-02-24T11:01:58.000Z</published>
    <updated>2020-02-24T11:10:51.895Z</updated>
    
    <content type="html"><![CDATA[<p>在spring boot项目中，可以通过@EnableScheduling注解和@Scheduled注解实现定时任务，也可以通过SchedulingConfigurer接口来实现定时任务。但是这两种方式不能动态添加、删除、启动、停止任务。要实现动态增删启停定时任务功能，比较广泛的做法是集成Quartz框架。但是本人的开发原则是：在满足项目需求的情况下，尽量少的依赖其它框架，避免项目过于臃肿和复杂。查看spring-context这个jar包中org.springframework.scheduling.ScheduledTaskRegistrar这个类的源代码，发现可以通过改造这个类就能实现动态增删启停定时任务功能。<a id="more"></a></p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200224185316.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200224185338.png" alt=""></p><p>添加执行定时任务的线程池配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulingConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TaskScheduler <span class="title">taskScheduler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskScheduler taskScheduler = <span class="keyword">new</span> ThreadPoolTaskScheduler();</span><br><span class="line">        <span class="comment">// 定时任务执行线程池核心线程数</span></span><br><span class="line">        taskScheduler.setPoolSize(<span class="number">4</span>);</span><br><span class="line">        taskScheduler.setRemoveOnCancelPolicy(<span class="keyword">true</span>);</span><br><span class="line">        taskScheduler.setThreadNamePrefix(<span class="string">"TaskSchedulerThreadPool-"</span>);</span><br><span class="line">        <span class="keyword">return</span> taskScheduler;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加ScheduledFuture的包装类。ScheduledFuture是ScheduledExecutorService定时任务线程池的执行结果。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledTask</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">volatile</span> ScheduledFuture&lt;?&gt; <span class="built_in">future</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取消定时任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ScheduledFuture&lt;?&gt; <span class="built_in">future</span> = <span class="keyword">this</span>.<span class="built_in">future</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">future</span> != null) &#123;</span><br><span class="line">            <span class="built_in">future</span>.cancel(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加Runnable接口实现类，被定时任务线程池调用，用来执行指定bean里面的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulingRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(SchedulingRunnable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String beanName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String methodName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String params;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SchedulingRunnable</span><span class="params">(String beanName, String methodName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(beanName, methodName, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SchedulingRunnable</span><span class="params">(String beanName, String methodName, String params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beanName = beanName;</span><br><span class="line">        <span class="keyword">this</span>.methodName = methodName;</span><br><span class="line">        <span class="keyword">this</span>.params = params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"定时任务开始执行 - bean：&#123;&#125;，方法：&#123;&#125;，参数：&#123;&#125;"</span>, beanName, methodName, params);</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Object target = SpringContextUtils.getBean(beanName);</span><br><span class="line"></span><br><span class="line">            Method method = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotEmpty(params)) &#123;</span><br><span class="line">                method = target.getClass().getDeclaredMethod(methodName, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                method = target.getClass().getDeclaredMethod(methodName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ReflectionUtils.makeAccessible(method);</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotEmpty(params)) &#123;</span><br><span class="line">                method.invoke(target, params);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                method.invoke(target);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            logger.error(String.format(<span class="string">"定时任务执行异常 - bean：%s，方法：%s，参数：%s "</span>, beanName, methodName, params), ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> times = System.currentTimeMillis() - startTime;</span><br><span class="line">        logger.info(<span class="string">"定时任务执行结束 - bean：&#123;&#125;，方法：&#123;&#125;，参数：&#123;&#125;，耗时：&#123;&#125; 毫秒"</span>, beanName, methodName, params, times);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        SchedulingRunnable that = (SchedulingRunnable) o;</span><br><span class="line">        <span class="keyword">if</span> (params == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> beanName.equals(that.beanName) &amp;&amp;</span><br><span class="line">                    methodName.equals(that.methodName) &amp;&amp;</span><br><span class="line">                    that.params == <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> beanName.equals(that.beanName) &amp;&amp;</span><br><span class="line">                methodName.equals(that.methodName) &amp;&amp;</span><br><span class="line">                params.equals(that.params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (params == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hash(beanName, methodName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Objects.hash(beanName, methodName, params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加定时任务注册类，用来增加、删除定时任务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CronTaskRegistrar</span> <span class="keyword">implements</span> <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Runnable, ScheduledTask&gt; scheduledTasks = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskScheduler taskScheduler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TaskScheduler <span class="title">getScheduler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.taskScheduler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCronTask</span><span class="params">(Runnable task, String cronExpression)</span> </span>&#123;</span><br><span class="line">        addCronTask(<span class="keyword">new</span> CronTask(task, cronExpression));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCronTask</span><span class="params">(CronTask cronTask)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cronTask != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Runnable task = cronTask.getRunnable();</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.scheduledTasks.containsKey(task)) &#123;</span><br><span class="line">                removeCronTask(task);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.scheduledTasks.put(task, scheduleCronTask(cronTask));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeCronTask</span><span class="params">(Runnable task)</span> </span>&#123;</span><br><span class="line">        ScheduledTask scheduledTask = <span class="keyword">this</span>.scheduledTasks.remove(task);</span><br><span class="line">        <span class="keyword">if</span> (scheduledTask != <span class="keyword">null</span>)</span><br><span class="line">            scheduledTask.cancel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ScheduledTask <span class="title">scheduleCronTask</span><span class="params">(CronTask cronTask)</span> </span>&#123;</span><br><span class="line">        ScheduledTask scheduledTask = <span class="keyword">new</span> ScheduledTask();</span><br><span class="line">        scheduledTask.future = <span class="keyword">this</span>.taskScheduler.schedule(cronTask.getRunnable(), cronTask.getTrigger());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> scheduledTask;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (ScheduledTask task : <span class="keyword">this</span>.scheduledTasks.values()) &#123;</span><br><span class="line">            task.cancel();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.scheduledTasks.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加定时任务示例类</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Component(<span class="string">"demoTask"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DemoTask</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">taskWithParams</span>(<span class="params">String <span class="keyword">params</span></span>)</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"执行有参示例任务："</span> + <span class="keyword">params</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">taskNoParams</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"执行无参示例任务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定时任务数据库表设计</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200224185804.png" alt=""></p><p>添加定时任务实体类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">public class SysJobPO &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 任务ID</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private Integer jobId;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * bean名称</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String beanName;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 方法名称</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String methodName;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 方法参数</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String methodParams;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * cron表达式</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String cronExpression;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 状态（1正常 0暂停）</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private Integer jobStatus;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 备注</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String remark;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 创建时间</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private Date createTime;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 更新时间</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private Date updateTime;</span><br><span class="line"></span><br><span class="line">    public Integer getJobId() &#123;</span><br><span class="line">        return jobId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setJobId(Integer jobId) &#123;</span><br><span class="line">        this.jobId &#x3D; jobId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getBeanName() &#123;</span><br><span class="line">        return beanName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setBeanName(String beanName) &#123;</span><br><span class="line">        this.beanName &#x3D; beanName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getMethodName() &#123;</span><br><span class="line">        return methodName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMethodName(String methodName) &#123;</span><br><span class="line">        this.methodName &#x3D; methodName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getMethodParams() &#123;</span><br><span class="line">        return methodParams;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMethodParams(String methodParams) &#123;</span><br><span class="line">        this.methodParams &#x3D; methodParams;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCronExpression() &#123;</span><br><span class="line">        return cronExpression;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCronExpression(String cronExpression) &#123;</span><br><span class="line">        this.cronExpression &#x3D; cronExpression;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getJobStatus() &#123;</span><br><span class="line">        return jobStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setJobStatus(Integer jobStatus) &#123;</span><br><span class="line">        this.jobStatus &#x3D; jobStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getRemark() &#123;</span><br><span class="line">        return remark;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setRemark(String remark) &#123;</span><br><span class="line">        this.remark &#x3D; remark;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Date getCreateTime() &#123;</span><br><span class="line">        return createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCreateTime(Date createTime) &#123;</span><br><span class="line">        this.createTime &#x3D; createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Date getUpdateTime() &#123;</span><br><span class="line">        return updateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUpdateTime(Date updateTime) &#123;</span><br><span class="line">        this.updateTime &#x3D; updateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新增定时任务</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200224185845.png" alt=""></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">boolean success = sysJobRepository.addSysJob(sysJob);</span><br><span class="line"><span class="keyword">if</span> (!success)</span><br><span class="line">    <span class="keyword">return</span> OperationResUtils.fail(<span class="string">"新增失败"</span>);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (sysJob.getJobStatus().<span class="keyword">equals</span>(SysJobStatus.NORMAL.ordinal())) &#123;</span><br><span class="line">        SchedulingRunnable task = <span class="keyword">new</span> SchedulingRunnable(sysJob.getBeanName(), sysJob.getMethodName(), sysJob.getMethodParams());</span><br><span class="line">        cronTaskRegistrar.addCronTask(task, sysJob.getCronExpression());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> OperationResUtils.success();</span><br></pre></td></tr></table></figure><p>修改定时任务，先移除原来的任务，再启动新任务</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">boolean success = sysJobRepository.editSysJob(sysJob);</span><br><span class="line"><span class="keyword">if</span> (!success)</span><br><span class="line">    <span class="keyword">return</span> OperationResUtils.fail(<span class="string">"编辑失败"</span>);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//先移除再添加</span></span><br><span class="line">    <span class="keyword">if</span> (existedSysJob.getJobStatus().<span class="keyword">equals</span>(SysJobStatus.NORMAL.ordinal())) &#123;</span><br><span class="line">        SchedulingRunnable task = <span class="keyword">new</span> SchedulingRunnable(existedSysJob.getBeanName(), existedSysJob.getMethodName(), existedSysJob.getMethodParams());</span><br><span class="line">        cronTaskRegistrar.removeCronTask(task);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sysJob.getJobStatus().<span class="keyword">equals</span>(SysJobStatus.NORMAL.ordinal())) &#123;</span><br><span class="line">        SchedulingRunnable task = <span class="keyword">new</span> SchedulingRunnable(sysJob.getBeanName(), sysJob.getMethodName(), sysJob.getMethodParams());</span><br><span class="line">        cronTaskRegistrar.addCronTask(task, sysJob.getCronExpression());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> OperationResUtils.success();</span><br></pre></td></tr></table></figure><p>删除定时任务</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">boolean success = sysJobRepository.deleteSysJobById(req.getJobId());</span><br><span class="line"><span class="keyword">if</span> (!success)</span><br><span class="line">    <span class="keyword">return</span> OperationResUtils.fail(<span class="string">"删除失败"</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (existedSysJob.getJobStatus().<span class="keyword">equals</span>(SysJobStatus.NORMAL.ordinal())) &#123;</span><br><span class="line">        SchedulingRunnable task = <span class="keyword">new</span> SchedulingRunnable(existedSysJob.getBeanName(), existedSysJob.getMethodName(), existedSysJob.getMethodParams());</span><br><span class="line">        cronTaskRegistrar.removeCronTask(task);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> OperationResUtils.success();</span><br></pre></td></tr></table></figure><p>定时任务启动/停止状态切换</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (existedSysJob.getJobStatus().<span class="keyword">equals</span>(SysJobStatus.NORMAL.ordinal())) &#123;</span><br><span class="line">    SchedulingRunnable task = <span class="keyword">new</span> SchedulingRunnable(existedSysJob.getBeanName(), existedSysJob.getMethodName(), existedSysJob.getMethodParams());</span><br><span class="line">    cronTaskRegistrar.addCronTask(task, existedSysJob.getCronExpression());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    SchedulingRunnable task = <span class="keyword">new</span> SchedulingRunnable(existedSysJob.getBeanName(), existedSysJob.getMethodName(), existedSysJob.getMethodParams());</span><br><span class="line">    cronTaskRegistrar.removeCronTask(task);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加实现了CommandLineRunner接口的SysJobRunner类，当spring boot项目启动完成后，加载数据库里状态为正常的定时任务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysJobRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(SysJobRunner<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ISysJobRepository sysJobRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CronTaskRegistrar cronTaskRegistrar;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 初始加载数据库里状态为正常的定时任务</span></span><br><span class="line">        List&lt;SysJobPO&gt; jobList = sysJobRepository.getSysJobListByStatus(SysJobStatus.NORMAL.ordinal());</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(jobList)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (SysJobPO job : jobList) &#123;</span><br><span class="line">                SchedulingRunnable task = <span class="keyword">new</span> SchedulingRunnable(job.getBeanName(), job.getMethodName(), job.getMethodParams());</span><br><span class="line">                cronTaskRegistrar.addCronTask(task, job.getCronExpression());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            logger.info(<span class="string">"定时任务已加载完毕..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工具类SpringContextUtils，用来从spring容器里获取bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringContextUtils</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        SpringContextUtils.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getBean(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; requiredType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getBean(requiredType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String name, Class&lt;T&gt; requiredType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getBean(name, requiredType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">containsBean</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.containsBean(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.isSingleton(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Class&lt;? extends Object&gt; getType(String name) &#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getType(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考文章:<br><a href="https://www.jianshu.com/p/0f68936393fd">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在spring boot项目中，可以通过@EnableScheduling注解和@Scheduled注解实现定时任务，也可以通过SchedulingConfigurer接口来实现定时任务。但是这两种方式不能动态添加、删除、启动、停止任务。要实现动态增删启停定时任务功能，比较广泛的做法是集成Quartz框架。但是本人的开发原则是：在满足项目需求的情况下，尽量少的依赖其它框架，避免项目过于臃肿和复杂。查看spring-context这个jar包中org.springframework.scheduling.ScheduledTaskRegistrar这个类的源代码，发现可以通过改造这个类就能实现动态增删启停定时任务功能。
    
    </summary>
    
    
      <category term="java" scheme="https://removeif.github.io/categories/java/"/>
    
      <category term="springboot" scheme="https://removeif.github.io/categories/java/springboot/"/>
    
    
      <category term="springboot" scheme="https://removeif.github.io/tags/springboot/"/>
    
      <category term="Schedule" scheme="https://removeif.github.io/tags/Schedule/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot@Valid注解以及全局异常处理器优雅处理参数验证</title>
    <link href="https://removeif.github.io/java/frame/SpringBoot-Valid%E6%B3%A8%E8%A7%A3%E4%BB%A5%E5%8F%8A%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8%E4%BC%98%E9%9B%85%E5%A4%84%E7%90%86%E5%8F%82%E6%95%B0%E9%AA%8C%E8%AF%81.html"/>
    <id>https://removeif.github.io/java/frame/SpringBoot-Valid%E6%B3%A8%E8%A7%A3%E4%BB%A5%E5%8F%8A%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8%E4%BC%98%E9%9B%85%E5%A4%84%E7%90%86%E5%8F%82%E6%95%B0%E9%AA%8C%E8%AF%81.html</id>
    <published>2020-02-20T10:04:31.000Z</published>
    <updated>2020-02-24T11:10:51.889Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、为什么使用-Valid-来验证参数"><a href="#一、为什么使用-Valid-来验证参数" class="headerlink" title="一、为什么使用 @Valid 来验证参数"></a>一、为什么使用 @Valid 来验证参数</h3><p>在平常通过 Spring 框架写代码时候，会经常写接口类，相信大家对该类的写法非常熟悉。在写接口时经常要写效验请求参数逻辑，这时候我们会常用做法是写大量的 <code>if</code> 与 <code>if else</code> 类似这样的代码来做判断，如下：<a id="more"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUserInfo</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (user.getName() == <span class="keyword">null</span> || <span class="string">""</span>.equals(user.getName()) &#123;</span><br><span class="line">            ......</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(user.getSex() == <span class="keyword">null</span> || <span class="string">""</span>.equals(user.getSex())) &#123;</span><br><span class="line">            ......</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(user.getUsername() == <span class="keyword">null</span> || <span class="string">""</span>.equals(user.getUsername())) &#123;</span><br><span class="line">            ......</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ......</span><br><span class="line">        &#125;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的代码如果按正常代码逻辑来说，是没有什么问题的，不过按优雅来说，简直糟糕透了。不仅不优雅，而且如果存在大量的验证逻辑，这会使代码看起来乱糟糟，大大降低代码可读性，那么有没有更好的方法能够简化这个过程呢？答案当然是有，推荐的是使用 <code>@Valid</code> 注解来帮助我们简化验证逻辑。</p><h3 id="二、-Valid-注解的作用"><a href="#二、-Valid-注解的作用" class="headerlink" title="二、@Valid 注解的作用"></a>二、@Valid 注解的作用</h3><p>注解 <code>@Valid</code> 的主要作用是用于数据效验，可以在定义的实体中的属性上，添加不同的注解来完成不同的校验规则，而在接口类中的接收数据参数中添加 <code>@valid</code> 注解，这时你的实体将会开启一个校验的功能。</p><h3 id="三、-Valid-的相关注解"><a href="#三、-Valid-的相关注解" class="headerlink" title="三、@Valid 的相关注解"></a>三、@Valid 的相关注解</h3><p>下面是 @Valid 相关的注解，在实体类中不同的属性上添加不同的注解，就能实现不同数据的效验功能。</p><table><thead><tr><th align="left">注解名称</th><th align="left">作用描述</th></tr></thead><tbody><tr><td align="left">@Null</td><td align="left">限制只能为null</td></tr><tr><td align="left">@NotNull</td><td align="left">限制必须不为null</td></tr><tr><td align="left">@AssertFalse</td><td align="left">限制必须为false</td></tr><tr><td align="left">@AssertTrue</td><td align="left">限制必须为true</td></tr><tr><td align="left">@DecimalMax(value)</td><td align="left">限制必须为一个不大于指定值的数字</td></tr><tr><td align="left">@DecimalMin(value)</td><td align="left">限制必须为一个不小于指定值的数字</td></tr><tr><td align="left">@Digits(integer,fraction)</td><td align="left">限制必须为一个小数，且整数部分的位数不能超过integer，小数部分的位数不能超过fraction</td></tr><tr><td align="left">@Future</td><td align="left">限制必须是一个将来的日期</td></tr><tr><td align="left">@Max(value)</td><td align="left">限制必须为一个不大于指定值的数字</td></tr><tr><td align="left">@Min(value)</td><td align="left">限制必须为一个不小于指定值的数字</td></tr><tr><td align="left">@Past</td><td align="left">限制必须是一个过去的日期</td></tr><tr><td align="left">@Pattern(value)</td><td align="left">限制必须符合指定的正则表达式</td></tr><tr><td align="left">@Size(max,min)</td><td align="left">限制字符长度必须在min到max之间</td></tr><tr><td align="left">@Past</td><td align="left">验证注解的元素值（日期类型）比当前时间早</td></tr><tr><td align="left">@NotEmpty</td><td align="left">验证注解的元素值不为null且不为空（字符串长度不为0、集合大小不为0）</td></tr><tr><td align="left">@NotBlank</td><td align="left">验证注解的元素值不为空（不为null、去除首位空格后长度为0），不同于@NotEmpty，@NotBlank只应用于字符串且在比较时会去除字符串的空格</td></tr><tr><td align="left">@Email</td><td align="left">验证注解的元素值是Email，也可以通过正则表达式和flag指定自定义的email格式</td></tr></tbody></table><h3 id="四、使用-Valid-进行参数效验步骤"><a href="#四、使用-Valid-进行参数效验步骤" class="headerlink" title="四、使用 @Valid 进行参数效验步骤"></a>四、使用 @Valid 进行参数效验步骤</h3><p>整个过程如下图所示，用户访问接口，然后进行参数效验，因为 @Valid 不支持平面的参数效验（直接写在参数中字段的效验）所以基于 GET 请求的参数还是按照原先方式进行效验，而 POST 则可以以实体对象为参数，可以使用 @Valid 方式进行效验。如果效验通过，则进入业务逻辑，否则抛出异常，交由全局异常处理器进行处理。</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200220175349.png" alt=""></p><h4 id="1、实体类中添加-Valid-相关注解"><a href="#1、实体类中添加-Valid-相关注解" class="headerlink" title="1、实体类中添加 @Valid 相关注解"></a>1、实体类中添加 @Valid 相关注解</h4><p>使用 <code>@Valid</code> 相关注解非常简单，只需要在参数的实体类中属性上面添加如 <code>@NotBlank</code>、<code>@Max</code>、<code>@Min</code> 等注解来对该字段进限制，如下：</p><p><strong>User：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"姓名不为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"密码不为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是嵌套的实体对象，则需要在最外层属性上添加 <code>@Valid</code> 注解：</p><p><strong>User：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"姓名不为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"密码不为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">//嵌套必须加 @Valid，否则嵌套中的验证不生效</span></span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"用户信息不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> UserInfo userInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>UserInfo：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"年龄不为空"</span>)</span><br><span class="line">    <span class="meta">@Max</span>(value = <span class="number">18</span>, message = <span class="string">"不能超过18岁"</span>)</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"性别不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、接口类中添加-Valid-注解"><a href="#2、接口类中添加-Valid-注解" class="headerlink" title="2、接口类中添加 @Valid 注解"></a>2、接口类中添加 @Valid 注解</h4><p>在 <code>Controller</code> 类中添加接口，<code>POST</code> 方法中接收设置了 @Valid 相关注解的实体对象，然后在参数中添加 <code>@Valid</code> 注解来开启效验功能，需要注意的是， <code>@Valid</code> 对 <code>Get</code> 请求中接收的平面参数请求无效，稍微略显遗憾。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUserInfo</span><span class="params">(@Valid @RequestBody User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"调用成功!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、全局异常处理类中处理-Valid-抛出的异常"><a href="#3、全局异常处理类中处理-Valid-抛出的异常" class="headerlink" title="3、全局异常处理类中处理 @Valid 抛出的异常"></a>3、全局异常处理类中处理 @Valid 抛出的异常</h4><p>最后，我们写一个全局异常处理类，然后对接口中抛出的异常进行处理，而 <code>@Valid</code> 配合 <code>Spring</code> 会抛出 <code>MethodArgumentNotValidException</code> 异常，这里我们需要对该异常进行处理即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span>(<span class="string">"club.mydlq.valid"</span>)   <span class="comment">//指定异常处理的包名</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.BAD_REQUEST) <span class="comment">//设置状态码为 400</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(&#123;MethodArgumentNotValidException<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">paramExceptionHandler</span>(<span class="title">MethodArgumentNotValidException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        BindingResult exceptions = e.getBindingResult();</span><br><span class="line">        <span class="comment">// 判断异常中是否有错误信息，如果存在就使用异常中的消息，否则使用默认消息</span></span><br><span class="line">        <span class="keyword">if</span> (exceptions.hasErrors()) &#123;</span><br><span class="line">            List&lt;ObjectError&gt; errors = exceptions.getAllErrors();</span><br><span class="line">            <span class="keyword">if</span> (!errors.isEmpty()) &#123;</span><br><span class="line">                <span class="comment">// 这里列出了全部错误参数，按正常逻辑，只需要第一条错误即可</span></span><br><span class="line">                FieldError fieldError = (FieldError) errors.get(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">return</span> fieldError.getDefaultMessage();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"请求参数错误"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、SpringBoot-中使用-Valid-示例"><a href="#五、SpringBoot-中使用-Valid-示例" class="headerlink" title="五、SpringBoot 中使用 @Valid 示例"></a>五、SpringBoot 中使用 @Valid 示例</h3><h4 id="1、Maven-引入相关依赖"><a href="#1、Maven-引入相关依赖" class="headerlink" title="1、Maven 引入相关依赖"></a>1、Maven 引入相关依赖</h4><p>Maven 引入 SpringBoot 相关依赖，这里引入了 Lombok 包来简化开发过程。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aspire<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-valid-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot-valid-demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>@valid demo<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、自定义个异常类"><a href="#2、自定义个异常类" class="headerlink" title="2、自定义个异常类"></a>2、自定义个异常类</h4><p>自定义个异常类，方便我们处理 GET 请求（GET 请求参数中一般是没有实体对象的，所以不能使用 @Valid），当请求验证失败时，手动抛出自定义异常，交由全局异常处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamaErrorException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParamaErrorException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParamaErrorException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、自定义响应枚举类"><a href="#3、自定义响应枚举类" class="headerlink" title="3、自定义响应枚举类"></a>3、自定义响应枚举类</h4><p>定义一个返回信息的枚举类，方便我们快速响应信息，不必每次都写返回消息和响应码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ResultEnum &#123;</span><br><span class="line"></span><br><span class="line">    SUCCESS(<span class="number">1000</span>, <span class="string">"请求成功"</span>),</span><br><span class="line">    PARAMETER_ERROR(<span class="number">1001</span>, <span class="string">"请求参数有误!"</span>),</span><br><span class="line">    UNKNOWN_ERROR(<span class="number">9999</span>, <span class="string">"未知的错误!"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    ResultEnum(Integer code, String message) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、自定义响应对象类"><a href="#4、自定义响应对象类" class="headerlink" title="4、自定义响应对象类"></a>4、自定义响应对象类</h4><p>创建用于返回调用方的响应信息的实体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.aspire.parameter.enums.ResultEnum;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseResult</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResponseResult</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResponseResult</span><span class="params">(ResultEnum resultEnum)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = resultEnum.getCode();</span><br><span class="line">        <span class="keyword">this</span>.msg = resultEnum.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResponseResult</span><span class="params">(Integer code, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、自定义实体类中添加-Valid-相关注解"><a href="#5、自定义实体类中添加-Valid-相关注解" class="headerlink" title="5、自定义实体类中添加 @Valid 相关注解"></a>5、自定义实体类中添加 @Valid 相关注解</h4><p>下面将创建用于 POST 方法接收参数的实体对象，里面添加 @Valid 相关验证注解，并在注解中添加出错时的响应消息。</p><p><strong>User</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotBlank;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * user实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"姓名不为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"密码不为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">// 嵌套必须加 @Valid，否则嵌套中的验证不生效</span></span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"userinfo不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> UserInfo userInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>UserInfo</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Max;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotBlank;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"年龄不为空"</span>)</span><br><span class="line">    <span class="meta">@Max</span>(value = <span class="number">18</span>, message = <span class="string">"不能超过18岁"</span>)</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"性别不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、Controller-中添加-Valid-注解"><a href="#6、Controller-中添加-Valid-注解" class="headerlink" title="6、Controller 中添加 @Valid 注解"></a>6、Controller 中添加 @Valid 注解</h4><p>接口类中添加 GET 和 POST 方法的两个接口用于测试，其中 POST 方法以上面创建的 Uer 实体对象接收参数，并使用 @Valid，而 GET 请求一般接收参数较少，所以使用正常判断逻辑进行参数效验。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> club.mydlq.valid.entity.ResponseResult;</span><br><span class="line"><span class="keyword">import</span> club.mydlq.valid.entity.User;</span><br><span class="line"><span class="keyword">import</span> club.mydlq.valid.enums.ResultEnum;</span><br><span class="line"><span class="keyword">import</span> club.mydlq.valid.exception.ParamaErrorException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 姓名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ResponseResult</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Validated</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;username&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseResult <span class="title">findUserInfo</span><span class="params">(@PathVariable String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (username == <span class="keyword">null</span> || <span class="string">""</span>.equals(username)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ParamaErrorException(<span class="string">"username 不能为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseResult(ResultEnum.SUCCESS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ResponseResult</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseResult <span class="title">addUserInfo</span><span class="params">(@Valid @RequestBody User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseResult(ResultEnum.SUCCESS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、全局异常处理"><a href="#7、全局异常处理" class="headerlink" title="7、全局异常处理"></a>7、全局异常处理</h4><p>这里创建一个全局异常处理类，方便统一处理异常错误信息。里面添加了不同异常处理的方法，专门用于处理接口中抛出的异常信。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> club.mydlq.valid.entity.ResponseResult;</span><br><span class="line"><span class="keyword">import</span> club.mydlq.valid.enums.ResultEnum;</span><br><span class="line"><span class="keyword">import</span> club.mydlq.valid.exception.ParamaErrorException;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageNotReadableException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.FieldError;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.ObjectError;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.MethodArgumentNotValidException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.MissingServletRequestParameterException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestControllerAdvice</span>(<span class="string">"club.mydlq.valid"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 忽略参数异常处理器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 忽略参数异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ResponseResult</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.BAD_REQUEST)</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(MissingServletRequestParameterException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ResponseResult</span> <span class="title">parameterMissingExceptionHandler</span>(<span class="title">MissingServletRequestParameterException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        log.error(<span class="string">""</span>, e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseResult(ResultEnum.PARAMETER_ERROR.getCode(), <span class="string">"请求参数 "</span> + e.getParameterName() + <span class="string">" 不能为空"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缺少请求体异常处理器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 缺少请求体异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ResponseResult</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.BAD_REQUEST)</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(HttpMessageNotReadableException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ResponseResult</span> <span class="title">parameterBodyMissingExceptionHandler</span>(<span class="title">HttpMessageNotReadableException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        log.error(<span class="string">""</span>, e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseResult(ResultEnum.PARAMETER_ERROR.getCode(), <span class="string">"参数体不能为空"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数效验异常处理器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 参数验证异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ResponseInfo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.BAD_REQUEST)</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(MethodArgumentNotValidException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ResponseResult</span> <span class="title">parameterExceptionHandler</span>(<span class="title">MethodArgumentNotValidException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        log.error(<span class="string">""</span>, e);</span><br><span class="line">        <span class="comment">// 获取异常信息</span></span><br><span class="line">        BindingResult exceptions = e.getBindingResult();</span><br><span class="line">        <span class="comment">// 判断异常中是否有错误信息，如果存在就使用异常中的消息，否则使用默认消息</span></span><br><span class="line">        <span class="keyword">if</span> (exceptions.hasErrors()) &#123;</span><br><span class="line">            List&lt;ObjectError&gt; errors = exceptions.getAllErrors();</span><br><span class="line">            <span class="keyword">if</span> (!errors.isEmpty()) &#123;</span><br><span class="line">                <span class="comment">// 这里列出了全部错误参数，按正常逻辑，只需要第一条错误即可</span></span><br><span class="line">                FieldError fieldError = (FieldError) errors.get(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ResponseResult(ResultEnum.PARAMETER_ERROR.getCode(), fieldError.getDefaultMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseResult(ResultEnum.PARAMETER_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义参数错误异常处理器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 自定义参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ResponseInfo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.BAD_REQUEST)</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(&#123;ParamaErrorException<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ResponseResult</span> <span class="title">paramExceptionHandler</span>(<span class="title">ParamaErrorException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        log.error(<span class="string">""</span>, e);</span><br><span class="line">        <span class="comment">// 判断异常中是否有错误信息，如果存在就使用异常中的消息，否则使用默认消息</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(e.getMessage())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseResult(ResultEnum.PARAMETER_ERROR.getCode(), e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseResult(ResultEnum.PARAMETER_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、启动类"><a href="#8、启动类" class="headerlink" title="8、启动类"></a>8、启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、示例测试"><a href="#9、示例测试" class="headerlink" title="9、示例测试"></a>9、示例测试</h4><p>下面将针对上面示例中设置的两种接口进行测试，分别来验证参数效验功能。</p><p><strong>|| - 测试接口 /user/{username}</strong></p><p>使用 GET 方法请求地址 <a href="http://localhost:8080/user?username=test">http://localhost:8080/user?username=test</a> 时，返回信息：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"请求成功"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当不输入参数，输入地址 <a href="http://localhost:8080/user">http://localhost:8080/user</a> 时，返回信息：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">1001</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"请求参数 username 不能为空"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在执行 GET 请求，能够正常按我们全局异常处理器中的设置处理异常信息。</p><p><strong>|| - 测试接口 /user</strong></p><p>(1)、使用 POST 方法发起请求，首先进行不加 JSON 请求体来对 <a href="http://localhost:8080/user">http://localhost:8080/user</a> 地址进行请求，返回信息：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">1001</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"参数体不能为空"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)、输入部分参数进行测试。</p><ul><li>请求内容：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"username"</span>:<span class="string">"test"</span>,</span><br><span class="line"> <span class="attr">"password"</span>:<span class="string">"123"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>返回信息：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">1001</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"userinfo不能为空"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3)、输入完整参数，且设置 age &gt; 18 时，进行测试。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"username"</span>:<span class="string">"111"</span>,</span><br><span class="line"> <span class="attr">"password"</span>:<span class="string">"sa"</span>,</span><br><span class="line">  <span class="attr">"userInfo"</span>:&#123;</span><br><span class="line">    <span class="attr">"age"</span>:<span class="number">19</span>,</span><br><span class="line">    <span class="attr">"gender"</span>:<span class="string">"男"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>返回信息：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">1001</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"不能超过18岁"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在执行 POST 请求，也能正常按我们全局异常处理器中的设置处理异常信息，且提示信息为我们设置在实体类中的 Message。</p><p>参考文章:<br><a href="http://www.mydlq.club/article/49/">参考链接1</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、为什么使用-Valid-来验证参数&quot;&gt;&lt;a href=&quot;#一、为什么使用-Valid-来验证参数&quot; class=&quot;headerlink&quot; title=&quot;一、为什么使用 @Valid 来验证参数&quot;&gt;&lt;/a&gt;一、为什么使用 @Valid 来验证参数&lt;/h3&gt;&lt;p&gt;在平常通过 Spring 框架写代码时候，会经常写接口类，相信大家对该类的写法非常熟悉。在写接口时经常要写效验请求参数逻辑，这时候我们会常用做法是写大量的 &lt;code&gt;if&lt;/code&gt; 与 &lt;code&gt;if else&lt;/code&gt; 类似这样的代码来做判断，如下：
    
    </summary>
    
    
      <category term="java" scheme="https://removeif.github.io/categories/java/"/>
    
      <category term="springboot" scheme="https://removeif.github.io/categories/java/springboot/"/>
    
    
      <category term="springboot" scheme="https://removeif.github.io/tags/springboot/"/>
    
      <category term="Valid" scheme="https://removeif.github.io/tags/Valid/"/>
    
  </entry>
  
  <entry>
    <title>算法成长之路leetcode21-22</title>
    <link href="https://removeif.github.io/algorithm/%E7%AE%97%E6%B3%95%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AFleetcode21-22.html"/>
    <id>https://removeif.github.io/algorithm/%E7%AE%97%E6%B3%95%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AFleetcode21-22.html</id>
    <published>2020-02-10T10:19:10.000Z</published>
    <updated>2020-02-10T10:47:40.454Z</updated>
    
    <content type="html"><![CDATA[<h3 id="21-Merge-Two-Sorted-Lists"><a href="#21-Merge-Two-Sorted-Lists" class="headerlink" title="21. Merge Two Sorted Lists"></a><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">21. Merge Two Sorted Lists</a></h3><p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p><a id="more"></a><h4 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="line">Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure><h4 id="JAVA题解："><a href="#JAVA题解：" class="headerlink" title="JAVA题解："></a>JAVA题解：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithm.c3;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 示例：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span></span><br><span class="line"><span class="comment"> * 输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment"> * 链接：https://leetcode-cn.com/problems/merge-two-sorted-lists</span></span><br><span class="line"><span class="comment"> * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leetcode21</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 错解</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ListNode l = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode cur = l;</span><br><span class="line">        <span class="keyword">while</span> (l1.next != <span class="keyword">null</span> || l2.next != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (l1.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">                cur.next = l2;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l2.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">                cur.next = l1;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(l1.val &gt; l2.val)&#123;</span><br><span class="line">                    cur.next= l2;</span><br><span class="line">                    l2 = l2.next;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(l1.val == l2.val)&#123;</span><br><span class="line">                    cur.next= l2;</span><br><span class="line">                    cur.next.next = l1;</span><br><span class="line">                    l1 = l1.next;</span><br><span class="line">                    l2 = l2.next;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    cur.next = l1;</span><br><span class="line">                    l1 = l1.next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> l.next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists1</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// maintain an unchanging reference to node ahead of the return node.</span></span><br><span class="line">        ListNode prehead = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        ListNode prev = prehead;</span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l1.val &lt;= l2.val) &#123;</span><br><span class="line">                prev.next = l1;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                prev.next = l2;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            prev = prev.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// exactly one of l1 and l2 can be non-null at this point, so connect</span></span><br><span class="line">        <span class="comment">// the non-null list to the end of the merged list.</span></span><br><span class="line">        prev.next = l1 == <span class="keyword">null</span> ? l2 : l1;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> prehead.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists2</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l1.val &lt; l2.val) &#123;</span><br><span class="line">            l1.next = mergeTwoLists(l1.next, l2);</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l2.next = mergeTwoLists(l1, l2.next);</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ListNode l1 = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        l1.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        l1.next.next = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        ListNode l2 = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        l2.next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        l2.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="keyword">new</span> Leetcode21().mergeTwoLists1(l1,l2));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        ListNode next;</span><br><span class="line"></span><br><span class="line">        ListNode(<span class="keyword">int</span> x) &#123;</span><br><span class="line">            val = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="22-Generate-Parentheses"><a href="#22-Generate-Parentheses" class="headerlink" title="22. Generate Parentheses"></a><a href="https://leetcode-cn.com/problems/generate-parentheses/">22. Generate Parentheses</a></h3><p>Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.</p><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example:"></a>Example:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">For example, given n &#x3D; 3, a solution set is:</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  &quot;((()))&quot;,</span><br><span class="line">  &quot;(()())&quot;,</span><br><span class="line">  &quot;(())()&quot;,</span><br><span class="line">  &quot;()(())&quot;,</span><br><span class="line">  &quot;()()()&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="JAVA题解：-1"><a href="#JAVA题解：-1" class="headerlink" title="JAVA题解："></a>JAVA题解：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithm.c3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给出 n 代表生成括号的对数，请你写出一个函数，使其能够生成所有可能的并且有效的括号组合。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 例如，给出 n = 3，生成结果为：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [</span></span><br><span class="line"><span class="comment"> *   "((()))",</span></span><br><span class="line"><span class="comment"> *   "(()())",</span></span><br><span class="line"><span class="comment"> *   "(())()",</span></span><br><span class="line"><span class="comment"> *   "()(())",</span></span><br><span class="line"><span class="comment"> *   "()()()"</span></span><br><span class="line"><span class="comment"> * ]</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment"> * 链接：https://leetcode-cn.com/problems/generate-parentheses</span></span><br><span class="line"><span class="comment"> * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leetcode22</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 在此题中，动态规划的思想类似于数学归纳法，当知道所有 i&lt;n 的情况时，我们可以通过某种算法算出 i=n 的情况。</span></span><br><span class="line"><span class="comment">     * 本题最核心的思想是，考虑 i=n 时相比 n-1 组括号增加的那一组括号的位置。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 思路：</span></span><br><span class="line"><span class="comment">     * 当我们清楚所有 i&lt;n 时括号的可能生成排列后，对与 i=n 的情况，我们考虑整个括号排列中最左边的括号。</span></span><br><span class="line"><span class="comment">     * 它一定是一个左括号，那么它可以和它对应的右括号组成一组完整的括号 "( )"，我们认为这一组是相比 n-1 增加进来的括号。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 那么，剩下 n-1 组括号有可能在哪呢？</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 【这里是重点，请着重理解】</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 剩下的括号要么在这一组新增的括号内部，要么在这一组新增括号的外部（右侧）。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 既然知道了 i&lt;n 的情况，那我们就可以对所有情况进行遍历：</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * "(" + 【i=p时所有括号的排列组合】 + ")" + 【i=q时所有括号的排列组合】</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 其中 p + q = n-1，且 p q 均为非负整数。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 事实上，当上述 p 从 0 取到 n-1，q 从 n-1 取到 0 后，所有情况就遍历完了。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 注：上述遍历是没有重复情况出现的，即当 (p1,q1)≠(p2,q2) 时，按上述方式取的括号组合一定不同。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 作者：yuyu-13</span></span><br><span class="line"><span class="comment">     * 链接：https://leetcode-cn.com/problems/generate-parentheses/solution/zui-jian-dan-yi-dong-de-dong-tai-gui-hua-bu-lun-da/</span></span><br><span class="line"><span class="comment">     * 来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment">     * 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 简单来说，在求N个括号的排列组合时，把第N种情况（也就是N个括号排列组合）视为单独拿一个括号E出来，</span></span><br><span class="line"><span class="comment">     * 剩下的N-1个括号分为两部分，P个括号和Q个括号，P+Q=N-1，然后这两部分分别处于括号E内和括号E的右边，</span></span><br><span class="line"><span class="comment">     * 各自进行括号的排列组合。由于我们是一步步计算得到N个括号的情况的，所以小于等于N-1个括号的排列组合方式我们是已知的（</span></span><br><span class="line"><span class="comment">     * 用合适的数据结构存储，方便后续调用，且在存储时可利用特定数据结构实现题目某些要求，如排序，去重等），</span></span><br><span class="line"><span class="comment">     * 且P+Q=N-1，P和Q是小于等于N-1的，所以我们能直接得到P个和Q个括号的情况，进而得到N个括号的结果！</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 楼主的算法思想很巧妙，赞一个~这个算法主要的基点就是将排列组合的情况分为了括号内和括号外这两种情况，</span></span><br><span class="line"><span class="comment">     * 且仅存在两种情况！至于为什么，原因在于楼主的算法的前提是单独拿出来的括号E的左边在N个括号所有排列组合情况中都是处于最左边，</span></span><br><span class="line"><span class="comment">     * 所以不存在括号位于括号E的左边的情况。因此，N-1个括号（拿出了括号E）仅可能分布于括号E内和括号E外，分为两种子情况讨论！</span></span><br><span class="line"><span class="comment">     * 这种思想还可以应用于其他类似的题的求解中，即怎样合理高效的利用前面步骤的计算结果得出当前步骤结果，从而得出最终结果。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;LinkedList&lt;String&gt;&gt; result = <span class="keyword">new</span> LinkedList&lt;LinkedList&lt;String&gt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> result.get(<span class="number">0</span>);</span><br><span class="line">        LinkedList&lt;String&gt; list0 = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        list0.add(<span class="string">""</span>);</span><br><span class="line">        result.add(list0);</span><br><span class="line">        LinkedList&lt;String&gt; list1 = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        list1.add(<span class="string">"()"</span>);</span><br><span class="line">        result.add(list1);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            LinkedList&lt;String&gt; temp = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                List&lt;String&gt; str1 = result.get(j);</span><br><span class="line">                List&lt;String&gt; str2 = result.get(i - <span class="number">1</span> - j);</span><br><span class="line">                <span class="keyword">for</span> (String s1 : str1) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (String s2 : str2) &#123;</span><br><span class="line">                        String el = <span class="string">"("</span> + s1 + <span class="string">")"</span> + s2;</span><br><span class="line">                        temp.add(el);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            result.add(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.get(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;21-Merge-Two-Sorted-Lists&quot;&gt;&lt;a href=&quot;#21-Merge-Two-Sorted-Lists&quot; class=&quot;headerlink&quot; title=&quot;21. Merge Two Sorted Lists&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/merge-two-sorted-lists/&quot;&gt;21. Merge Two Sorted Lists&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.&lt;/p&gt;
    
    </summary>
    
    
      <category term="algorithm" scheme="https://removeif.github.io/categories/algorithm/"/>
    
    
      <category term="链表" scheme="https://removeif.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="递归" scheme="https://removeif.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>中国共产党章程(2017修改)</title>
    <link href="https://removeif.github.io/law/%E4%B8%AD%E5%9B%BD%E5%85%B1%E4%BA%A7%E5%85%9A%E7%AB%A0%E7%A8%8B-2017%E4%BF%AE%E6%94%B9.html"/>
    <id>https://removeif.github.io/law/%E4%B8%AD%E5%9B%BD%E5%85%B1%E4%BA%A7%E5%85%9A%E7%AB%A0%E7%A8%8B-2017%E4%BF%AE%E6%94%B9.html</id>
    <published>2020-02-09T10:46:47.000Z</published>
    <updated>2020-02-09T10:54:24.846Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>基本信息</p></blockquote><p>效力级别    党内法规</p><p>时效性    现行有效</p><p>发布日期    2017-10-24 <a id="more"></a></p><p>实施日期    2017-10-24</p><p>发布机关    中共中央 </p><blockquote><p>正文</p></blockquote><h3 id="第一章-党员"><a href="#第一章-党员" class="headerlink" title="第一章　党员"></a>第一章　党员</h3><p><strong>第一条</strong></p><p>年满十八岁的中国工人、农民、军人、知识分子和其他社会阶层的先进分子，承认党的纲领和章程，愿意参加党的一个组织并在其中积极工作、执行党的决议和按期交纳党费的，可以申请加入中国共产党。</p><p><strong>第二条</strong></p><p>中国共产党党员是中国工人阶级的有共产主义觉悟的先锋战士。 中国共产党党员必须全心全意为人民服务，不惜牺牲个人的一切，为实现共产主义奋斗终身。 中国共产党党员永远是劳动人民的普通一员。除了法律和政策规定范围内的个人利益和工作职权以外，所有共产党员都不得谋求任何私利和特权。</p><p><strong>第三条</strong></p><p>党员必须履行下列义务： </p><ul><li>（一）认真学习马克思列宁主义、毛泽东思想、邓小平理论、“三个代表”重要思想、科学发展观、习近平新时代中国特色社会主义思想，学习党的路线、方针、政策和决议，学习党的基本知识，学习科学、文化、法律和业务知识，努力提高为人民服务的本领。 </li><li>（二）贯彻执行党的基本路线和各项方针、政策，带头参加改革开放和社会主义现代化建设，带动群众为经济发展和社会进步艰苦奋斗，在生产、工作、学习和社会生活中起先锋模范作用。 </li><li>（三）坚持党和人民的利益高于一切，个人利益服从党和人民的利益，吃苦在前，享受在后，克己奉公，多做贡献。 （四）自觉遵守党的纪律，首先是党的政治纪律和政治规矩，模范遵守国家的法律法规，严格保守党和国家的秘密，执行党的决定，服从组织分配，积极完成党的任务。</li><li>（五）维护党的团结和统一，对党忠诚老实，言行一致，坚决反对一切派别组织和小集团活动，反对阳奉阴违的两面派行为和一切阴谋诡计。 </li><li>（六）切实开展批评和自我批评，勇于揭露和纠正违反党的原则的言行和工作中的缺点、错误，坚决同消极腐败现象作斗争。 </li><li>（七）密切联系群众，向群众宣传党的主张，遇事同群众商量，及时向党反映群众的意见和要求，维护群众的正当利益。 </li><li>（八）发扬社会主义新风尚，带头实践社会主义核心价值观和社会主义荣辱观，提倡共产主义道德，弘扬中华民族传统美德，为了保护国家和人民的利益，在一切困难和危险的时刻挺身而出，英勇斗争，不怕牺牲。</li></ul><p><strong>第四条</strong></p><p>党员享有下列权利： </p><ul><li>（一）参加党的有关会议，阅读党的有关文件，接受党的教育和培训。 </li><li>（二）在党的会议上和党报党刊上，参加关于党的政策问题的讨论。 </li><li>（三）对党的工作提出建议和倡议。 </li><li>（四）在党的会议上有根据地批评党的任何组织和任何党员，向党负责地揭发、检举党的任何组织和任何党员违法乱纪的事实，要求处分违法乱纪的党员，要求罢免或撤换不称职的干部。 </li><li>（五）行使表决权、选举权，有被选举权。 </li><li>（六）在党组织讨论决定对党员的党纪处分或作出鉴定时，本人有权参加和进行申辩，其他党员可以为他作证和辩护。 </li><li>（七）对党的决议和政策如有不同意见，在坚决执行的前提下，可以声明保留，并且可以把自己的意见向党的上级组织直至中央提出。 </li><li>（八）向党的上级组织直至中央提出请求、申诉和控告，并要求有关组织给以负责的答复。 党的任何一级组织直至中央都无权剥夺党员的上述权利。</li></ul><p><strong>第五条</strong></p><p>发展党员，必须把政治标准放在首位，经过党的支部，坚持个别吸收的原则。 申请入党的人，要填写入党志愿书，要有两名正式党员作介绍人，要经过支部大会通过和上级党组织批准，并且经过预备期的考察，才能成为正式党员。 介绍人要认真了解申请人的思想、品质、经历和工作表现，向他解释党的纲领和党的章程，说明党员的条件、义务和权利，并向党组织作出负责的报告。 党的支部委员会对申请入党的人，要注意征求党内外有关群众的意见，进行严格的审查，认为合格后再提交支部大会讨论。 上级党组织在批准申请人入党以前，要派人同他谈话，作进一步的了解，并帮助他提高对党的认识。 在特殊情况下，党的中央和省、自治区、直辖市委员会可以直接接收党员。</p><p><strong>第六条</strong></p><p>预备党员必须面向党旗进行入党宣誓。誓词如下：我志愿加入中国共产党，拥护党的纲领，遵守党的章程，履行党员义务，执行党的决定，严守党的纪律，保守党的秘密，对党忠诚，积极工作，为共产主义奋斗终身，随时准备为党和人民牺牲一切，永不叛党。</p><p><strong>第七条</strong></p><p>预备党员的预备期为一年。党组织对预备党员应当认真教育和考察。 预备党员的义务同正式党员一样。预备党员的权利，除了没有表决权、选举权和被选举权以外，也同正式党员一样。 预备党员预备期满，党的支部应当及时讨论他能否转为正式党员。认真履行党员义务，具备党员条件的，应当按期转为正式党员；需要继续考察和教育的，可以延长预备期，但不能超过一年；不履行党员义务，不具备党员条件的，应当取消预备党员资格。预备党员转为正式党员，或延长预备期，或取消预备党员资格，都应当经支部大会讨论通过和上级党组织批准。 预备党员的预备期，从支部大会通过他为预备党员之日算起。党员的党龄，从预备期满转为正式党员之日算起。</p><p><strong>第八条</strong></p><p>每个党员，不论职务高低，都必须编入党的一个支部、小组或其他特定组织，参加党的组织生活，接受党内外群众的监督。党员领导干部还必须参加党委、党组的民主生活会。不允许有任何不参加党的组织生活、不接受党内外群众监督的特殊党员。</p><p><strong>第九条</strong></p><p>党员有退党的自由。党员要求退党，应当经支部大会讨论后宣布除名，并报上级党组织备案。 党员缺乏革命意志，不履行党员义务，不符合党员条件，党的支部应当对他进行教育，要求他限期改正；经教育仍无转变的，应当劝他退党。劝党员退党，应当经支部大会讨论决定，并报上级党组织批准。如被劝告退党的党员坚持不退，应当提交支部大会讨论，决定把他除名，并报上级党组织批准。 党员如果没有正当理由，连续六个月不参加党的组织生活，或不交纳党费，或不做党所分配的工作，就被认为是自行脱党。支部大会应当决定把这样的党员除名，并报上级党组织批准。</p><h3 id="第二章-党的组织制度"><a href="#第二章-党的组织制度" class="headerlink" title="第二章　党的组织制度"></a>第二章　党的组织制度</h3><p><strong>第十条</strong></p><p>党是根据自己的纲领和章程，按照民主集中制组织起来的统一整体。党的民主集中制的基本原则是： </p><ul><li>（一）党员个人服从党的组织，少数服从多数，下级组织服从上级组织，全党各个组织和全体党员服从党的全国代表大会和中央委员会。 </li><li>（二）党的各级领导机关，除它们派出的代表机关和在非党组织中的党组外，都由选举产生。 </li><li>（三）党的最高领导机关，是党的全国代表大会和它所产生的中央委员会。党的地方各级领导机关，是党的地方各级代表大会和它们所产生的委员会。党的各级委员会向同级的代表大会负责并报告工作。 </li><li>（四）党的上级组织要经常听取下级组织和党员群众的意见，及时解决他们提出的问题。党的下级组织既要向上级组织请示和报告工作，又要独立负责地解决自己职责范围内的问题。上下级组织之间要互通情报、互相支持和互相监督。党的各级组织要按规定实行党务公开，使党员对党内事务有更多的了解和参与。 </li><li>（五）党的各级委员会实行集体领导和个人分工负责相结合的制度。凡属重大问题都要按照集体领导、民主集中、个别酝酿、会议决定的原则，由党的委员会集体讨论，作出决定；委员会成员要根据集体的决定和分工，切实履行自己的职责。 </li><li>（六）党禁止任何形式的个人崇拜。要保证党的领导人的活动处于党和人民的监督之下，同时维护一切代表党和人民利益的领导人的威信。</li></ul><p><strong>第十一条</strong></p><p>党的各级代表大会的代表和委员会的产生，要体现选举人的意志。选举采用无记名投票的方式。候选人名单要由党组织和选举人充分酝酿讨论。可以直接采用候选人数多于应选人数的差额选举办法进行正式选举。也可以先采用差额选举办法进行预选，产生候选人名单，然后进行正式选举。选举人有了解候选人情况、要求改变候选人、不选任何一个候选人和另选他人的权利。任何组织和个人不得以任何方式强迫选举人选举或不选举某个人。 党的地方各级代表大会和基层代表大会的选举，如果发生违反党章的情况，上一级党的委员会在调查核实后，应作出选举无效和采取相应措施的决定，并报再上一级党的委员会审查批准，正式宣布执行。 党的各级代表大会代表实行任期制。</p><p><strong>第十二条</strong></p><p>党的中央和地方各级委员会在必要时召集代表会议，讨论和决定需要及时解决的重大问题。代表会议代表的名额和产生办法，由召集代表会议的委员会决定。</p><p><strong>第十三条</strong></p><p>凡是成立党的新组织，或是撤销党的原有组织，必须由上级党组织决定。 在党的地方各级代表大会和基层代表大会闭会期间，上级党的组织认为有必要时，可以调动或者指派下级党组织的负责人。 党的中央和地方各级委员会可以派出代表机关。</p><p><strong>第十四条</strong></p><p>党的中央和省、自治区、直辖市委员会实行巡视制度，在一届任期内，对所管理的地方、部门、企事业单位党组织实现巡视全覆盖。 中央有关部委和国家机关部门党组（党委）根据工作需要，开展巡视工作。 党的市（地、州、盟）和县（市、区、旗）委员会建立巡察制度。</p><p><strong>第十五条</strong></p><p>党的各级领导机关，对同下级组织有关的重要问题作出决定时，在通常情况下，要征求下级组织的意见。要保证下级组织能够正常行使他们的职权。凡属应由下级组织处理的问题，如无特殊情况，上级领导机关不要干预。</p><p><strong>第十六条</strong></p><p>有关全国性的重大政策问题，只有党中央有权作出决定，各部门、各地方的党组织可以向中央提出建议，但不得擅自作出决定和对外发表主张。 党的下级组织必须坚决执行上级组织的决定。下级组织如果认为上级组织的决定不符合本地区、本部门的实际情况，可以请求改变；如果上级组织坚持原决定，下级组织必须执行，并不得公开发表不同意见，但有权向再上一级组织报告。 党的各级组织的报刊和其他宣传工具，必须宣传党的路线、方针、政策和决议。</p><p><strong>第十七条</strong></p><p>党组织讨论决定问题，必须执行少数服从多数的原则。决定重要问题，要进行表决。对于少数人的不同意见，应当认真考虑。如对重要问题发生争论，双方人数接近，除了在紧急情况下必须按多数意见执行外，应当暂缓作出决定，进一步调查研究，交换意见，下次再表决；在特殊情况下，也可将争论情况向上级组织报告，请求裁决。 党员个人代表党组织发表重要主张，如果超出党组织已有决定的范围，必须提交所在的党组织讨论决定，或向上级党组织请示。任何党员不论职务高低，都不能个人决定重大问题；如遇紧急情况，必须由个人作出决定时，事后要迅速向党组织报告。不允许任何领导人实行个人专断和把个人凌驾于组织之上。</p><p><strong>第十八条</strong></p><p>党的中央、地方和基层组织，都必须重视党的建设，经常讨论和检查党的宣传工作、教育工作、组织工作、纪律检查工作、群众工作、统一战线工作等，注意研究党内外的思想政治状况。</p><h3 id="第三章-党的中央组织"><a href="#第三章-党的中央组织" class="headerlink" title="第三章　党的中央组织"></a>第三章　党的中央组织</h3><p><strong>第十九条</strong></p><p>党的全国代表大会每五年举行一次，由中央委员会召集。中央委员会认为有必要，或者有三分之一以上的省一级组织提出要求，全国代表大会可以提前举行；如无非常情况，不得延期举行。 全国代表大会代表的名额和选举办法，由中央委员会决定。</p><p><strong>第二十条</strong></p><p>党的全国代表大会的职权是： </p><ul><li>（一）听取和审查中央委员会的报告； </li><li>（二）审查中央纪律检查委员会的报告； </li><li>（三）讨论并决定党的重大问题； </li><li>（四）修改党的章程； </li><li>（五）选举中央委员会； </li><li>（六）选举中央纪律检查委员会。</li></ul><p><strong>第二十一条</strong></p><p>党的全国代表会议的职权是：讨论和决定重大问题；调整和增选中央委员会、中央纪律检查委员会的部分成员。调整和增选中央委员及候补中央委员的数额，不得超过党的全国代表大会选出的中央委员及候补中央委员各自总数的五分之一。</p><p><strong>第二十二条</strong></p><p>党的中央委员会每届任期五年。全国代表大会如提前或延期举行，它的任期相应地改变。中央委员会委员和候补委员必须有五年以上的党龄。中央委员会委员和候补委员的名额，由全国代表大会决定。中央委员会委员出缺，由中央委员会候补委员按照得票多少依次递补。 中央委员会全体会议由中央政治局召集，每年至少举行一次。中央政治局向中央委员会全体会议报告工作，接受监督。 在全国代表大会闭会期间，中央委员会执行全国代表大会的决议，领导党的全部工作，对外代表中国共产党。</p><p><strong>第二十三条</strong></p><p>党的中央政治局、中央政治局常务委员会和中央委员会总书记，由中央委员会全体会议选举。中央委员会总书记必须从中央政治局常务委员会委员中产生。 中央政治局和它的常务委员会在中央委员会全体会议闭会期间，行使中央委员会的职权。 中央书记处是中央政治局和它的常务委员会的办事机构；成员由中央政治局常务委员会提名，中央委员会全体会议通过。 中央委员会总书记负责召集中央政治局会议和中央政治局常务委员会会议，并主持中央书记处的工作。 党的中央军事委员会组成人员由中央委员会决定，中央军事委员会实行主席负责制。 每届中央委员会产生的中央领导机构和中央领导人，在下届全国代表大会开会期间，继续主持党的经常工作，直到下届中央委员会产生新的中央领导机构和中央领导人为止。</p><p><strong>第二十四条</strong></p><p>中国人民解放军的党组织，根据中央委员会的指示进行工作。中央军事委员会负责军队中党的工作和政治工作，对军队中党的组织体制和机构作出规定。</p><h3 id="第四章-党的地方组织"><a href="#第四章-党的地方组织" class="headerlink" title="第四章　党的地方组织"></a>第四章　党的地方组织</h3><p><strong>第二十五条</strong></p><p>党的省、自治区、直辖市的代表大会，设区的市和自治州的代表大会，县（旗）、自治县、不设区的市和市辖区的代表大会，每五年举行一次。 党的地方各级代表大会由同级党的委员会召集。在特殊情况下，经上一级委员会批准，可以提前或延期举行。 党的地方各级代表大会代表的名额和选举办法，由同级党的委员会决定，并报上一级党的委员会批准。</p><p><strong>第二十六条</strong></p><p>党的地方各级代表大会的职权是： </p><ul><li>（一）听取和审查同级委员会的报告； </li><li>（二）审查同级纪律检查委员会的报告； </li><li>（三）讨论本地区范围内的重大问题并作出决议； </li><li>（四）选举同级党的委员会，选举同级党的纪律检查委员会。</li></ul><p><strong>第二十七条</strong></p><p>党的省、自治区、直辖市、设区的市和自治州的委员会，每届任期五年。这些委员会的委员和候补委员必须有五年以上的党龄。 党的县（旗）、自治县、不设区的市和市辖区的委员会，每届任期五年。这些委员会的委员和候补委员必须有三年以上的党龄。 党的地方各级代表大会如提前或延期举行，由它选举的委员会的任期相应地改变。 党的地方各级委员会的委员和候补委员的名额，分别由上一级委员会决定。党的地方各级委员会委员出缺，由候补委员按照得票多少依次递补。 党的地方各级委员会全体会议，每年至少召开两次。 党的地方各级委员会在代表大会闭会期间，执行上级党组织的指示和同级党代表大会的决议，领导本地方的工作，定期向上级党的委员会报告工作。</p><p><strong>第二十八条</strong></p><p>党的地方各级委员会全体会议，选举常务委员会和书记、副书记，并报上级党的委员会批准。党的地方各级委员会的常务委员会，在委员会全体会议闭会期间，行使委员会职权；在下届代表大会开会期间，继续主持经常工作，直到新的常务委员会产生为止。 党的地方各级委员会的常务委员会定期向委员会全体会议报告工作，接受监督。</p><p><strong>第二十九条</strong></p><p>党的地区委员会和相当于地区委员会的组织，是党的省、自治区委员会在几个县、自治县、市范围内派出的代表机关。它根据省、自治区委员会的授权，领导本地区的工作。</p><h3 id="第五章-党的基层组织"><a href="#第五章-党的基层组织" class="headerlink" title="第五章　党的基层组织"></a>第五章　党的基层组织</h3><p><strong>第三十条</strong></p><p>企业、农村、机关、学校、科研院所、街道社区、社会组织、人民解放军连队和其他基层单位，凡是有正式党员三人以上的，都应当成立党的基层组织。 党的基层组织，根据工作需要和党员人数，经上级党组织批准，分别设立党的基层委员会、总支部委员会、支部委员会。基层委员会由党员大会或代表大会选举产生，总支部委员会和支部委员会由党员大会选举产生，提出委员候选人要广泛征求党员和群众的意见。</p><p><strong>第三十一条</strong></p><p>党的基层委员会、总支部委员会、支部委员会每届任期三年至五年。基层委员会、总支部委员会、支部委员会的书记、副书记选举产生后，应报上级党组织批准。</p><p><strong>第三十二条</strong></p><p>党的基层组织是党在社会基层组织中的战斗堡垒，是党的全部工作和战斗力的基础。它的基本任务是： </p><ul><li>（一）宣传和执行党的路线、方针、政策，宣传和执行党中央、上级组织和本组织的决议，充分发挥党员的先锋模范作用，积极创先争优，团结、组织党内外的干部和群众，努力完成本单位所担负的任务。 </li><li>（二）组织党员认真学习马克思列宁主义、毛泽东思想、邓小平理论、“三个代表”重要思想、科学发展观、习近平新时代中国特色社会主义思想，推进“两学一做”学习教育常态化制度化，学习党的路线、方针、政策和决议，学习党的基本知识，学习科学、文化、法律和业务知识。 </li><li>（三）对党员进行教育、管理、监督和服务，提高党员素质，坚定理想信念，增强党性，严格党的组织生活，开展批评和自我批评，维护和执行党的纪律，监督党员切实履行义务，保障党员的权利不受侵犯。加强和改进流动党员管理。 </li><li>（四）密切联系群众，经常了解群众对党员、党的工作的批评和意见，维护群众的正当权利和利益，做好群众的思想政治工作。 </li><li>（五）充分发挥党员和群众的积极性创造性，发现、培养和推荐他们中间的优秀人才，鼓励和支持他们在改革开放和社会主义现代化建设中贡献自己的聪明才智。 </li><li>（六）对要求入党的积极分子进行教育和培养，做好经常性的发展党员工作，重视在生产、工作第一线和青年中发展党员。 </li><li>（七）监督党员干部和其他任何工作人员严格遵守国家法律法规，严格遵守国家的财政经济法规和人事制度，不得侵占国家、集体和群众的利益。 </li><li>（八）教育党员和群众自觉抵制不良倾向，坚决同各种违纪违法行为作斗争。</li></ul><p><strong>第三十三条</strong></p><p>街道、乡、镇党的基层委员会和村、社区党组织，领导本地区的工作和基层社会治理，支持和保证行政组织、经济组织和群众自治组织充分行使职权。 国有企业党委（党组）发挥领导作用，把方向、管大局、保落实，依照规定讨论和决定企业重大事项。国有企业和集体企业中党的基层组织，围绕企业生产经营开展工作。保证监督党和国家的方针、政策在本企业的贯彻执行；支持股东会、董事会、监事会和经理（厂长）依法行使职权；全心全意依靠职工群众，支持职工代表大会开展工作；参与企业重大问题的决策；加强党组织的自身建设，领导思想政治工作、精神文明建设和工会、共青团等群团组织。 非公有制经济组织中党的基层组织，贯彻党的方针政策，引导和监督企业遵守国家的法律法规，领导工会、共青团等群团组织，团结凝聚职工群众，维护各方的合法权益，促进企业健康发展。 社会组织中党的基层组织，宣传和执行党的路线、方针、政策，领导工会、共青团等群团组织，教育管理党员，引领服务群众，推动事业发展。 实行行政领导人负责制的事业单位中党的基层组织，发挥战斗堡垒作用。实行党委领导下的行政领导人负责制的事业单位中党的基层组织，对重大问题进行讨论和作出决定，同时保证行政领导人充分行使自己的职权。 各级党和国家机关中党的基层组织，协助行政负责人完成任务，改进工作，对包括行政负责人在内的每个党员进行教育、管理、监督，不领导本单位的业务工作。</p><p><strong>第三十四条</strong></p><p>党支部是党的基础组织，担负直接教育党员、管理党员、监督党员和组织群众、宣传群众、凝聚群众、服务群众的职责。</p><h3 id="第六章-党的干部"><a href="#第六章-党的干部" class="headerlink" title="第六章　党的干部"></a>第六章　党的干部</h3><p><strong>第三十五条</strong></p><p>党的干部是党的事业的骨干，是人民的公仆，要做到忠诚干净担当。党按照德才兼备、以德为先的原则选拔干部，坚持五湖四海、任人唯贤，坚持事业为上、公道正派，反对任人唯亲，努力实现干部队伍的革命化、年轻化、知识化、专业化。 党重视教育、培训、选拔、考核和监督干部，特别是培养、选拔优秀年轻干部。积极推进干部制度改革。 党重视培养、选拔女干部和少数民族干部。</p><p><strong>第三十六条</strong></p><p>党的各级领导干部必须信念坚定、为民服务、勤政务实、敢于担当、清正廉洁，模范地履行本章程第三条所规定的党员的各项义务，并且必须具备以下的基本条件： </p><ul><li>（一）具有履行职责所需要的马克思列宁主义、毛泽东思想、邓小平理论、“三个代表”重要思想、科学发展观的水平，带头贯彻落实习近平新时代中国特色社会主义思想，努力用马克思主义的立场、观点、方法分析和解决实际问题，坚持讲学习、讲政治、讲正气，经得起各种风浪的考验。 </li><li>（二）具有共产主义远大理想和中国特色社会主义坚定信念，坚决执行党的基本路线和各项方针、政策，立志改革开放，献身现代化事业，在社会主义建设中艰苦创业，树立正确政绩观，做出经得起实践、人民、历史检验的实绩。 </li><li>（三）坚持解放思想，实事求是，与时俱进，开拓创新，认真调查研究，能够把党的方针、政策同本地区、本部门的实际相结合，卓有成效地开展工作，讲实话，办实事，求实效。 </li><li>（四）有强烈的革命事业心和政治责任感，有实践经验，有胜任领导工作的组织能力、文化水平和专业知识。 </li><li>（五）正确行使人民赋予的权力，坚持原则，依法办事，清正廉洁，勤政为民，以身作则，艰苦朴素，密切联系群众，坚持党的群众路线，自觉地接受党和群众的批评和监督，加强道德修养，讲党性、重品行、作表率，做到自重、自省、自警、自励，反对形式主义、官僚主义、享乐主义和奢靡之风，反对任何滥用职权、谋求私利的行为。 </li><li>（六）坚持和维护党的民主集中制，有民主作风，有全局观念，善于团结同志，包括团结同自己有不同意见的同志一道工作。</li></ul><p><strong>第三十七条</strong></p><p>党员干部要善于同党外干部合作共事，尊重他们，虚心学习他们的长处。 党的各级组织要善于发现和推荐有真才实学的党外干部担任领导工作，保证他们有职有权，充分发挥他们的作用。</p><p><strong>第三十八条</strong></p><p>党的各级领导干部，无论是由民主选举产生的，或是由领导机关任命的，他们的职务都不是终身的，都可以变动或解除。 年龄和健康状况不适宜于继续担任工作的干部，应当按照国家的规定退、离休。</p><h3 id="第七章-党的纪律"><a href="#第七章-党的纪律" class="headerlink" title="第七章　党的纪律"></a>第七章　党的纪律</h3><p><strong>第三十九条</strong></p><p>党的纪律是党的各级组织和全体党员必须遵守的行为规则，是维护党的团结统一、完成党的任务的保证。党组织必须严格执行和维护党的纪律，共产党员必须自觉接受党的纪律的约束。</p><p><strong>第四十条</strong></p><p>党的纪律主要包括政治纪律、组织纪律、廉洁纪律、群众纪律、工作纪律、生活纪律。 坚持惩前毖后、治病救人，执纪必严、违纪必究，抓早抓小、防微杜渐，按照错误性质和情节轻重，给以批评教育直至纪律处分。运用监督执纪“四种形态”，让“红红脸、出出汗”成为常态，党纪处分、组织调整成为管党治党的重要手段，严重违纪、严重触犯刑律的党员必须开除党籍。 党内严格禁止用违反党章和国家法律的手段对待党员，严格禁止打击报复和诬告陷害。违反这些规定的组织或个人必须受到党的纪律和国家法律的追究。</p><p><strong>第四十一条</strong></p><p>对党员的纪律处分有五种：警告、严重警告、撤销党内职务、留党察看、开除党籍。 留党察看最长不超过两年。党员在留党察看期间没有表决权、选举权和被选举权。党员经过留党察看，确已改正错误的，应当恢复其党员的权利；坚持错误不改的，应当开除党籍。 开除党籍是党内的最高处分。各级党组织在决定或批准开除党员党籍的时候，应当全面研究有关的材料和意见，采取十分慎重的态度。</p><p><strong>第四十二条</strong></p><p>对党员的纪律处分，必须经过支部大会讨论决定，报党的基层委员会批准；如果涉及的问题比较重要或复杂，或给党员以开除党籍的处分，应分别不同情况，报县级或县级以上党的纪律检查委员会审查批准。在特殊情况下，县级和县级以上各级党的委员会和纪律检查委员会有权直接决定给党员以纪律处分。 对党的中央委员会委员、候补委员，给以警告、严重警告处分，由中央纪律检查委员会常务委员会审议后，报党中央批准。对地方各级党的委员会委员、候补委员，给以警告、严重警告处分，应由上一级纪律检查委员会批准，并报它的同级党的委员会备案。 对党的中央委员会和地方各级委员会的委员、候补委员，给以撤销党内职务、留党察看或开除党籍的处分，必须由本人所在的委员会全体会议三分之二以上的多数决定。在全体会议闭会期间，可以先由中央政治局和地方各级委员会常务委员会作出处理决定，待召开委员会全体会议时予以追认。对地方各级委员会委员和候补委员的上述处分，必须经过上级纪律检查委员会常务委员会审议，由这一级纪律检查委员会报同级党的委员会批准。 严重触犯刑律的中央委员会委员、候补委员，由中央政治局决定开除其党籍；严重触犯刑律的地方各级委员会委员、候补委员，由同级委员会常务委员会决定开除其党籍。</p><p><strong>第四十三条</strong></p><p>党组织对党员作出处分决定，应当实事求是地查清事实。处分决定所依据的事实材料和处分决定必须同本人见面，听取本人说明情况和申辩。如果本人对处分决定不服，可以提出申诉，有关党组织必须负责处理或者迅速转递，不得扣压。对于确属坚持错误意见和无理要求的人，要给以批评教育。</p><p><strong>第四十四条</strong></p><p>党组织如果在维护党的纪律方面失职，必须问责。 对于严重违犯党的纪律、本身又不能纠正的党组织，上一级党的委员会在查明核实后，应根据情节严重的程度，作出进行改组或予以解散的决定，并报再上一级党的委员会审查批准，正式宣布执行。</p><h3 id="第八章-党的纪律检查机关"><a href="#第八章-党的纪律检查机关" class="headerlink" title="第八章　党的纪律检查机关"></a>第八章　党的纪律检查机关</h3><p><strong>第四十五条</strong></p><p>党的中央纪律检查委员会在党的中央委员会领导下进行工作。党的地方各级纪律检查委员会和基层纪律检查委员会在同级党的委员会和上级纪律检查委员会双重领导下进行工作。上级党的纪律检查委员会加强对下级纪律检查委员会的领导。 党的各级纪律检查委员会每届任期和同级党的委员会相同。 党的中央纪律检查委员会全体会议，选举常务委员会和书记、副书记，并报党的中央委员会批准。党的地方各级纪律检查委员会全体会议，选举常务委员会和书记、副书记，并由同级党的委员会通过，报上级党的委员会批准。党的基层委员会是设立纪律检查委员会，还是设立纪律检查委员，由它的上一级党组织根据具体情况决定。党的总支部委员会和支部委员会设纪律检查委员。 党的中央和地方纪律检查委员会向同级党和国家机关全面派驻党的纪律检查组。纪律检查组组长参加驻在部门党的领导组织的有关会议。他们的工作必须受到该机关党的领导组织的支持。</p><p><strong>第四十六条</strong></p><p>党的各级纪律检查委员会是党内监督专责机关，主要任务是：维护党的章程和其他党内法规，检查党的路线、方针、政策和决议的执行情况，协助党的委员会推进全面从严治党、加强党风建设和组织协调反腐败工作。 党的各级纪律检查委员会的职责是监督、执纪、问责，要经常对党员进行遵守纪律的教育，作出关于维护党纪的决定；对党的组织和党员领导干部履行职责、行使权力进行监督，受理处置党员群众检举举报，开展谈话提醒、约谈函询；检查和处理党的组织和党员违反党的章程和其他党内法规的比较重要或复杂的案件，决定或取消对这些案件中的党员的处分；进行问责或提出责任追究的建议；受理党员的控告和申诉；保障党员的权利。 各级纪律检查委员会要把处理特别重要或复杂的案件中的问题和处理的结果，向同级党的委员会报告。党的地方各级纪律检查委员会和基层纪律检查委员会要同时向上级纪律检查委员会报告。 各级纪律检查委员会发现同级党的委员会委员有违犯党的纪律的行为，可以先进行初步核实，如果需要立案检查的，应当在向同级党的委员会报告的同时向上一级纪律检查委员会报告；涉及常务委员的，报告上一级纪律检查委员会，由上一级纪律检查委员会进行初步核实，需要审查的，由上一级纪律检查委员会报它的同级党的委员会批准。</p><p><strong>第四十七条</strong></p><p>上级纪律检查委员会有权检查下级纪律检查委员会的工作，并且有权批准和改变下级纪律检查委员会对于案件所作的决定。如果所要改变的该下级纪律检查委员会的决定，已经得到它的同级党的委员会的批准，这种改变必须经过它的上一级党的委员会批准。 党的地方各级纪律检查委员会和基层纪律检查委员会如果对同级党的委员会处理案件的决定有不同意见，可以请求上一级纪律检查委员会予以复查；如果发现同级党的委员会或它的成员有违犯党的纪律的情况，在同级党的委员会不给予解决或不给予正确解决的时候，有权向上级纪律检查委员会提出申诉，请求协助处理。</p><h3 id="第九章-党组"><a href="#第九章-党组" class="headerlink" title="第九章　党组"></a>第九章　党组</h3><p><strong>第四十八条</strong></p><p>在中央和地方国家机关、人民团体、经济组织、文化组织和其他非党组织的领导机关中，可以成立党组。党组发挥领导核心作用。党组的任务，主要是负责贯彻执行党的路线、方针、政策；加强对本单位党的建设的领导，履行全面从严治党责任；讨论和决定本单位的重大问题；做好干部管理工作；讨论和决定基层党组织设置调整和发展党员、处分党员等重要事项；团结党外干部和群众，完成党和国家交给的任务；领导机关和直属单位党组织的工作。</p><p><strong>第四十九条</strong></p><p>党组的成员，由批准成立党组的党组织决定。党组设书记，必要时还可以设副书记。 党组必须服从批准它成立的党组织领导。</p><p><strong>第五十条</strong></p><p>对下属单位实行集中统一领导的国家工作部门可以建立党委，党委的产生办法、职权和工作任务，由中央另行规定。</p><h3 id="第十章-党和共产主义青年团的关系"><a href="#第十章-党和共产主义青年团的关系" class="headerlink" title="第十章　党和共产主义青年团的关系"></a>第十章　党和共产主义青年团的关系</h3><p><strong>第五十一条</strong></p><p>中国共产主义青年团是中国共产党领导的先进青年的群团组织，是广大青年在实践中学习中国特色社会主义和共产主义的学校，是党的助手和后备军。共青团中央委员会受党中央委员会领导。共青团的地方各级组织受同级党的委员会领导，同时受共青团上级组织领导。</p><p><strong>第五十二条</strong></p><p>党的各级委员会要加强对共青团的领导，注意团的干部的选拔和培训。党要坚决支持共青团根据广大青年的特点和需要，生动活泼地、富于创造性地进行工作，充分发挥团的突击队作用和联系广大青年的桥梁作用。 团的县级和县级以下各级委员会书记，企业事业单位的团委员会书记，是党员的，可以列席同级党的委员会和常务委员会的会议。</p><h3 id="第十一章-党徽党旗"><a href="#第十一章-党徽党旗" class="headerlink" title="第十一章　党徽党旗"></a>第十一章　党徽党旗</h3><p><strong>第五十三条</strong></p><p>中国共产党党徽为镰刀和锤头组成的图案。</p><p><strong>第五十四条</strong></p><p>中国共产党党旗为旗面缀有金黄色党徽图案的红旗。</p><p><strong>第五十五条</strong></p><p>中国共产党的党徽党旗是中国共产党的象征和标志。党的各级组织和每一个党员都要维护党徽党旗的尊严。要按照规定制作和使用党徽党旗。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;基本信息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;效力级别    党内法规&lt;/p&gt;
&lt;p&gt;时效性    现行有效&lt;/p&gt;
&lt;p&gt;发布日期    2017-10-24
    
    </summary>
    
    
      <category term="法律" scheme="https://removeif.github.io/categories/%E6%B3%95%E5%BE%8B/"/>
    
    
      <category term="法律" scheme="https://removeif.github.io/tags/%E6%B3%95%E5%BE%8B/"/>
    
      <category term="党章" scheme="https://removeif.github.io/tags/%E5%85%9A%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>秒杀系统如何支撑百万QPS</title>
    <link href="https://removeif.github.io/design-architecture/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E5%A6%82%E4%BD%95%E6%94%AF%E6%92%91%E7%99%BE%E4%B8%87QPS.html"/>
    <id>https://removeif.github.io/design-architecture/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E5%A6%82%E4%BD%95%E6%94%AF%E6%92%91%E7%99%BE%E4%B8%87QPS.html</id>
    <published>2020-02-05T10:00:44.000Z</published>
    <updated>2020-02-08T09:28:57.272Z</updated>
    
    <content type="html"><![CDATA[<h3 id="12306抢票-极限并发带来的思考"><a href="#12306抢票-极限并发带来的思考" class="headerlink" title="12306抢票,极限并发带来的思考?"></a>12306抢票,极限并发带来的思考?</h3><p>每到节假日期间,一二线城市返乡、外出游玩的人们几乎都面临着一个问题：抢火车票!虽然现在大多数情况下都能订到票,但是放票瞬间即无票的场景，相信大家都深有体会。尤其是春节期间，大家不仅使用12306，还会考虑“智行”和其他的抢票软件,全国上下几亿人在这段时间都在抢票。 <a id="more"></a><br>“12306服务”承受着这个世界上任何秒杀系统都无法超越的QPS,上百万的并发再正常不过了！笔者专门研究了一下“12306”的服务端架构,学习到了其系统设计上很多亮点，在这里和大家分享一下并模拟一个例子：如何在100万人同时抢1万张火车票时，系统提供正常、稳定的服务。<a href="https://github.com/GuoZhaoran/spikeSystem">github代码地址</a></p><h3 id="1-大型高并发系统架构"><a href="#1-大型高并发系统架构" class="headerlink" title="1. 大型高并发系统架构"></a>1. 大型高并发系统架构</h3><p>高并发的系统架构都会采用分布式集群部署，服务上层有着层层负载均衡，并提供各种容灾手段(双火机房、节点容错、服务器灾备等)保证系统的高可用,流量也会根据不同的负载能力和配置策略均衡到不同的服务器上。下边是一个简单的示意图:</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200205172312.png" alt=""></p><h4 id="1-1-负载均衡简介"><a href="#1-1-负载均衡简介" class="headerlink" title="1.1 负载均衡简介"></a>1.1 负载均衡简介</h4><p>上图中描述了用户请求到服务器经历了三层的负载均衡，下边分别简单介绍一下这三种负载均衡：</p><ul><li>OSPF(开放式最短链路优先)是一个内部网关协议(Interior Gateway Protocol,简称IGP)。OSPF通过路由器之间通告网络接口的状态来建立链路状态数据库，生成最短路径树，OSPF会自动计算路由接口上的Cost值，但也可以通过手工指定该接口的Cost值，手工指定的优先于自动计算的值。OSPF计算的Cost，同样是和接口带宽成反比，带宽越高，Cost值越小。到达目标相同Cost值的路径，可以执行负载均衡，最多6条链路同时执行负载均衡。</li><li>LVS (Linux VirtualServer)，它是一种集群(Cluster)技术，采用IP负载均衡技术和基于内容请求分发技术。调度器具有很好的吞吐率，将请求均衡地转移到不同的服务器上执行，且调度器自动屏蔽掉服务器的故障，从而将一组服务器构成一个高性能的、高可用的虚拟服务器。</li><li>Nginx想必大家都很熟悉了,是一款非常高性能的http代理/反向代理服务器,服务开发中也经常使用它来做负载均衡。Nginx实现负载均衡的方式主要有三种:轮询、加权轮询、ip hash轮询，下面我们就针对Nginx的加权轮询做专门的配置和测试</li></ul><h4 id="1-2-Nginx加权轮询的演示"><a href="#1-2-Nginx加权轮询的演示" class="headerlink" title="1.2 Nginx加权轮询的演示"></a>1.2 Nginx加权轮询的演示</h4><p>Nginx实现负载均衡通过upstream模块实现，其中加权轮询的配置是可以给相关的服务加上一个权重值，配置的时候可能根据服务器的性能、负载能力设置相应的负载。下面是一个加权轮询负载的配置，我将在本地的监听3001-3004端口,分别配置1，2，3，4的权重:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置负载均衡</span></span><br><span class="line">    upstream load_rule &#123;</span><br><span class="line">       server 127.0.0.1:3001 weight=1;</span><br><span class="line">       server 127.0.0.1:3002 weight=2;</span><br><span class="line">       server 127.0.0.1:3003 weight=3;</span><br><span class="line">       server 127.0.0.1:3004 weight=4;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  load_balance.com www.load_balance.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">       proxy_pass http://load_rule;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我在本地/etc/hosts目录下配置了 <a href="http://www.load_balance.com">www.load_balance.com</a> 的虚拟域名地址，接下来使用Go语言开启四个http端口监听服务，下面是监听在3001端口的Go程序,其他几个只需要修改端口即可：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">"/buy/ticket"</span>, handleReq)</span><br><span class="line">http.ListenAndServe(<span class="string">":3001"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理请求函数,根据请求将响应结果信息写入日志</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleReq</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">failedMsg :=  <span class="string">"handle in port:"</span></span><br><span class="line">writeLog(failedMsg, <span class="string">"./stat.log"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写入日志</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeLog</span><span class="params">(msg <span class="keyword">string</span>, logPath <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">fd, _ := os.OpenFile(logPath, os.O_RDWR|os.O_CREATE|os.O_APPEND, <span class="number">0644</span>)</span><br><span class="line"><span class="keyword">defer</span> fd.Close()</span><br><span class="line">content := strings.Join([]<span class="keyword">string</span>&#123;msg, <span class="string">"\r\n"</span>&#125;, <span class="string">"3001"</span>)</span><br><span class="line">buf := []<span class="keyword">byte</span>(content)</span><br><span class="line">fd.Write(buf)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我将请求的端口日志信息写到了./stat.log文件当中，然后使用ab压测工具做压测:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ab -n 1000 -c 100 http://www.load_balance.com/buy/ticket</span><br></pre></td></tr></table></figure><p>统计日志中的结果，3001-3004端口分别得到了100、200、300、400的请求量，这和我在nginx中配置的权重占比很好的吻合在了一起，并且负载后的流量非常的均匀、随机。具体的实现大家可以参考nginx的upsteam模块实现源码，这里推荐一篇文章：<a href="https://www.kancloud.cn/digest/understandingnginx/202607">Nginx 中 upstream 机制的负载均衡</a></p><h3 id="2-秒杀抢购系统选型"><a href="#2-秒杀抢购系统选型" class="headerlink" title="2.秒杀抢购系统选型"></a>2.秒杀抢购系统选型</h3><p>回到我们最初提到的问题中来：火车票秒杀系统如何在高并发情况下提供正常、稳定的服务呢？</p><p>从上面的介绍我们知道用户秒杀流量通过层层的负载均衡，均匀到了不同的服务器上，即使如此，集群中的单机所承受的QPS也是非常高的。如何将单机性能优化到极致呢？要解决这个问题，我们就要想明白一件事： 通常订票系统要处理生成订单、减扣库存、用户支付这三个基本的阶段，我们系统要做的事情是要保证火车票订单<strong>不超卖、不少卖</strong>，每张售卖的车票都必须支付才有效，还要保证系统承受极高的并发。这三个阶段的先后顺序改怎么分配才更加合理呢?我们来分析一下：</p><h4 id="2-1-下单减库存"><a href="#2-1-下单减库存" class="headerlink" title="2.1 下单减库存"></a>2.1 下单减库存</h4><p>当用户并发请求到达服务端时，首先创建订单，然后扣除库存，等待用户支付。这种顺序是我们一般人首先会想到的解决方案，这种情况下也能保证订单不会超卖，因为创建订单之后就会减库存，这是一个原子操作。但是这样也会产生一些问题，第一就是在极限并发情况下，任何一个内存操作的细节都至关影响性能，尤其像创建订单这种逻辑，一般都需要存储到磁盘数据库的，对数据库的压力是可想而知的；第二是如果用户存在恶意下单的情况，只下单不支付这样库存就会变少，会少卖很多订单，虽然服务端可以限制IP和用户的购买订单数量，这也不算是一个好方法。</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200205173057.png" alt=""></p><h4 id="2-2-支付减库存"><a href="#2-2-支付减库存" class="headerlink" title="2.2 支付减库存"></a>2.2 支付减库存</h4><p>如果等待用户支付了订单在减库存，第一感觉就是不会少卖。但是这是并发架构的大忌，因为在极限并发情况下，用户可能会创建很多订单，当库存减为零的时候很多用户发现抢到的订单支付不了了，这也就是所谓的“超卖”。也不能避免并发操作数据库磁盘IO</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200205173152.png" alt=""></p><h4 id="2-3-预扣库存"><a href="#2-3-预扣库存" class="headerlink" title="2.3 预扣库存"></a>2.3 预扣库存</h4><p>从上边两种方案的考虑，我们可以得出结论：只要创建订单，就要频繁操作数据库IO。那么有没有一种不需要直接操作数据库IO的方案呢，这就是预扣库存。先扣除了库存，保证不超卖，然后异步生成用户订单，这样响应给用户的速度就会快很多；那么怎么保证不少卖呢？用户拿到了订单，不支付怎么办？我们都知道现在订单都有有效期，比如说用户五分钟内不支付，订单就失效了，订单一旦失效，就会加入新的库存，这也是现在很多网上零售企业保证商品不少卖采用的方案。订单的生成是异步的,一般都会放到MQ、kafka这样的即时消费队列中处理,订单量比较少的情况下，生成订单非常快，用户几乎不用排队。</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200205173416.png" alt=""></p><h3 id="3-扣库存的艺术"><a href="#3-扣库存的艺术" class="headerlink" title="3. 扣库存的艺术"></a>3. 扣库存的艺术</h3><p>从上面的分析可知，显然预扣库存的方案最合理。我们进一步分析扣库存的细节，这里还有很大的优化空间，库存存在哪里？怎样保证高并发下，正确的扣库存，还能快速的响应用户请求？</p><p>在单机低并发情况下，我们实现扣库存通常是这样的:</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200205173602.png" alt=""></p><p>为了保证扣库存和生成订单的原子性，需要采用事务处理，然后取库存判断、减库存，最后提交事务，整个流程有很多IO，对数据库的操作又是阻塞的。这种方式根本不适合高并发的秒杀系统。</p><p>接下来我们对单机扣库存的方案做优化：<strong>本地扣库存</strong>。我们把一定的库存量分配到本地机器，直接在内存中减库存，然后按照之前的逻辑异步创建订单。改进过之后的单机系统是这样的:</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200205173625.png" alt=""></p><p>这样就避免了对数据库频繁的IO操作，只在内存中做运算，极大的提高了单机抗并发的能力。但是百万的用户请求量单机是无论如何也抗不住的，虽然nginx处理网络请求使用epoll模型，c10k的问题在业界早已得到了解决。但是linux系统下，一切资源皆文件，网络请求也是这样，大量的文件描述符会使操作系统瞬间失去响应。上面我们提到了nginx的加权均衡策略，我们不妨假设将100W的用户请求量平均均衡到100台服务器上，这样单机所承受的并发量就小了很多。然后我们每台机器本地库存100张火车票，100台服务器上的总库存还是1万，这样保证了库存订单不超卖,下面是我们描述的集群架构:</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200205173732.png" alt=""></p><p>问题接踵而至，在高并发情况下，现在我们还无法保证系统的高可用，假如这100台服务器上有两三台机器因为扛不住并发的流量或者其他的原因宕机了。那么这些服务器上的订单就卖不出去了，这就造成了订单的少卖。要解决这个问题，我们需要对总订单量做统一的管理，这就是接下来的容错方案。服务器不仅要在本地减库存，另外要<strong>远程统一减库存</strong>。有了远程统一减库存的操作，我们就可以根据机器负载情况，为每台机器分配一些多余的“buffer库存”用来防止机器中有机器宕机的情况。我们结合下面架构图具体分析一下:</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200205173937.png" alt=""></p><p>我们采用Redis存储统一库存，因为Redis的性能非常高，号称单机QPS能抗10W的并发。在本地减库存以后，如果本地有订单，我们再去请求redis远程减库存，本地减库存和远程减库存都成功了，才返回给用户抢票成功的提示,这样也能有效的保证订单不会超卖。当机器中有机器宕机时，因为每个机器上有预留的buffer余票，所以宕机机器上的余票依然能够在其他机器上得到弥补，保证了不少卖。buffer余票设置多少合适呢，理论上buffer设置的越多，系统容忍宕机的机器数量就越多，但是buffer设置的太大也会对redis造成一定的影响。虽然redis内存数据库抗并发能力非常高，请求依然会走一次网络IO,其实抢票过程中对redis的请求次数是本地库存和buffer库存的总量，因为当本地库存不足时，系统直接返回用户“已售罄”的信息提示，就不会再走统一扣库存的逻辑，这在一定程度上也避免了巨大的网络请求量把redis压跨，所以buffer值设置多少，需要架构师对系统的负载能力做认真的考量。</p><h3 id="4-代码演示"><a href="#4-代码演示" class="headerlink" title="4. 代码演示"></a>4. 代码演示</h3><p>Go语言原生为并发设计，我采用go语言给大家演示一下单机抢票的具体流程。</p><h4 id="4-1-初始化工作"><a href="#4-1-初始化工作" class="headerlink" title="4.1 初始化工作"></a>4.1 初始化工作</h4><p>go包中的init函数先于main函数执行，在这个阶段主要做一些准备性工作。我们系统需要做的准备工作有：初始化本地库存、初始化远程redis存储统一库存的hash键值、初始化redis连接池；另外还需要初始化一个大小为1的int类型chan,目的是实现分布式锁的功能，也可以直接使用读写锁或者使用redis等其他的方式避免资源竞争,但使用channel更加高效，这就是go语言的哲学：<strong>不要通过共享内存来通信，而要通过通信来共享内存</strong>。redis库使用的是redigo，下面是代码实现:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">//localSpike包结构体定义</span></span><br><span class="line"><span class="keyword">package</span> localSpike</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LocalSpike <span class="keyword">struct</span> &#123;</span><br><span class="line">LocalInStock     <span class="keyword">int64</span></span><br><span class="line">LocalSalesVolume <span class="keyword">int64</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="comment">//remoteSpike对hash结构的定义和redis连接池</span></span><br><span class="line"><span class="keyword">package</span> remoteSpike</span><br><span class="line"><span class="comment">//远程订单存储健值</span></span><br><span class="line"><span class="keyword">type</span> RemoteSpikeKeys <span class="keyword">struct</span> &#123;</span><br><span class="line">SpikeOrderHashKey <span class="keyword">string</span><span class="comment">//redis中秒杀订单hash结构key</span></span><br><span class="line">TotalInventoryKey <span class="keyword">string</span><span class="comment">//hash结构中总订单库存key</span></span><br><span class="line">QuantityOfOrderKey <span class="keyword">string</span><span class="comment">//hash结构中已有订单数量key</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化redis连接池</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPool</span><span class="params">()</span> *<span class="title">redis</span>.<span class="title">Pool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;redis.Pool&#123;</span><br><span class="line">MaxIdle:   <span class="number">10000</span>,</span><br><span class="line">MaxActive: <span class="number">12000</span>, <span class="comment">// max number of connections</span></span><br><span class="line">Dial: <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(redis.Conn, error)</span></span> &#123;</span><br><span class="line">c, err := redis.Dial(<span class="string">"tcp"</span>, <span class="string">":6379"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c, err</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">localSpike = localSpike2.LocalSpike&#123;</span><br><span class="line">LocalInStock:     <span class="number">150</span>,</span><br><span class="line">LocalSalesVolume: <span class="number">0</span>,</span><br><span class="line">&#125;</span><br><span class="line">remoteSpike = remoteSpike2.RemoteSpikeKeys&#123;</span><br><span class="line">SpikeOrderHashKey:  <span class="string">"ticket_hash_key"</span>,</span><br><span class="line">TotalInventoryKey:  <span class="string">"ticket_total_nums"</span>,</span><br><span class="line">QuantityOfOrderKey: <span class="string">"ticket_sold_nums"</span>,</span><br><span class="line">&#125;</span><br><span class="line">redisPool = remoteSpike2.NewPool()</span><br><span class="line">done = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line">done &lt;- <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-本地扣库存和统一扣库存个"><a href="#4-2-本地扣库存和统一扣库存个" class="headerlink" title="4.2 本地扣库存和统一扣库存个"></a>4.2 本地扣库存和统一扣库存个</h4><p>本地扣库存逻辑非常简单，用户请求过来，添加销量，然后对比销量是否大于本地库存，返回bool值:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> localSpike</span><br><span class="line"><span class="comment">//本地扣库存,返回bool值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(spike *LocalSpike)</span> <span class="title">LocalDeductionStock</span><span class="params">()</span> <span class="title">bool</span></span>&#123;</span><br><span class="line">spike.LocalSalesVolume = spike.LocalSalesVolume + <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> spike.LocalSalesVolume &lt; spike.LocalInStock</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这里对共享数据LocalSalesVolume的操作是要使用锁来实现的，但是因为本地扣库存和统一扣库存是一个原子性操作，所以在最上层使用channel来实现，这块后边会讲。统一扣库存操作redis，因为redis是单线程的，而我们要实现从中取数据，写数据并计算一些列步骤，我们要配合lua脚本打包命令，保证操作的原子性:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">package</span> remoteSpike</span><br><span class="line">......</span><br><span class="line">const LuaScript = `</span><br><span class="line">        <span class="keyword">local</span> ticket_key = KEYS[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">local</span> ticket_total_key = ARGV[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">local</span> ticket_sold_key = ARGV[<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">local</span> ticket_total_nums = <span class="built_in">tonumber</span>(redis.call(<span class="string">'HGET'</span>, ticket_key, ticket_total_key))</span><br><span class="line">        <span class="keyword">local</span> ticket_sold_nums = <span class="built_in">tonumber</span>(redis.call(<span class="string">'HGET'</span>, ticket_key, ticket_sold_key))</span><br><span class="line"><span class="comment">-- 查看是否还有余票,增加订单数量,返回结果值</span></span><br><span class="line">       <span class="keyword">if</span>(ticket_total_nums &gt;= ticket_sold_nums) <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">return</span> redis.call(<span class="string">'HINCRBY'</span>, ticket_key, ticket_sold_key, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">`</span><br><span class="line">//远端统一扣库存</span><br><span class="line">func (RemoteSpikeKeys *RemoteSpikeKeys) RemoteDeductionStock(conn redis.Conn) bool &#123;</span><br><span class="line">lua := redis.NewScript(<span class="number">1</span>, LuaScript)</span><br><span class="line">result, err := redis.Int(lua.Do(conn, RemoteSpikeKeys.SpikeOrderHashKey, RemoteSpikeKeys.TotalInventoryKey, RemoteSpikeKeys.QuantityOfOrderKey))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result != <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用hash结构存储总库存和总销量的信息,用户请求过来时，判断总销量是否大于库存，然后返回相关的bool值。在启动服务之前，我们需要初始化redis的初始库存信息:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hmset ticket_hash_key <span class="string">"ticket_total_nums"</span> 10000 <span class="string">"ticket_sold_nums"</span> 0</span><br></pre></td></tr></table></figure><h4 id="4-3-响应用户信息"><a href="#4-3-响应用户信息" class="headerlink" title="4.3 响应用户信息"></a>4.3 响应用户信息</h4><p>我们开启一个http服务，监听在一个端口上:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">"/buy/ticket"</span>, handleReq)</span><br><span class="line">http.ListenAndServe(<span class="string">":3005"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面我们做完了所有的初始化工作，接下来handleReq的逻辑非常清晰，判断是否抢票成功，返回给用户信息就可以了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="comment">//处理请求函数,根据请求将响应结果信息写入日志</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleReq</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">redisConn := redisPool.Get()</span><br><span class="line">LogMsg := <span class="string">""</span></span><br><span class="line">&lt;-done</span><br><span class="line"><span class="comment">//全局读写锁</span></span><br><span class="line"><span class="keyword">if</span> localSpike.LocalDeductionStock() &amp;&amp; remoteSpike.RemoteDeductionStock(redisConn) &#123;</span><br><span class="line">util.RespJson(w, <span class="number">1</span>,  <span class="string">"抢票成功"</span>, <span class="literal">nil</span>)</span><br><span class="line">LogMsg = LogMsg + <span class="string">"result:1,localSales:"</span> + strconv.FormatInt(localSpike.LocalSalesVolume, <span class="number">10</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">util.RespJson(w, <span class="number">-1</span>, <span class="string">"已售罄"</span>, <span class="literal">nil</span>)</span><br><span class="line">LogMsg = LogMsg + <span class="string">"result:0,localSales:"</span> + strconv.FormatInt(localSpike.LocalSalesVolume, <span class="number">10</span>)</span><br><span class="line">&#125;</span><br><span class="line">done &lt;- <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将抢票状态写入到log中</span></span><br><span class="line">writeLog(LogMsg, <span class="string">"./stat.log"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeLog</span><span class="params">(msg <span class="keyword">string</span>, logPath <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">fd, _ := os.OpenFile(logPath, os.O_RDWR|os.O_CREATE|os.O_APPEND, <span class="number">0644</span>)</span><br><span class="line"><span class="keyword">defer</span> fd.Close()</span><br><span class="line">content := strings.Join([]<span class="keyword">string</span>&#123;msg, <span class="string">"\r\n"</span>&#125;, <span class="string">""</span>)</span><br><span class="line">buf := []<span class="keyword">byte</span>(content)</span><br><span class="line">fd.Write(buf)</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>前边提到我们扣库存时要考虑竞态条件，我们这里是使用channel避免并发的读写，保证了请求的高效顺序执行。我们将接口的返回信息写入到了./stat.log文件方便做压测统计。</p><h4 id="4-4-单机服务压测"><a href="#4-4-单机服务压测" class="headerlink" title="4.4 单机服务压测"></a>4.4 单机服务压测</h4><p>开启服务，我们使用ab压测工具进行测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ab -n 10000 -c 100 http://127.0.0.1:3005/buy/ticket</span><br></pre></td></tr></table></figure><p>下面是我本地低配mac的压测信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">This is ApacheBench, Version <span class="number">2.3</span> &lt;$Revision: <span class="number">1826891</span> $&gt;</span><br><span class="line">Copyright <span class="number">1996</span> Adam Twiss, Zeus Technology Ltd, http:<span class="comment">//www.zeustech.net/</span></span><br><span class="line">Licensed to The Apache Software Foundation, http:<span class="comment">//www.apache.org/</span></span><br><span class="line"></span><br><span class="line">Benchmarking <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> (be patient)</span><br><span class="line">Completed <span class="number">1000</span> requests</span><br><span class="line">Completed <span class="number">2000</span> requests</span><br><span class="line">Completed <span class="number">3000</span> requests</span><br><span class="line">Completed <span class="number">4000</span> requests</span><br><span class="line">Completed <span class="number">5000</span> requests</span><br><span class="line">Completed <span class="number">6000</span> requests</span><br><span class="line">Completed <span class="number">7000</span> requests</span><br><span class="line">Completed <span class="number">8000</span> requests</span><br><span class="line">Completed <span class="number">9000</span> requests</span><br><span class="line">Completed <span class="number">10000</span> requests</span><br><span class="line">Finished <span class="number">10000</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:</span><br><span class="line">Server Hostname:        <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">Server Port:            <span class="number">3005</span></span><br><span class="line"></span><br><span class="line">Document Path:          /buy/ticket</span><br><span class="line">Document Length:        <span class="number">29</span> bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      <span class="number">100</span></span><br><span class="line">Time taken <span class="keyword">for</span> tests:   <span class="number">2.339</span> seconds</span><br><span class="line">Complete requests:      <span class="number">10000</span></span><br><span class="line">Failed requests:        <span class="number">0</span></span><br><span class="line">Total transferred:      <span class="number">1370000</span> bytes</span><br><span class="line">HTML transferred:       <span class="number">290000</span> bytes</span><br><span class="line">Requests per second:    4275.96 [#/sec] (mean)</span><br><span class="line">Time per request:       <span class="number">23.387</span> [ms] (mean)</span><br><span class="line">Time per request:       <span class="number">0.234</span> [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          <span class="number">572.08</span> [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line"><span class="function">Connection <span class="title">Times</span> <span class="params">(ms)</span></span></span><br><span class="line"><span class="function">              min  mean[+/-sd] median   max</span></span><br><span class="line"><span class="function">Connect:        0    8  14.7      6     223</span></span><br><span class="line"><span class="function">Processing:     2   15  17.6     11     232</span></span><br><span class="line"><span class="function">Waiting:        1   11  13.5      8     225</span></span><br><span class="line"><span class="function">Total:          7   23  22.8     18     239</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Percentage of the requests served within a certain <span class="title">time</span> <span class="params">(ms)</span></span></span><br><span class="line"><span class="function">  50%     18</span></span><br><span class="line"><span class="function">  66%     24</span></span><br><span class="line"><span class="function">  75%     26</span></span><br><span class="line"><span class="function">  80%     28</span></span><br><span class="line"><span class="function">  90%     33</span></span><br><span class="line"><span class="function">  95%     39</span></span><br><span class="line"><span class="function">  98%     45</span></span><br><span class="line"><span class="function">  99%     54</span></span><br><span class="line"><span class="function"> 100%    239 <span class="params">(longest request)</span></span></span><br></pre></td></tr></table></figure><p>根据指标显示，我单机每秒就能处理4000+的请求，正常服务器都是多核配置，处理1W+的请求根本没有问题。而且查看日志发现整个服务过程中，请求都很正常，流量均匀，redis也很正常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//stat.log</span></span><br><span class="line">...</span><br><span class="line">result:<span class="number">1</span>,localSales:<span class="number">145</span></span><br><span class="line">result:<span class="number">1</span>,localSales:<span class="number">146</span></span><br><span class="line">result:<span class="number">1</span>,localSales:<span class="number">147</span></span><br><span class="line">result:<span class="number">1</span>,localSales:<span class="number">148</span></span><br><span class="line">result:<span class="number">1</span>,localSales:<span class="number">149</span></span><br><span class="line">result:<span class="number">1</span>,localSales:<span class="number">150</span></span><br><span class="line">result:<span class="number">0</span>,localSales:<span class="number">151</span></span><br><span class="line">result:<span class="number">0</span>,localSales:<span class="number">152</span></span><br><span class="line">result:<span class="number">0</span>,localSales:<span class="number">153</span></span><br><span class="line">result:<span class="number">0</span>,localSales:<span class="number">154</span></span><br><span class="line">result:<span class="number">0</span>,localSales:<span class="number">156</span></span><br><span class="line">...</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="5-总结回顾"><a href="#5-总结回顾" class="headerlink" title="5.总结回顾"></a>5.总结回顾</h3><p>总体来说，秒杀系统是非常复杂的。我们这里只是简单介绍模拟了一下单机如何优化到高性能，集群如何避免单点故障，保证订单不超卖、不少卖的一些策略，完整的订单系统还有订单进度的查看，每台服务器上都有一个任务，定时的从总库存同步余票和库存信息展示给用户,还有用户在订单有效期内不支付，释放订单，补充到库存等等。</p><p>我们实现了高并发抢票的核心逻辑，可以说系统设计的非常的巧妙，巧妙的避开了对DB数据库IO的操作，对Redis网络IO的高并发请求，几乎所有的计算都是在内存中完成的，而且有效的保证了不超卖、不少卖，还能够容忍部分机器的宕机。我觉得其中有两点特别值得学习总结：</p><ul><li>负载均衡，分而治之。通过负载均衡，将不同的流量划分到不同的机器上，每台机器处理好自己的请求，将自己的性能发挥到极致，这样系统的整体也就能承受极高的并发了，就像工作的的一个团队，每个人都将自己的价值发挥到了极致，团队成长自然是很大的。</li><li>合理的使用并发和异步。自epoll网络架构模型解决了c10k问题以来，异步越来被服务端开发人员所接受，能够用异步来做的工作，就用异步来做，在功能拆解上能达到意想不到的效果，这点在nginx、node.js、redis上都能体现，他们处理网络请求使用的epoll模型，用实践告诉了我们单线程依然可以发挥强大的威力。服务器已经进入了多核时代，go语言这种天生为并发而生的语言，完美的发挥了服务器多核优势，很多可以并发处理的任务都可以使用并发来解决，比如go处理http请求时每个请求都会在一个goroutine中执行，总之:怎样合理的压榨CPU,让其发挥出应有的价值，是我们一直需要探索学习的方向。</li></ul><p>参考文章:<br><a href="https://juejin.im/post/5d84e21f6fb9a06ac8248149">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;12306抢票-极限并发带来的思考&quot;&gt;&lt;a href=&quot;#12306抢票-极限并发带来的思考&quot; class=&quot;headerlink&quot; title=&quot;12306抢票,极限并发带来的思考?&quot;&gt;&lt;/a&gt;12306抢票,极限并发带来的思考?&lt;/h3&gt;&lt;p&gt;每到节假日期间,一二线城市返乡、外出游玩的人们几乎都面临着一个问题：抢火车票!虽然现在大多数情况下都能订到票,但是放票瞬间即无票的场景，相信大家都深有体会。尤其是春节期间，大家不仅使用12306，还会考虑“智行”和其他的抢票软件,全国上下几亿人在这段时间都在抢票。
    
    </summary>
    
    
      <category term="架构" scheme="https://removeif.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="设计" scheme="https://removeif.github.io/categories/%E6%9E%B6%E6%9E%84/%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="秒杀系统，支付设计" scheme="https://removeif.github.io/tags/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%EF%BC%8C%E6%94%AF%E4%BB%98%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Kafka基本架构及原理</title>
    <link href="https://removeif.github.io/design-architecture/Kafka%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%8E%9F%E7%90%86.html"/>
    <id>https://removeif.github.io/design-architecture/Kafka%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%8E%9F%E7%90%86.html</id>
    <published>2020-02-02T03:47:53.000Z</published>
    <updated>2020-02-06T03:27:44.577Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、为什么需要消息系统"><a href="#一、为什么需要消息系统" class="headerlink" title="一、为什么需要消息系统"></a>一、为什么需要消息系统</h3><p>1.解耦：<br>    允许你独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束。<br>2.冗余：<br>    消息队列把数据进行持久化直到它们已经被完全处理，通过这一方式规避了数据丢失风险。许多消息队列所采用的”插入-获取-删除”范式中，在把一个消息从队列中删除之前，需要你的处理系统明确的指出该消息已经被处理完毕，从而确保你的数据被安全的保存直到你使用完毕。<br>3.扩展性：<br>    因为消息队列解耦了你的处理过程，所以增大消息入队和处理的频率是很容易的，只要另外增加处理过程即可。<a id="more"></a><br>4.灵活性 &amp; 峰值处理能力：<br>    在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见。如果为以能处理这类峰值访问为标准来投入资源随时待命无疑是巨大的浪费。使用消息队列能够使关键组件顶住突发的访问压力，而不会因为突发的超负荷的请求而完全崩溃。<br>5.可恢复性：<br>    系统的一部分组件失效时，不会影响到整个系统。消息队列降低了进程间的耦合度，所以即使一个处理消息的进程挂掉，加入队列中的消息仍然可以在系统恢复后被处理。<br>6.顺序保证：<br>    在大多使用场景下，数据处理的顺序都很重要。大部分消息队列本来就是排序的，并且能保证数据会按照特定的顺序来处理。（Kafka 保证一个 Partition 内的消息的有序性）<br>7.缓冲：<br>    有助于控制和优化数据流经过系统的速度，解决生产消息和消费消息的处理速度不一致的情况。<br>8.异步通信：<br>    很多时候，用户不想也不需要立即处理消息。消息队列提供了异步处理机制，允许用户把一个消息放入队列，但并不立即处理它。想向队列中放入多少消息就放多少，然后在需要的时候再去处理它们。</p><h3 id="二、kafka-架构"><a href="#二、kafka-架构" class="headerlink" title="二、kafka 架构"></a>二、kafka 架构</h3><h4 id="拓扑结构"><a href="#拓扑结构" class="headerlink" title="拓扑结构"></a>拓扑结构</h4><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202112014.png" alt=""></p><p> 相关名词解释:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1.producer：</span><br><span class="line">　　消息生产者，发布消息到 kafka 集群的终端或服务。</span><br><span class="line">2.broker：</span><br><span class="line">　　kafka 集群中包含的服务器。</span><br><span class="line">3.topic：</span><br><span class="line">　　每条发布到 kafka 集群的消息属于的类别，即 kafka 是面向 topic 的。</span><br><span class="line">4.partition：</span><br><span class="line">　　partition 是物理上的概念，每个 topic 包含一个或多个 partition。kafka 分配的单位是 partition。</span><br><span class="line">5.consumer：</span><br><span class="line">　　从 kafka 集群中消费消息的终端或服务。</span><br><span class="line">6.Consumer group：</span><br><span class="line">　　high-level consumer API 中，每个 consumer 都属于一个 consumer group，每条消息只能被 consumer group 中的一个 Consumer 消费，但可以被多个 consumer group 消费。</span><br><span class="line">7.replica：</span><br><span class="line">　　partition 的副本，保障 partition 的高可用。</span><br><span class="line">8.leader：</span><br><span class="line">　　replica 中的一个角色， producer 和 consumer 只跟 leader 交互。</span><br><span class="line">9.follower：</span><br><span class="line">　　replica 中的一个角色，从 leader 中复制数据。</span><br><span class="line">10.controller：</span><br><span class="line">　　kafka 集群中的其中一个服务器，用来进行 leader election 以及 各种 failover。</span><br><span class="line">12.zookeeper：</span><br><span class="line">　　kafka 通过 zookeeper 来存储集群的 meta 信息。</span><br></pre></td></tr></table></figure><h4 id="zookeeper-节点"><a href="#zookeeper-节点" class="headerlink" title="zookeeper 节点"></a>zookeeper 节点</h4><p>kafka 在 zookeeper 中的存储结构如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202112250.png" alt=""></p><h3 id="三、producer-发布消息"><a href="#三、producer-发布消息" class="headerlink" title="三、producer 发布消息"></a>三、producer 发布消息</h3><h4 id="写入方式"><a href="#写入方式" class="headerlink" title="写入方式"></a>写入方式</h4><p>producer 采用 push 模式将消息发布到 broker，每条消息都被 append 到 patition 中，属于顺序写磁盘（顺序写磁盘效率比随机写内存要高，保障 kafka 吞吐率）。</p><h4 id="消息路由"><a href="#消息路由" class="headerlink" title="消息路由"></a>消息路由</h4><p>producer 发送消息到 broker 时，会根据分区算法选择将其存储到哪一个 partition。其路由机制为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 指定了 patition，则直接使用；</span><br><span class="line">2. 未指定 patition 但指定 key，通过对 key 的 value 进行hash 选出一个 patition</span><br><span class="line">3. patition 和 key 都未指定，使用轮询选出一个 patition。</span><br></pre></td></tr></table></figure><p>附上 java 客户端分区源码，一目了然：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建消息实例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProducerRecord</span><span class="params">(String topic, Integer partition, Long timestamp, K key, V value)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (topic == <span class="keyword">null</span>)</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Topic cannot be null"</span>);</span><br><span class="line">     <span class="keyword">if</span> (timestamp != <span class="keyword">null</span> &amp;&amp; timestamp &lt; <span class="number">0</span>)</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid timestamp "</span> + timestamp);</span><br><span class="line">     <span class="keyword">this</span>.topic = topic;</span><br><span class="line">     <span class="keyword">this</span>.partition = partition;</span><br><span class="line">     <span class="keyword">this</span>.key = key;</span><br><span class="line">     <span class="keyword">this</span>.value = value;</span><br><span class="line">     <span class="keyword">this</span>.timestamp = timestamp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算 patition，如果指定了 patition 则直接使用，否则使用 key 计算</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(ProducerRecord&lt;K, V&gt; record, <span class="keyword">byte</span>[] serializedKey , <span class="keyword">byte</span>[] serializedValue, Cluster cluster)</span> </span>&#123;</span><br><span class="line">     Integer partition = record.partition();</span><br><span class="line">     <span class="keyword">if</span> (partition != <span class="keyword">null</span>) &#123;</span><br><span class="line">          List&lt;PartitionInfo&gt; partitions = cluster.partitionsForTopic(record.topic());</span><br><span class="line">          <span class="keyword">int</span> lastPartition = partitions.size() - <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">if</span> (partition &lt; <span class="number">0</span> || partition &gt; lastPartition) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">"Invalid partition given with record: %d is not in the range [0...%d]."</span>, partition, lastPartition));</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> partition;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.partitioner.partition(record.topic(), record.key(), serializedKey, record.value(), serializedValue, cluster);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 key 选取 patition</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(String topic, Object key, <span class="keyword">byte</span>[] keyBytes, Object value, <span class="keyword">byte</span>[] valueBytes, Cluster cluster)</span> </span>&#123;</span><br><span class="line">     List&lt;PartitionInfo&gt; partitions = cluster.partitionsForTopic(topic);</span><br><span class="line">     <span class="keyword">int</span> numPartitions = partitions.size();</span><br><span class="line">     <span class="keyword">if</span> (keyBytes == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">int</span> nextValue = counter.getAndIncrement();</span><br><span class="line">          List&lt;PartitionInfo&gt; availablePartitions = cluster.availablePartitionsForTopic(topic);</span><br><span class="line">          <span class="keyword">if</span> (availablePartitions.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="keyword">int</span> part = DefaultPartitioner.toPositive(nextValue) % availablePartitions.size();</span><br><span class="line">               <span class="keyword">return</span> availablePartitions.get(part).partition();</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> DefaultPartitioner.toPositive(nextValue) % numPartitions;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//对 keyBytes 进行 hash 选出一个 patition</span></span><br><span class="line">          <span class="keyword">return</span> DefaultPartitioner.toPositive(Utils.murmur2(keyBytes)) % numPartitions;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="写入流程"><a href="#写入流程" class="headerlink" title="写入流程"></a>写入流程</h4><p>producer 写入消息序列图:</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202112612.png" alt=""></p><p>流程说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. producer 先从 zookeeper 的 &quot;&#x2F;brokers&#x2F;...&#x2F;state&quot; 节点找到该 partition 的 leader</span><br><span class="line">2. producer 将消息发送给该 leader</span><br><span class="line">3. leader 将消息写入本地 log</span><br><span class="line">4. followers 从 leader pull 消息，写入本地 log 后 leader 发送 ACK</span><br><span class="line">5. leader 收到所有 ISR 中的 replica 的 ACK 后，增加 HW（high watermark，最后 commit 的 offset） 并向 producer 发送 ACK</span><br></pre></td></tr></table></figure><h4 id="producer-delivery-guarantee"><a href="#producer-delivery-guarantee" class="headerlink" title="producer delivery guarantee"></a>producer delivery guarantee</h4><p>一般情况下存在三种情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. At most once 消息可能会丢，但绝不会重复传输</span><br><span class="line">2. At least one 消息绝不会丢，但可能会重复传输</span><br><span class="line">3. Exactly once 每条消息肯定会被传输一次且仅传输一次</span><br></pre></td></tr></table></figure><p>当 producer 向 broker 发送消息时，一旦这条消息被 commit，由于 replication 的存在，它就不会丢。但是如果 producer 发送数据给 broker 后，遇到网络问题而造成通信中断，那 Producer 就无法判断该条消息是否已经 commit。虽然 Kafka 无法确定网络故障期间发生了什么，但是 producer 可以生成一种类似于主键的东西，发生故障时幂等性的重试多次，这样就做到了 Exactly once，但目前还并未实现。所以目前默认情况下一条消息从 producer 到 broker 是确保了 At least once，可通过设置 producer 异步发送实现At most once。</p><h3 id="四、broker-保存消息"><a href="#四、broker-保存消息" class="headerlink" title="四、broker 保存消息"></a>四、broker 保存消息</h3><h4 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h4><p>物理上把 topic 分成一个或多个 patition（对应 server.properties 中的 num.partitions=3 配置），每个 patition 物理上对应一个文件夹（该文件夹存储该 patition 的所有消息和索引文件），如下：</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202112822.png" alt=""></p><h4 id="存储策略"><a href="#存储策略" class="headerlink" title="存储策略"></a>存储策略</h4><p>无论消息是否被消费，kafka 都会保留所有消息。有两种策略可以删除旧数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 基于时间：log.retention.hours&#x3D;168</span><br><span class="line">2. 基于大小：log.retention.bytes&#x3D;1073741824</span><br></pre></td></tr></table></figure><p>需要注意的是，因为Kafka读取特定消息的时间复杂度为O(1)，即与文件大小无关，所以这里删除过期文件与提高 Kafka 性能无关。</p><h4 id="topic-创建与删除"><a href="#topic-创建与删除" class="headerlink" title="topic 创建与删除"></a>topic 创建与删除</h4><h5 id="创建-topic"><a href="#创建-topic" class="headerlink" title="创建 topic"></a>创建 topic</h5><p>创建 topic 的序列图</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202112925.png" alt=""></p><p>流程说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. controller 在 ZooKeeper 的 &#x2F;brokers&#x2F;topics 节点上注册 watcher，当 topic 被创建，则 controller 会通过 watch 得到该 topic 的 partition&#x2F;replica 分配。</span><br><span class="line">2. controller从 &#x2F;brokers&#x2F;ids 读取当前所有可用的 broker 列表，对于 set_p 中的每一个 partition：</span><br><span class="line">   2.1 从分配给该 partition 的所有 replica（称为AR）中任选一个可用的 broker 作为新的 leader，并将AR设置为新的 ISR</span><br><span class="line">   2.2 将新的 leader 和 ISR 写入 &#x2F;brokers&#x2F;topics&#x2F;[topic]&#x2F;partitions&#x2F;[partition]&#x2F;state</span><br><span class="line">3. controller 通过 RPC 向相关的 broker 发送 LeaderAndISRRequest。</span><br></pre></td></tr></table></figure><h5 id="删除-topic"><a href="#删除-topic" class="headerlink" title="删除 topic"></a>删除 topic</h5><p>删除 topic 的序列图</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202113026.png" alt=""></p><p>流程说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. controller 在 zooKeeper 的 &#x2F;brokers&#x2F;topics 节点上注册 watcher，当 topic 被删除，则 controller 会通过 watch 得到该 topic 的 partition&#x2F;replica 分配。</span><br><span class="line">2. 若 delete.topic.enable&#x3D;false，结束；否则 controller 注册在 &#x2F;admin&#x2F;delete_topics 上的 watch 被 fire，controller 通过回调向对应的 broker 发送 StopReplicaRequest。</span><br></pre></td></tr></table></figure><h3 id="五、kafka-HA"><a href="#五、kafka-HA" class="headerlink" title="五、kafka HA"></a>五、kafka HA</h3><h4 id="replication"><a href="#replication" class="headerlink" title="replication"></a>replication</h4><p>如图.1所示，同一个 partition 可能会有多个 replica（对应 server.properties 配置中的 default.replication.factor=N）。没有 replica 的情况下，一旦 broker 宕机，其上所有 patition 的数据都不可被消费，同时 producer 也不能再将数据存于其上的 patition。引入replication 之后，同一个 partition 可能会有多个 replica，而这时需要在这些 replica 之间选出一个 leader，producer 和 consumer 只与这个 leader 交互，其它 replica 作为 follower 从 leader 中复制数据。</p><p>Kafka 分配 Replica 的算法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 将所有 broker（假设共 n 个 broker）和待分配的 partition 排序</span><br><span class="line">2. 将第 i 个 partition 分配到第（i mod n）个 broker 上</span><br><span class="line">3. 将第 i 个 partition 的第 j 个 replica 分配到第（(i + j) mode n）个 broker上</span><br></pre></td></tr></table></figure><h4 id="leader-failover"><a href="#leader-failover" class="headerlink" title="leader failover"></a>leader failover</h4><p>当 partition 对应的 leader 宕机时，需要从 follower 中选举出新 leader。在选举新leader时，一个基本的原则是，新的 leader 必须拥有旧 leader commit 过的所有消息。</p><p>kafka 在 zookeeper 中（/brokers/…/state）动态维护了一个 ISR（in-sync replicas），由3.3节的写入流程可知 ISR 里面的所有 replica 都跟上了 leader，只有 ISR 里面的成员才能选为 leader。对于 f+1 个 replica，一个 partition 可以在容忍 f 个 replica 失效的情况下保证消息不丢失。</p><p>当所有 replica 都不工作时，有两种可行的方案：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 等待 ISR 中的任一个 replica 活过来，并选它作为 leader。可保障数据不丢失，但时间可能相对较长。</span><br><span class="line">2. 选择第一个活过来的 replica（不一定是 ISR 成员）作为 leader。无法保障数据不丢失，但相对不可用时间较短。</span><br></pre></td></tr></table></figure><p>kafka 0.8.* 使用第二种方式。</p><p>kafka 通过 Controller 来选举 leader，流程请参考5.3节。</p><h4 id="broker-failover"><a href="#broker-failover" class="headerlink" title="broker failover"></a>broker failover</h4><p>kafka broker failover 序列图如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202113536.png" alt=""></p><p>流程说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. controller 在 zookeeper 的 &#x2F;brokers&#x2F;ids&#x2F;[brokerId] 节点注册 Watcher，当 broker 宕机时 zookeeper 会 fire watch</span><br><span class="line">2. controller 从 &#x2F;brokers&#x2F;ids 节点读取可用broker</span><br><span class="line">3. controller决定set_p，该集合包含宕机 broker 上的所有 partition</span><br><span class="line">4. 对 set_p 中的每一个 partition</span><br><span class="line">    4.1 从&#x2F;brokers&#x2F;topics&#x2F;[topic]&#x2F;partitions&#x2F;[partition]&#x2F;state 节点读取 ISR</span><br><span class="line">    4.2 决定新 leader（如4.3节所描述）</span><br><span class="line">    4.3 将新 leader、ISR、controller_epoch 和 leader_epoch 等信息写入 state 节点</span><br><span class="line">5. 通过 RPC 向相关 broker 发送 leaderAndISRRequest 命令</span><br></pre></td></tr></table></figure><h4 id="controller-failover"><a href="#controller-failover" class="headerlink" title="controller failover"></a>controller failover</h4><p>当 controller 宕机时会触发 controller failover。每个 broker 都会在 zookeeper 的 “/controller” 节点注册 watcher，当 controller 宕机时 zookeeper 中的临时节点消失，所有存活的 broker 收到 fire 的通知，每个 broker 都尝试创建新的 controller path，只有一个竞选成功并当选为 controller。</p><p>当新的 controller 当选时，会触发 KafkaController.onControllerFailover 方法，在该方法中完成如下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> 1. 读取并增加 Controller Epoch。</span><br><span class="line"> 2. 在 reassignedPartitions Patch(&#x2F;admin&#x2F;reassign_partitions) 上注册 watcher。</span><br><span class="line"> 3. 在 preferredReplicaElection Path(&#x2F;admin&#x2F;preferred_replica_election) 上注册 watcher。</span><br><span class="line"> 4. 通过 partitionStateMachine 在 broker Topics Patch(&#x2F;brokers&#x2F;topics) 上注册 watcher。</span><br><span class="line"> 5. 若 delete.topic.enable&#x3D;true（默认值是 false），则 partitionStateMachine 在 Delete Topic Patch(&#x2F;admin&#x2F;delete_topics) 上注册 watcher。</span><br><span class="line"> 6. 通过 replicaStateMachine在 Broker Ids Patch(&#x2F;brokers&#x2F;ids)上注册Watch。</span><br><span class="line"> 7. 初始化 ControllerContext 对象，设置当前所有 topic，“活”着的 broker 列表，所有 partition 的 leader 及 ISR等。</span><br><span class="line"> 8. 启动 replicaStateMachine 和 partitionStateMachine。</span><br><span class="line"> 9. 将 brokerState 状态设置为 RunningAsController。</span><br><span class="line">10. 将每个 partition 的 Leadership 信息发送给所有“活”着的 broker。</span><br><span class="line">11. 若 auto.leader.rebalance.enable&#x3D;true（默认值是true），则启动 partition-rebalance 线程。</span><br><span class="line">12. 若 delete.topic.enable&#x3D;true 且Delete Topic Patch(&#x2F;admin&#x2F;delete_topics)中有值，则删除相应的Topic。</span><br></pre></td></tr></table></figure><h3 id="六、consumer-消费消息"><a href="#六、consumer-消费消息" class="headerlink" title="六、consumer 消费消息"></a>六、consumer 消费消息</h3><h4 id="consumer-API"><a href="#consumer-API" class="headerlink" title="consumer API"></a>consumer API</h4><p>kafka 提供了两套 consumer API：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. The high-level Consumer API</span><br><span class="line">2. The SimpleConsumer API</span><br></pre></td></tr></table></figure><p>其中 high-level consumer API 提供了一个从 kafka 消费数据的高层抽象，而 SimpleConsumer API 则需要开发人员更多地关注细节。</p><h5 id="The-high-level-consumer-API"><a href="#The-high-level-consumer-API" class="headerlink" title="The high-level consumer API"></a>The high-level consumer API</h5><p>high-level consumer API 提供了 consumer group 的语义，一个消息只能被 group 内的一个 consumer 所消费，且 consumer 消费消息时不关注 offset，最后一个 offset 由 zookeeper 保存。</p><p>使用 high-level consumer API 可以是多线程的应用，应当注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 如果消费线程大于 patition 数量，则有些线程将收不到消息</span><br><span class="line">2. 如果 patition 数量大于线程数，则有些线程多收到多个 patition 的消息</span><br><span class="line">3. 如果一个线程消费多个 patition，则无法保证你收到的消息的顺序，而一个 patition 内的消息是有序的</span><br></pre></td></tr></table></figure><h5 id="The-SimpleConsumer-API"><a href="#The-SimpleConsumer-API" class="headerlink" title="The SimpleConsumer API"></a>The SimpleConsumer API</h5><p>如果你想要对 patition 有更多的控制权，那就应该使用 SimpleConsumer API，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 多次读取一个消息</span><br><span class="line">2. 只消费一个 patition 中的部分消息</span><br><span class="line">3. 使用事务来保证一个消息仅被消费一次</span><br></pre></td></tr></table></figure><p>但是使用此 API 时，partition、offset、broker、leader 等对你不再透明，需要自己去管理。你需要做大量的额外工作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 必须在应用程序中跟踪 offset，从而确定下一条应该消费哪条消息</span><br><span class="line">2. 应用程序需要通过程序获知每个 Partition 的 leader 是谁</span><br><span class="line">3. 需要处理 leader 的变更</span><br></pre></td></tr></table></figure><p>使用 SimpleConsumer API 的一般流程如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 查找到一个“活着”的 broker，并且找出每个 partition 的 leader</span><br><span class="line">2. 找出每个 partition 的 follower</span><br><span class="line">3. 定义好请求，该请求应该能描述应用程序需要哪些数据</span><br><span class="line">4. fetch 数据</span><br><span class="line">5. 识别 leader 的变化，并对之作出必要的响应</span><br></pre></td></tr></table></figure><blockquote><p>以下针对 high-level Consumer API 进行说明。</p></blockquote><h4 id="consumer-group"><a href="#consumer-group" class="headerlink" title="consumer group"></a>consumer group</h4><p>如 2.2 节所说， kafka 的分配单位是 patition。每个 consumer 都属于一个 group，一个 partition 只能被同一个 group 内的一个 consumer 所消费（也就保障了一个消息只能被 group 内的一个 consuemr 所消费），但是多个 group 可以同时消费这个 partition。</p><p>kafka 的设计目标之一就是同时实现离线处理和实时处理，根据这一特性，可以使用 spark/Storm 这些实时处理系统对消息在线处理，同时使用 Hadoop 批处理系统进行离线处理，还可以将数据备份到另一个数据中心，只需要保证这三者属于不同的 consumer group。如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202113951.png" alt=""></p><h4 id="消费方式"><a href="#消费方式" class="headerlink" title="消费方式"></a>消费方式</h4><p>consumer 采用 pull 模式从 broker 中读取数据。</p><p>push 模式很难适应消费速率不同的消费者，因为消息发送速率是由 broker 决定的。它的目标是尽可能以最快速度传递消息，但是这样很容易造成 consumer 来不及处理消息，典型的表现就是拒绝服务以及网络拥塞。而 pull 模式则可以根据 consumer 的消费能力以适当的速率消费消息。</p><p>对于 Kafka 而言，pull 模式更合适，它可简化 broker 的设计，consumer 可自主控制消费消息的速率，同时 consumer 可以自己控制消费方式——即可批量消费也可逐条消费，同时还能选择不同的提交方式从而实现不同的传输语义。</p><h4 id="consumer-delivery-guarantee"><a href="#consumer-delivery-guarantee" class="headerlink" title="consumer delivery guarantee"></a>consumer delivery guarantee</h4><p>如果将 consumer 设置为 autocommit，consumer 一旦读到数据立即自动 commit。如果只讨论这一读取消息的过程，那 Kafka 确保了 Exactly once。</p><p>但实际使用中应用程序并非在 consumer 读取完数据就结束了，而是要进行进一步处理，而数据处理与 commit 的顺序在很大程度上决定了consumer delivery guarantee：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.读完消息先 commit 再处理消息。</span><br><span class="line">    这种模式下，如果 consumer 在 commit 后还没来得及处理消息就 crash 了，下次重新开始工作后就无法读到刚刚已提交而未处理的消息，这就对应于 At most once</span><br><span class="line">2.读完消息先处理再 commit。</span><br><span class="line">    这种模式下，如果在处理完消息之后 commit 之前 consumer crash 了，下次重新开始工作时还会处理刚刚未 commit 的消息，实际上该消息已经被处理过了。这就对应于 At least once。</span><br><span class="line">3.如果一定要做到 Exactly once，就需要协调 offset 和实际操作的输出。</span><br><span class="line">    精典的做法是引入两阶段提交。如果能让 offset 和操作输入存在同一个地方，会更简洁和通用。这种方式可能更好，因为许多输出系统可能不支持两阶段提交。比如，consumer 拿到数据后可能把数据放到 HDFS，如果把最新的 offset 和数据本身一起写到 HDFS，那就可以保证数据的输出和 offset 的更新要么都完成，要么都不完成，间接实现 Exactly once。（目前就 high-level API而言，offset 是存于Zookeeper 中的，无法存于HDFS，而SimpleConsuemr API的 offset 是由自己去维护的，可以将之存于 HDFS 中）</span><br></pre></td></tr></table></figure><p>总之，Kafka 默认保证 At least once，并且允许通过设置 producer 异步提交来实现 At most once（见文章《kafka consumer防止数据丢失》）。而 Exactly once 要求与外部存储系统协作，幸运的是 kafka 提供的 offset 可以非常直接非常容易得使用这种方式。</p><p>更多关于 kafka 传输语义的信息请参考《Message Delivery Semantics》。</p><h4 id="consumer-rebalance"><a href="#consumer-rebalance" class="headerlink" title="consumer rebalance"></a>consumer rebalance</h4><p>当有 consumer 加入或退出、以及 partition 的改变（如 broker 加入或退出）时会触发 rebalance。consumer rebalance算法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 将目标 topic 下的所有 partirtion 排序，存于PT</span><br><span class="line">2. 对某 consumer group 下所有 consumer 排序，存于 CG，第 i 个consumer 记为 Ci</span><br><span class="line">3. N&#x3D;size(PT)&#x2F;size(CG)，向上取整</span><br><span class="line">4. 解除 Ci 对原来分配的 partition 的消费权（i从0开始）</span><br><span class="line">5. 将第i*N到（i+1）*N-1个 partition 分配给 Ci</span><br></pre></td></tr></table></figure><p>在 0.8.*版本，每个 consumer 都只负责调整自己所消费的 partition，为了保证整个consumer group 的一致性，当一个 consumer 触发了 rebalance 时，该 consumer group 内的其它所有其它 consumer 也应该同时触发 rebalance。这会导致以下几个问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.Herd effect</span><br><span class="line">　　任何 broker 或者 consumer 的增减都会触发所有的 consumer 的 rebalance</span><br><span class="line">2.Split Brain</span><br><span class="line">　　每个 consumer 分别单独通过 zookeeper 判断哪些 broker 和 consumer 宕机了，那么不同 consumer 在同一时刻从 zookeeper 看到的 view 就可能不一样，这是由 zookeeper 的特性决定的，这就会造成不正确的 reblance 尝试。</span><br><span class="line">3. 调整结果不可控</span><br><span class="line">　　所有的 consumer 都并不知道其它 consumer 的 rebalance 是否成功，这可能会导致 kafka 工作在一个不正确的状态。</span><br></pre></td></tr></table></figure><p>基于以上问题，kafka 设计者考虑在0.9.*版本开始使用中心 coordinator 来控制 consumer rebalance，然后又从简便性和验证要求两方面考虑，计划在 consumer 客户端实现分配方案。（见文章《Kafka Detailed Consumer Coordinator Design》和《Kafka Client-side Assignment Proposal》），此处不再赘述。</p><h3 id="七、注意事项"><a href="#七、注意事项" class="headerlink" title="七、注意事项"></a>七、注意事项</h3><h4 id="producer-无法发送消息的问题"><a href="#producer-无法发送消息的问题" class="headerlink" title="producer 无法发送消息的问题"></a>producer 无法发送消息的问题</h4><p>最开始在本机搭建了kafka伪集群，本地 producer 客户端成功发布消息至 broker。随后在服务器上搭建了 kafka 集群，在本机连接该集群，producer 却无法发布消息到 broker（奇怪也没有抛错）。最开始怀疑是 iptables 没开放，于是开放端口，结果还不行（又开始是代码问题、版本问题等等，倒腾了很久）。最后没办法，一项一项查看 server.properties 配置，发现以下两个配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># The address the socket server listens on. It will get the value returned from </span><br><span class="line"># java.net.InetAddress.getCanonicalHostName() if not configured.</span><br><span class="line">#   FORMAT:</span><br><span class="line">#     listeners &#x3D; security_protocol:&#x2F;&#x2F;host_name:port</span><br><span class="line">#   EXAMPLE:</span><br><span class="line">#     listeners &#x3D; PLAINTEXT:&#x2F;&#x2F;your.host.name:9092</span><br><span class="line">listeners&#x3D;PLAINTEXT:&#x2F;&#x2F;:9092</span><br><span class="line"></span><br><span class="line"># Hostname and port the broker will advertise to producers and consumers. If not set, </span><br><span class="line"># it uses the value for &quot;listeners&quot; if configured. Otherwise, it will use the value</span><br><span class="line"># returned from java.net.InetAddress.getCanonicalHostName().</span><br><span class="line"># advertised.listeners&#x3D;PLAINTEXT:&#x2F;&#x2F;your.host.name:9092</span><br></pre></td></tr></table></figure><p>以上说的就是 advertised.listeners 是 broker 给 producer 和 consumer 连接使用的，如果没有设置，就使用 listeners，而如果 host_name 没有设置的话，就使用 java.net.InetAddress.getCanonicalHostName() 方法返回的主机名。</p><p>修改方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. listeners&#x3D;PLAINTEXT:&#x2F;&#x2F;121.10.26.XXX:9092</span><br><span class="line">2. advertised.listeners&#x3D;PLAINTEXT:&#x2F;&#x2F;121.10.26.XXX:9092</span><br></pre></td></tr></table></figure><p>修改后重启服务，正常工作。关于更多 kafka 配置说明，见文章《<a href="http://blog.csdn.net/louisliaoxh/article/details/51516084">Kafka学习整理三(borker(0.9.0及0.10.0)配置)</a>》。</p><h3 id="八、参考相关文章列表"><a href="#八、参考相关文章列表" class="headerlink" title="八、参考相关文章列表"></a>八、参考相关文章列表</h3><blockquote><ol><li><p>《<a href="http://www.infoq.com/cn/articles/kafka-analysis-part-1/">Kafka剖析（一）：Kafka背景及架构介绍</a>》</p></li><li><p>《<a href="http://www.infoq.com/cn/articles/kafka-analysis-part-2/">Kafka设计解析（二）：Kafka High Availability （上）</a>》</p></li><li><p>《<a href="http://www.infoq.com/cn/articles/kafka-analysis-part-3/">Kafka设计解析（二）：Kafka High Availability （下）</a>》</p></li><li><p>《<a href="http://www.infoq.com/cn/articles/kafka-analysis-part-4/">Kafka设计解析（四）：Kafka Consumer解析</a>》</p></li><li><p>《<a href="http://www.infoq.com/cn/articles/kafka-analysis-part-5">Kafka设计解析（五）：Kafka Benchmark</a>》</p></li><li><p>《<a href="http://blog.csdn.net/louisliaoxh/article/details/51516084">Kafka学习整理三(borker(0.9.0及0.10.0)配置)</a>》</p></li><li><p>《<a href="https://cwiki.apache.org/confluence/display/KAFKA/Consumer+Group+Example">Using the High Level Consumer</a>》</p></li><li><p>《<a href="https://cwiki.apache.org/confluence/display/KAFKA/0.8.0+SimpleConsumer+Example">Using SimpleConsumer</a>》</p></li><li><p>《<a href="https://cwiki.apache.org/confluence/display/KAFKA/Consumer+Client+Re-Design">Consumer Client Re-Design</a>》</p></li><li><p>《<a href="http://kafka.apache.org/documentation.html#semantics">Message Delivery Semantics</a>》</p></li><li><p>《<a href="https://cwiki.apache.org/confluence/display/KAFKA/Kafka+Detailed+Consumer+Coordinator+Design#KafkaDetailedConsumerCoordinatorDesign-WARN:Thisisanobsoletedesign.Thedesignthat'simplementedinKafka0.9.0isdescribedinthiswiki.">Kafka Detailed Consumer Coordinator Design</a>》</p></li><li><p>《<a href="https://cwiki.apache.org/confluence/display/KAFKA/Kafka+Client-side+Assignment+Proposal">Kafka Client-side Assignment Proposal</a>》</p></li><li><p>《<a href="http://www.infoq.com/cn/articles/technology-comparison-of-kafka-and-distributedlog?utm_campaign=rightbar_v2&utm_source=infoq&utm_medium=articles_link&utm_content=link_text">Kafka和DistributedLog技术对比</a>》</p></li><li><p>《<a href="http://orchome.com/6">kafka安装和启动</a>》</p></li><li><p>《<a href="http://kane-xie.iteye.com/blog/2225085">kafka consumer防止数据丢失</a>》</p></li></ol></blockquote><p>参考文章:<br><a href="https://www.cnblogs.com/cyfonly/p/5954614.html">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、为什么需要消息系统&quot;&gt;&lt;a href=&quot;#一、为什么需要消息系统&quot; class=&quot;headerlink&quot; title=&quot;一、为什么需要消息系统&quot;&gt;&lt;/a&gt;一、为什么需要消息系统&lt;/h3&gt;&lt;p&gt;1.解耦：&lt;br&gt;    允许你独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束。&lt;br&gt;2.冗余：&lt;br&gt;    消息队列把数据进行持久化直到它们已经被完全处理，通过这一方式规避了数据丢失风险。许多消息队列所采用的”插入-获取-删除”范式中，在把一个消息从队列中删除之前，需要你的处理系统明确的指出该消息已经被处理完毕，从而确保你的数据被安全的保存直到你使用完毕。&lt;br&gt;3.扩展性：&lt;br&gt;    因为消息队列解耦了你的处理过程，所以增大消息入队和处理的频率是很容易的，只要另外增加处理过程即可。
    
    </summary>
    
    
      <category term="架构" scheme="https://removeif.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="Kafka" scheme="https://removeif.github.io/categories/%E6%9E%B6%E6%9E%84/Kafka/"/>
    
    
      <category term="Kafka" scheme="https://removeif.github.io/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Git-rebase-用法示例小结</title>
    <link href="https://removeif.github.io/develop/Git-rebase-%E7%94%A8%E6%B3%95%E7%A4%BA%E4%BE%8B%E5%B0%8F%E7%BB%93.html"/>
    <id>https://removeif.github.io/develop/Git-rebase-%E7%94%A8%E6%B3%95%E7%A4%BA%E4%BE%8B%E5%B0%8F%E7%BB%93.html</id>
    <published>2020-02-02T03:08:07.000Z</published>
    <updated>2020-02-02T03:14:13.789Z</updated>
    
    <content type="html"><![CDATA[<p>看过上一篇文章【<a href="https://removeif.github.io/develop/Git%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E5%9B%9E%E9%80%80%E4%BB%A3%E7%A0%81.html">Git如何优雅地回退代码</a>】的小伙伴们，肯定还有很多跟我一样对rebase的使用还是云里雾里的，这篇文章将使你彻底搞明白怎么使用。<br>rebase在git中是一个非常有魅力的命令，使用得当会极大提高自己的工作效率；相反，如果乱用，会给团队中其他人带来麻烦。它的作用简要概括为：可以对某一段线性提交历史进行编辑、删除、复制、粘贴；因此，合理使用rebase命令可以使我们的提交历史干净、简洁！</p><p>前提：不要通过rebase对任何已经提交到公共仓库中的commit进行修改（你自己一个人玩的分支除外）</p><a id="more"></a><h3 id="一、合并多个commit为一个完整commit"><a href="#一、合并多个commit为一个完整commit" class="headerlink" title="一、合并多个commit为一个完整commit"></a>一、合并多个commit为一个完整commit</h3><p>当我们在本地仓库中提交了多次，在我们把本地提交push到公共仓库中之前，为了让提交记录更简洁明了，我们希望把如下分支B、C、D三个提交记录合并为一个完整的提交，然后再push到公共仓库。</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202105102.png" alt=""></p><p>现在我们在测试分支上添加了四次提交，我们的目标是把最后三个提交合并为一个提交：</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202105128.png" alt=""></p><p>这里我们使用命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i  [startpoint]  [endpoint]</span><br></pre></td></tr></table></figure><p>其中<code>-i</code>的意思是<code>--interactive</code>，即弹出交互式的界面让用户编辑完成合并操作，<code>[startpoint]</code>  <code>[endpoint]</code>则指定了一个编辑区间，如果不指定<code>[endpoint]</code>，则该区间的终点默认是当前分支<code>HEAD</code>所指向的<code>commit</code>(注：该区间指定的是一个前开后闭的区间)。<br> 在查看到了log日志后，我们运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i 36224db</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i HEAD~3</span><br></pre></td></tr></table></figure><p>然后我们会看到如下界面:</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202105240.png" alt=""></p><p>上面未被注释的部分列出的是我们本次rebase操作包含的所有提交，下面注释部分是git为我们提供的命令说明。每一个commit id 前面的<code>pick</code>表示指令类型，git 为我们提供了以下几个命令:</p><blockquote><ul><li>pick：保留该commit（缩写:p）</li><li>reword：保留该commit，但我需要修改该commit的注释（缩写:r）</li><li>edit：保留该commit, 但我要停下来修改该提交(不仅仅修改注释)（缩写:e）</li><li>squash：将该commit和前一个commit合并（缩写:s）</li><li>fixup：将该commit和前一个commit合并，但我不要保留该提交的注释信息（缩写:f）</li><li>exec：执行shell命令（缩写:x）</li><li>drop：我要丢弃该commit（缩写:d）</li></ul></blockquote><p>根据我们的需求，我们将commit内容编辑如下:</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202105338.png" alt=""></p><p>此做法是把后面两次提交都合并到第一次提交里，改完上面的操作后执行vim<code>：wq</code>保存信息，之后会跳出下面的修改注释界面：</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202105547.png" alt=""></p><p>编辑完保存即可完成commit的合并了：</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202105606.png" alt=""></p><h3 id="二、将某一段commit粘贴到另一个分支上"><a href="#二、将某一段commit粘贴到另一个分支上" class="headerlink" title="二、将某一段commit粘贴到另一个分支上"></a>二、将某一段commit粘贴到另一个分支上</h3><p>当我们项目中存在多个分支，有时候我们需要将某一个分支中的一段提交同时应用到其他分支中，就像下图：</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202105647.png" alt=""></p><p>我们希望将develop分支中的C~E部分复制到master分支中，这时我们就可以通过rebase命令来实现（如果只是复制某一两个提交到其他分支，建议使用更简单的命令:<code>git cherry-pick</code>）。<br> 在实际模拟中，我们创建了master和develop两个分支:<br> <strong>master分支:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202105712.png" alt=""></p><p><strong>develop分支:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202105729.png" alt=""></p><p>我们使用命令的形式为:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase   [startpoint]   [endpoint]  --onto  [branchName]</span><br></pre></td></tr></table></figure><p>其中，<code>[startpoint]</code>  <code>[endpoint]</code>仍然和上一个命令一样指定了一个编辑区间(前开后闭)，<code>--onto</code>的意思是要将该指定的提交复制到哪个分支上。<br> 所以，在找到C(90bc0045b)和E(5de0da9f2)的提交id后，我们运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git  rebase   90bc0045b^   5de0da9f2   --onto master</span><br></pre></td></tr></table></figure><p>以上命令有网友补充内容：</p><blockquote><p><a href="https://www.jianshu.com/u/16ee0bbc8425">大帅_8183</a></p><p>15楼 2019.05.26 17:30</p><p>博主，关于你说的“[startpoint] [endpoint]仍然和上一个命令一样指定了一个编辑区间(前开后闭)” ，其中的前开后闭的思维，其实是有歧义的。</p><p>如果一定要用“区间”来表示的话， 那它表示的也一定是一个“前闭后闭”的区间；<br>至于，博主理解的“前开后闭”,其实是博主想使用[startpoint] 这个commit上的功能，但这部分功能本身 就是 上 一个commit提交功能后生成的新的commit(也就是 这里的[startpoint])；</p><p>而原rebase的[startpoint] 的意思是，应该是表示，在此commit开始（[startpoint]）更改的代码部分；</p></blockquote><blockquote><p><a href="https://www.jianshu.com/u/24608a040883">andy_dfa5</a></p><p>5楼 2018.08.13 14:14</p><p>作者写的很好，但是有个小错误，就是rebase是一个开闭集，就是上面例子中 git rebase 90bc0045b^ 5de0da9f2 –onto master。90bc0045b^这个提交是不会生效的，如果要这个生效要从b4d576开始rebase</p></blockquote><p>关于上面的质疑自己动手试下就知道结果了。</p><p>注:因为<code>[startpoint]</code> <code>[endpoint]</code>指定的是一个前开后闭的区间，为了让这个区间包含C提交，我们将区间起始点向后退了一步。<br>运行完成后查看当前分支的日志:</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202105925.png" alt=""></p><p>可以看到，C~E部分的提交内容已经复制到了G的后面了，大功告成？NO！我们看一下当前分支的状态:</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202105950.png" alt=""></p><p>当前HEAD处于游离状态，实际上，此时所有分支的状态应该是这样:</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202110048.png" alt=""></p><p>所以，虽然此时HEAD所指向的内容正是我们所需要的，但是master分支是没有任何变化的，<code>git</code>只是将C~E部分的提交内容复制一份粘贴到了master所指向的提交后面，我们需要做的就是将master所指向的提交id设置为当前HEAD所指向的提交id就可以了，即:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git reset --hard  0c72e64</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202110353.png" alt=""></p><p>此时我们才大功告成！</p><p>参考文章:<br><a href="https://www.jianshu.com/p/4a8f4af4e803">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看过上一篇文章【&lt;a href=&quot;https://removeif.github.io/develop/Git%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E5%9B%9E%E9%80%80%E4%BB%A3%E7%A0%81.html&quot;&gt;Git如何优雅地回退代码&lt;/a&gt;】的小伙伴们，肯定还有很多跟我一样对rebase的使用还是云里雾里的，这篇文章将使你彻底搞明白怎么使用。&lt;br&gt;rebase在git中是一个非常有魅力的命令，使用得当会极大提高自己的工作效率；相反，如果乱用，会给团队中其他人带来麻烦。它的作用简要概括为：可以对某一段线性提交历史进行编辑、删除、复制、粘贴；因此，合理使用rebase命令可以使我们的提交历史干净、简洁！&lt;/p&gt;
&lt;p&gt;前提：不要通过rebase对任何已经提交到公共仓库中的commit进行修改（你自己一个人玩的分支除外）&lt;/p&gt;
    
    </summary>
    
    
      <category term="基础工具类" scheme="https://removeif.github.io/categories/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
      <category term="Git" scheme="https://removeif.github.io/categories/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7%E7%B1%BB/Git/"/>
    
    
      <category term="Git" scheme="https://removeif.github.io/tags/Git/"/>
    
      <category term="rebase" scheme="https://removeif.github.io/tags/rebase/"/>
    
  </entry>
  
  <entry>
    <title>Git如何优雅地回退代码</title>
    <link href="https://removeif.github.io/develop/Git%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E5%9B%9E%E9%80%80%E4%BB%A3%E7%A0%81.html"/>
    <id>https://removeif.github.io/develop/Git%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E5%9B%9E%E9%80%80%E4%BB%A3%E7%A0%81.html</id>
    <published>2020-02-01T13:30:26.000Z</published>
    <updated>2020-02-02T02:00:25.571Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>从接触编程就开始使用 Git 进行代码管理，先是自己玩 Github，又在工作中使用 Gitlab，虽然使用时间挺长，可是也只进行一些常用操作，如推拉代码、提交、合并等，更复杂的操作没有使用过，看过的教程也逐渐淡忘了，有些对不起 Linus 大神。</p><p>出来混总是要还的，前些天就遇到了 Git 里一种十分糟心的场景，并为之前没有深入理解 Git 命令付出了一下午时间的代价。</p><p>先介绍一下这种场景，我们一个项目从 N 版本升到 A 版本时引入了另一项目的 jar 包，又陆续发布了 B、C 版本，但在 C 版本后忽然发现了 A 版本引入的 jar 包有极大的性能问题，B、C 版本都是基于 A 版本发布的，要修复 jar 包性能问题，等 jar 包再发版还得几天，可此时线上又有紧急的 Bug 要修，于是就陷入了进退两难的境地。</p><p>最后决定先将代码回退到 A 版本之前，再基于旧版本修复 Bug，也就开始了五个小时的受苦之路。</p><a id="more"></a><h3 id="基础试探"><a href="#基础试探" class="headerlink" title="基础试探"></a>基础试探</h3><h4 id="revert"><a href="#revert" class="headerlink" title="revert"></a>revert</h4><p>首先肯定的是 revert，<code>git revert commit_id</code> 能产生一个 与 commit_id 完全相反的提交，即 commit_id 里是添加， revert 提交里就是删除。</p><p>但是使用 git log 查看了提交记录后，我就打消了这种想法，因为提交次数太多了，中途还有几次从其他分支的 merge 操作。</p><p>”利益于”我们不太干净的提交记录，要完成从 C 版本到 N 版本的 revert，我需要倒序执行 revert 操作几十次，如果其中顺序错了一次，最终结果可能就是不对的。</p><p>另外我们知道我们在进行代码 merge 时，也会把 merge 信息产生一次新的提交，而 revert 这次 merge commit 时需要指定 m 参数，以指定 <code>mainline</code></p><p>这个 mainline 是主线，也是我们要保留代码的主分支，从 feature 分支往 develop 分支合并，或由 develop 分支合并到 master 的提交还好确定，但 feature 分支互相合并时，我哪知道哪个是主线啊。</p><p>所以 revert 的文案被废弃了。</p><h4 id="Reset"><a href="#Reset" class="headerlink" title="Reset"></a>Reset</h4><p>然后就考虑 <code>reset</code> 了， reset 也能使代码回到某次提交，但跟 revert 不同的是， reset 是将提交的 HEAD 指针指到某次提交，之后的提交记录会消失，就像从没有过这么一次提交。</p><p>但由于我们都在 feature 分支开发，我在 feature 分支上将代码回退到某次提交后，将其合并到 develop 分支时却被提示报错。</p><p>这是因为 feature 分支回退了提交后，在 git 的 workflow 里，feature 分支是落后于 develop 分支的，而合并向 develop 分支，又需要和 develop 分支保持最新的同步，需要将 develop 分支的数据合并到 feature 分支上，而合并后，原来被 reset 的代码又回来了。</p><p>这个时候另一个可选项是在 master 分支上执行 reset，使用 <code>--hard</code> 选项完全抛弃这些旧代码，reset 后再强制推到远端。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">master&gt; git reset --hard commit_id</span><br><span class="line">master&gt; git push --force origin master</span><br></pre></td></tr></table></figure><p>但是还是有问题，首先，我们的 master 分支在 gitlab 里是被保护的，不能使用 force push，毕竟风险挺大了，万一有人 reset 到最开始的提交再强制 push 的话，虽然可以使用 <code>reflog</code> 恢复，但也是一番折腾。</p><p>另外，reset 毕竟太野蛮，我们还是想能保留提交历史，以后排查问题也可以参考。</p><h3 id="升级融合"><a href="#升级融合" class="headerlink" title="升级融合"></a>升级融合</h3><h4 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h4><p>只好用搜索引擎继续搜索，看到有人提出可以先使用 <code>rebase</code> 把多个提交合并成一个提交，再使用 revert 产生一次反提交，这种方法的思路非常清晰，把 revert 和 rebase 两个命令搭配得很好，相当于使用 revert 回退的升级版。</p><p>先说一下 rebase，<strong>rebase</strong> 是”变基”的意思，这里的”基”，在我理解是指[多次] commit 形成的 git workflow，使用 rebase，我们可以改变这些历史提交，修改 commit 信息，将多个 commit 进行组合。</p><p>介绍 rebase 的文档有很多，我们直接来说用它来进行代码回退的步骤。</p><ol><li><p>首先，切出一个新分支 F，使用 git log 查询一下<code>要回退到</code>的 commit 版本 N。</p></li><li><p>使用命令 <code>git rebase -i N</code>， -i 指定交互模式后，会打开 git rebase 编辑界面，形如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pick 6fa5869 commit1</span><br><span class="line">pick 0b84ee7 commit2</span><br><span class="line">pick 986c6c8 commit3</span><br><span class="line">pick 91a0dcc commit4</span><br></pre></td></tr></table></figure></li><li><p>这些 commit 自旧到新由上而下排列，我们只需要在 commit_id 前添加操作命令即可。</p><p>在合并 commit 这个需求里，我们可以选择 <code>pick(p)</code> 最旧的 commit1，然后在后续的 commit_id 前添加 <code>squash(s)</code> 命令，将这些 commits 都合并到最旧的 commit1 上。</p></li><li><p>保存 rebase 结果后，再编辑 commit 信息，使这次 rebase 失效，git 会将之前的这些 commit 都删除，并将其更改合并为一个新的 commit5</p><p>如果出错了，也可以使用 <code>git rebase --abort/--continue/--edit-todo``</code>对之前的编辑进行撤销、继续编辑。</p></li><li><p>这个时候，主分支上的提交记录是 <code>older, commit1, commit2, commit3, commit4</code></p><p>而 F 分支上的提交记录是 <code>older, commit5</code>，由于 F 分支的祖先节点是 older，明显落后于主分支的 commit4，将 F 分支向主分支合并是不允许的</p><p>所以我们需要执行 <code>git merge master</code> 将主分支向 F 分支合并，合并后 git 会发现 commit1 到 commit4 提交的内容和 F 分支上 commit5 的修改内容是完全相同的，会自动进行合并，内容不变，但多了一个 commit5。</p></li><li><p>再在 F 分支上对 commit5 进行一次 revert 反提交，就实现了把 commit1 到 commit4 的提交全部回退。</p></li></ol><p>这种方法的取巧之处在于巧妙地利用了 rebase 操作历史提交的功能和 git 识别修改相同自动合并的特性，操作虽然复杂，但历史提交保留得还算完整。</p><p>rebase 这种修改历史提交的功能非常实用，能够很好地解决我们遇到的一个小功能提交了好多次才好使，而把 git 历史弄得乱七八糟的问题，只需要注意避免在多人同时开发的分支使用就行了。</p><p>遗憾的是，当天我并没有理解到 rebase 的这种思想，又由于试了几个方法都不行太过于慌乱，在 rebase 完成后，向主分支合并被拒之后对这些方式的可行性产生了怀疑，又加上有同事提出听起来更可行的方式，就中断了操作。</p><h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><p>这种更可行的方式就是对文件操作，然后让 git 来识别变更，具体是：</p><ol><li>从主分支上切出一个跟主分支完全相同的分支 F。</li><li>从文件管理系统复制项目文件夹为 bak，在 bak 内使用 <code>git checkout N</code> 将代码切到想要的历史提交，这时候 git 会将 bak 内的文件恢复到 N 状态。</li><li>在从文件管理系统内，将 bak 文件夹下 <code>除了 .git</code> 文件夹下的所有内容复制粘贴到原项目目录下。git 会纯从文件级别识别到变更，然后更新工作区。</li><li>在原项目目录下执行 <code>add 和 commit</code>，完成反提交。</li></ol><p>这种方式的巧妙之处在于利用 git 本身对文件的识别，不牵涉到对 workflow 操作。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>最后终于靠着文件操作方式成功完成了代码回退，事后想来真是一把心酸泪。</p><p>为了让我的五个小时不白费，复盘一下当时的场景，学习并总结一下四种代码回退的方式：</p><ul><li>revert 适合需要回退的历史提交不多，且无合并冲突的情景。</li><li>如果你可以向 master 强推代码，且想让 git log 里不再出现被回退代码的痕迹，可以使用 <code>git reset --hard + git push --force``</code>的方式。</li><li>如果你有些 geek，追求用”正规而正统”的方式来回退代码，rebase + revert 满足你的需求。</li><li>如果你不在乎是否优雅，想用最简单，最直接的方式，文件操作正合适。</li></ul><p>git 真的是非常牛逼的代码管理工具，入手简单，三五个命令组合起来就足够完成工作需求，又对 geeker 们非常友好，你想要的骚操作它都支持，学无止境啊。</p><p>参考文章:<br><a href="https://mp.weixin.qq.com/s/R2FC922c49bS4CaWd47mug">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;从接触编程就开始使用 Git 进行代码管理，先是自己玩 Github，又在工作中使用 Gitlab，虽然使用时间挺长，可是也只进行一些常用操作，如推拉代码、提交、合并等，更复杂的操作没有使用过，看过的教程也逐渐淡忘了，有些对不起 Linus 大神。&lt;/p&gt;
&lt;p&gt;出来混总是要还的，前些天就遇到了 Git 里一种十分糟心的场景，并为之前没有深入理解 Git 命令付出了一下午时间的代价。&lt;/p&gt;
&lt;p&gt;先介绍一下这种场景，我们一个项目从 N 版本升到 A 版本时引入了另一项目的 jar 包，又陆续发布了 B、C 版本，但在 C 版本后忽然发现了 A 版本引入的 jar 包有极大的性能问题，B、C 版本都是基于 A 版本发布的，要修复 jar 包性能问题，等 jar 包再发版还得几天，可此时线上又有紧急的 Bug 要修，于是就陷入了进退两难的境地。&lt;/p&gt;
&lt;p&gt;最后决定先将代码回退到 A 版本之前，再基于旧版本修复 Bug，也就开始了五个小时的受苦之路。&lt;/p&gt;
    
    </summary>
    
    
      <category term="基础工具类" scheme="https://removeif.github.io/categories/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
      <category term="Git" scheme="https://removeif.github.io/categories/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7%E7%B1%BB/Git/"/>
    
    
      <category term="Git" scheme="https://removeif.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Spring的Bean生命周期</title>
    <link href="https://removeif.github.io/java/frame/Spring%E7%9A%84Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html"/>
    <id>https://removeif.github.io/java/frame/Spring%E7%9A%84Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html</id>
    <published>2020-01-31T10:23:32.000Z</published>
    <updated>2020-02-02T02:00:25.580Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、获取Bean"><a href="#一、获取Bean" class="headerlink" title="一、获取Bean"></a>一、获取Bean</h3><h4 id="第一阶段获取Bean"><a href="#第一阶段获取Bean" class="headerlink" title="第一阶段获取Bean"></a>第一阶段获取Bean</h4><p>这里的流程图的入口在 <code>AbstractBeanFactory</code>类的 <code>doGetBean</code>方法，这里可以配合前面的 getBean方法分析文章进行阅读。主要流程就是</p><p><strong>1、</strong>先处理Bean 的名称，因为如果以“&amp;”开头的Bean名称表示获取的是对应的FactoryBean对象；<br><strong>2、</strong>从缓存中获取单例Bean，有则进一步判断这个Bean是不是在创建中，如果是的就等待创建完毕，否则直接返回这个Bean对象<br><strong>3、</strong>如果不存在单例Bean缓存，则先进行循环依赖的解析<br><strong>4、</strong>解析完毕之后先获取父类BeanFactory，获取到了则调用父类的getBean方法，不存在则先合并然后创建Bean</p><a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200131172749.png" alt=""></p><h3 id="二、创建Bean"><a href="#二、创建Bean" class="headerlink" title="二、创建Bean"></a>二、创建Bean</h3><h4 id="创建Bean之前"><a href="#创建Bean之前" class="headerlink" title="创建Bean之前"></a>创建Bean之前</h4><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200131173132.png" alt=""></p><h4 id="在真正创建Bean之前逻辑"><a href="#在真正创建Bean之前逻辑" class="headerlink" title="在真正创建Bean之前逻辑"></a>在真正创建Bean之前逻辑</h4><p>这个流程图对应的代码在 <code>AbstractAutowireCapableBeanFactory</code>类的 <code>createBean</code>方法中。</p><p><strong>1、</strong>这里会先获取 <code>RootBeanDefinition</code>对象中的Class对象并确保已经关联了要创建的Bean的Class 。<br><strong>2、</strong>这里会检查3个条件</p><p>（1）Bean的属性中的 <code>beforeInstantiationResolved</code>字段是否为true，默认是false。<br>（2）Bean是原生的Bean<br>（3）Bean的 <code>hasInstantiationAwareBeanPostProcessors</code>属性为true，这个属性在Spring准备刷新容器钱转杯BeanPostProcessors的时候会设置，如果当前Bean实现了 <code>InstantiationAwareBeanPostProcessor</code>则这个就会是true。</p><p>当三个条件都存在的时候，就会调用实现的 <code>InstantiationAwareBeanPostProcessor</code>接口的 <code>postProcessBeforeInstantiation</code>方法，然后获取返回的Bean，如果返回的Bean不是null还会调用实现的 <code>BeanPostProcessor</code>接口的 <code>postProcessAfterInitialization</code>方法，这里用代码说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object  <span class="title">resolveBeforeInstantiation</span><span class="params">(String beanName,RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Object bean = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//条件1</span></span><br><span class="line">        <span class="keyword">if</span>(! Boolean.FALSE.equals(mbd.beforeInstantiationResolved)) &#123;</span><br><span class="line">            <span class="comment">//条件2跟条件3</span></span><br><span class="line">            <span class="keyword">if</span>(!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">                Class&lt;?&gt; targetType = determineTargetType(beanName, mbd);</span><br><span class="line">                <span class="keyword">if</span>(targetType != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//调用实现的postProcessBeforeInstantiation方法</span></span><br><span class="line">                    bean = applyBeanPostProcessorsBeforeInstantiation(targetType, beanName);</span><br><span class="line">                    <span class="keyword">if</span>(bean != <span class="keyword">null</span> ) &#123;</span><br><span class="line">                    <span class="comment">//调用实现的postProcessAfterInitialization方法</span></span><br><span class="line">                        bean = applyBeanPostProcessorsAfterInitialization(bean, beanName);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//不满足2或者3的时候就会设置为false</span></span><br><span class="line">            mbd.beforeInstantiationResolved = (bean != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果上面3个条件其中一个不满足就不会调用实现的方法。默认这里都不会调用的这些 <code>BeanPostProcessors</code>的实现方法。然后继续执行后面的 <code>doCreateBean</code>方法。</p><h4 id="真正的创建Bean，doCreateBean"><a href="#真正的创建Bean，doCreateBean" class="headerlink" title="真正的创建Bean，doCreateBean"></a>真正的创建Bean，doCreateBean</h4><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200131174146.png" alt=""></p><h4 id="doCreateBean方法逻辑"><a href="#doCreateBean方法逻辑" class="headerlink" title="doCreateBean方法逻辑"></a>doCreateBean方法逻辑</h4><p>这个代码的实现还是在 <code>AbstractAutowireCapableBeanFactory</code>方法中。流程是</p><p><strong>1、</strong>先检查 <code>instanceWrapper</code>变量是不是null，这里一般是null，除非当前正在创建的Bean在 <code>factoryBeanInstanceCache</code>中存在这个是保存还没创建完成的FactoryBean的集合。<br><strong>2、</strong>调用createBeanInstance方法实例化Bean，这个方法在后面会讲解<br><strong>3、</strong>如果当前 <code>RootBeanDefinition</code>对象还没有调用过实现了的 <code>MergedBeanDefinitionPostProcessor</code>接口的方法，则会进行调用 。<br><strong>4、</strong> 当满足以下三点<br>（1）是单例Bean<br>（2）尝试解析bean之间的循环引用<br>（3）bean目前正在创建中<br>则会进一步检查是否实现了 <code>SmartInstantiationAwareBeanPostProcessor</code>接口如果实现了则调用是实现的 <code>getEarlyBeanReference</code>方法5、 调用 <code>populateBean</code>方法进行属性填充，这里后面会讲解6、 调用 <code>initializeBean</code>方法对Bean进行初始化，这里后面会讲解</p><h4 id="实例化Bean，createBeanInstance"><a href="#实例化Bean，createBeanInstance" class="headerlink" title="实例化Bean，createBeanInstance"></a>实例化Bean，createBeanInstance</h4><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200131174320.png" alt=""></p><h4 id="实例化Bean"><a href="#实例化Bean" class="headerlink" title="实例化Bean"></a>实例化Bean</h4><p>这里的逻辑稍微有一点复杂，这个流程图已经是简化过后的了。简要根据代码说明一下流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> BeanWrapper <span class="title">createBeanInstance</span><span class="params">(String beanName, RootBeanDefinition mbd, Object[] args)</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt; beanClass = <span class="keyword">this</span>.resolveBeanClass(mbd, beanName, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span> (beanClass != <span class="keyword">null</span> &amp;&amp; !Modifier.isPublic(beanClass.getModifiers()) &amp;&amp; !mbd.isNonPublicAccessAllowed()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName, <span class="string">"Bean class isn't public, and non-public access not allowed: "</span> + beanClass.getName());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mbd.getFactoryMethodName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.instantiateUsingFactoryMethod(beanName, mbd, args);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">boolean</span> resolved = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">boolean</span> autowireNecessary = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (args == <span class="keyword">null</span>) &#123;</span><br><span class="line">                Object var7 = mbd.constructorArgumentLock;</span><br><span class="line">                <span class="keyword">synchronized</span>(mbd.constructorArgumentLock) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mbd.resolvedConstructorOrFactoryMethod != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        resolved = <span class="keyword">true</span>;</span><br><span class="line">                        autowireNecessary = mbd.constructorArgumentsResolved;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (resolved) &#123;</span><br><span class="line">                <span class="keyword">return</span> autowireNecessary ? <span class="keyword">this</span>.autowireConstructor(beanName, mbd, (Constructor[])<span class="keyword">null</span>, (Object[])<span class="keyword">null</span>) : <span class="keyword">this</span>.instantiateBean(beanName, mbd);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Constructor&lt;?&gt;[] ctors = <span class="keyword">this</span>.determineConstructorsFromBeanPostProcessors(beanClass, beanName);</span><br><span class="line">                <span class="keyword">return</span> ctors == <span class="keyword">null</span> &amp;&amp; mbd.getResolvedAutowireMode() != <span class="number">3</span> &amp;&amp; !mbd.hasConstructorArgumentValues() &amp;&amp; ObjectUtils.isEmpty(args) ? <span class="keyword">this</span>.instantiateBean(beanName, mbd) : <span class="keyword">this</span>.autowireConstructor(beanName, mbd, ctors, args);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>1、</strong>先检查Class是否已经关联了，并且对应的修饰符是否是public的<br><strong>2、</strong>如果用户定义了Bean实例化的函数，则调用并返回<br><strong>3、</strong>如果当前Bean实现了 <code>FactoryBean</code>接口则调用对应的 <code>FactoryBean</code>接口的 <code>getObject</code>方法<br><strong>4、</strong>根据getBean时候是否传入构造参数进行处理<br><strong>4.1</strong> 如果没有传入构造参数，则检查是否存在已经缓存的无参构造器，有则使用构造器直接创建，没有就会调用 <code>instantiateBean</code>方法先获取实例化的策略默认是 <code>CglibSubclassingInstantiationStrategy</code>，然后实例化Bean。最后返回<br><strong>4.2</strong> 如果传入了构造参数，则会先检查是否实现了 <code>SmartInstantiationAwareBeanPostProcessor</code>接口，如果实现了会调用 <code>determineCandidateConstructors</code>获取返回的候选构造器。<br><strong>4.3</strong> 检查4个条件是否满足一个<br>（1）构造器不为null，<br>（2）从RootBeanDefinition中获取到的关联的注入方式是构造器注入（没有构造参数就是setter注入，有则是构造器注入）<br>（3）含有构造参数<br>（4）getBean方法传入构造参数不是空</p><p>满足其中一个则会调用返回的候选构造器实例化Bean并返回，如果都不满足，则会根据构造参数选则合适的有参构造器然后实例化Bean并返回</p><p><strong>5、</strong>如果上面都没有合适的构造器，则直接使用无参构造器创建并返回Bean。</p><h4 id="填充Bean，populateBean"><a href="#填充Bean，populateBean" class="headerlink" title="填充Bean，populateBean"></a>填充Bean，populateBean</h4><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200131175228.png" alt=""></p><h4 id="填充Bean"><a href="#填充Bean" class="headerlink" title="填充Bean"></a>填充Bean</h4><p>这里还是根据代码来说一下流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">populateBean</span><span class="params">(String beanName, RootBeanDefinition mbd, BeanWrapper bw)</span> </span>&#123;</span><br><span class="line">        PropertyValues pvs = mbd.getPropertyValues();</span><br><span class="line">        <span class="keyword">if</span> (bw == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!((PropertyValues)pvs).isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName, <span class="string">"Cannot apply property values to null instance"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">boolean</span> continueWithPropertyPopulation = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (!mbd.isSynthetic() &amp;&amp; <span class="keyword">this</span>.hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">                Iterator var6 = <span class="keyword">this</span>.getBeanPostProcessors().iterator();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(var6.hasNext()) &#123;</span><br><span class="line">                    BeanPostProcessor bp = (BeanPostProcessor)var6.next();</span><br><span class="line">                    <span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                        InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor)bp;</span><br><span class="line">                        <span class="keyword">if</span> (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) &#123;</span><br><span class="line">                            continueWithPropertyPopulation = <span class="keyword">false</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (continueWithPropertyPopulation) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mbd.getResolvedAutowireMode() == <span class="number">1</span> || mbd.getResolvedAutowireMode() == <span class="number">2</span>) &#123;</span><br><span class="line">                    MutablePropertyValues newPvs = <span class="keyword">new</span> MutablePropertyValues((PropertyValues)pvs);</span><br><span class="line">                    <span class="keyword">if</span> (mbd.getResolvedAutowireMode() == <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.autowireByName(beanName, mbd, bw, newPvs);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (mbd.getResolvedAutowireMode() == <span class="number">2</span>) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.autowireByType(beanName, mbd, bw, newPvs);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    pvs = newPvs;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">boolean</span> hasInstAwareBpps = <span class="keyword">this</span>.hasInstantiationAwareBeanPostProcessors();</span><br><span class="line">                <span class="keyword">boolean</span> needsDepCheck = mbd.getDependencyCheck() != <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (hasInstAwareBpps || needsDepCheck) &#123;</span><br><span class="line">                    PropertyDescriptor[] filteredPds = <span class="keyword">this</span>.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class="line">                    <span class="keyword">if</span> (hasInstAwareBpps) &#123;</span><br><span class="line">                        Iterator var9 = <span class="keyword">this</span>.getBeanPostProcessors().iterator();</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">while</span>(var9.hasNext()) &#123;</span><br><span class="line">                            BeanPostProcessor bp = (BeanPostProcessor)var9.next();</span><br><span class="line">                            <span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                                InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor)bp;</span><br><span class="line">                                pvs = ibp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);</span><br><span class="line">                                <span class="keyword">if</span> (pvs == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                    <span class="keyword">return</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (needsDepCheck) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.checkDependencies(beanName, mbd, filteredPds, (PropertyValues)pvs);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.applyPropertyValues(beanName, mbd, bw, (PropertyValues)pvs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>1、</strong>检查当前Bean是否实现了 <code>InstantiationAwareBeanPostProcessor</code>的 <code>postProcessAfterInstantiation</code>方法则调用，并结束Bean的填充。<br><strong>2、</strong>将按照类型跟按照名称注入的Bean分开，如果注入的Bean还没有实例化的这里会实例化，然后放到 <code>PropertyValues</code>对象中。<br><strong>3、</strong>如果实现了 <code>InstantiationAwareBeanPostProcessor</code>类的 <code>postProcessProperties</code>则调用这个方法并获取返回值，如果返回值是null，则有可能是实现了过期的 <code>postProcessPropertyValues</code>方法，这里需要进一步调用 <code>postProcessPropertyValues</code>方法<br><strong>4、</strong>进行参数填充</p><h4 id="初始化Bean，initializeBean"><a href="#初始化Bean，initializeBean" class="headerlink" title="初始化Bean，initializeBean"></a>初始化Bean，initializeBean</h4><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200131175430.png" alt=""></p><h4 id="初始化Bean"><a href="#初始化Bean" class="headerlink" title="初始化Bean"></a>初始化Bean</h4><p>同时这里根据代码跟流程图来说明</p><p><strong>1、</strong>如果Bean实现了 <code>BeanNameAware</code>, <code>BeanClassLoaderAware</code>, <code>BeanFactoryAware</code>则调用对应实现的方法 。<br><strong>2、</strong>Bean不为null并且bean不是合成的，如果实现了 <code>BeanPostProcessor</code>的 <code>postProcessBeforeInitialization</code>则会调用实现的 <code>postProcessBeforeInitialization</code>方法。在 <code>ApplicationContextAwareProcessor</code>类中实现了 <code>postProcessBeforeInitialization</code>方法。而这个类会在Spring刷新容器准备 <code>beanFactory</code>的时候会加进去，这里就会被调用，而调用里面会检查Bean是不是 <code>EnvironmentAware</code>, <code>EmbeddedValueResolverAware</code>, <code>ResourceLoaderAware</code>, <code>ApplicationEventPublisherAware</code>, <code>MessageSourceAware</code>, <code>ApplicationContextAware</code>的实现类。这里就会调用对应的实现方法。代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">prepareBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">        beanFactory.setBeanClassLoader(<span class="keyword">this</span>.getClassLoader());</span><br><span class="line">        beanFactory.setBeanExpressionResolver(<span class="keyword">new</span> StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));</span><br><span class="line">        beanFactory.addPropertyEditorRegistrar(<span class="keyword">new</span> ResourceEditorRegistrar(<span class="keyword">this</span>, <span class="keyword">this</span>.getEnvironment()));</span><br><span class="line">        beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationContextAwareProcessor(<span class="keyword">this</span>));</span><br><span class="line">        beanFactory.ignoreDependencyInterface(ResourceLoaderAware<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        beanFactory.ignoreDependencyInterface(MessageSourceAware<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        beanFactory.ignoreDependencyInterface(ApplicationContextAware<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        beanFactory.ignoreDependencyInterface(EnvironmentAware<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        beanFactory.registerResolvableDependency(BeanFactory<span class="class">.<span class="keyword">class</span>, <span class="title">beanFactory</span>)</span>;</span><br><span class="line">        beanFactory.registerResolvableDependency(ResourceLoader<span class="class">.<span class="keyword">class</span>, <span class="title">this</span>)</span>;</span><br><span class="line">        beanFactory.registerResolvableDependency(ApplicationEventPublisher<span class="class">.<span class="keyword">class</span>, <span class="title">this</span>)</span>;</span><br><span class="line">        beanFactory.registerResolvableDependency(ApplicationContext<span class="class">.<span class="keyword">class</span>, <span class="title">this</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (beanFactory.containsBean(<span class="string">"loadTimeWeaver"</span>)) &#123;</span><br><span class="line">            beanFactory.addBeanPostProcessor(<span class="keyword">new</span> LoadTimeWeaverAwareProcessor(beanFactory));</span><br><span class="line">            beanFactory.setTempClassLoader(<span class="keyword">new</span> ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!beanFactory.containsLocalBean(<span class="string">"environment"</span>)) &#123;</span><br><span class="line">            beanFactory.registerSingleton(<span class="string">"environment"</span>, <span class="keyword">this</span>.getEnvironment());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!beanFactory.containsLocalBean(<span class="string">"systemProperties"</span>)) &#123;</span><br><span class="line">            beanFactory.registerSingleton(<span class="string">"systemProperties"</span>, <span class="keyword">this</span>.getEnvironment().getSystemProperties());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!beanFactory.containsLocalBean(<span class="string">"systemEnvironment"</span>)) &#123;</span><br><span class="line">            beanFactory.registerSingleton(<span class="string">"systemEnvironment"</span>, <span class="keyword">this</span>.getEnvironment().getSystemEnvironment());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(<span class="keyword">final</span> Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        AccessControlContext acc = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span> &amp;&amp; (bean <span class="keyword">instanceof</span> EnvironmentAware || bean <span class="keyword">instanceof</span> EmbeddedValueResolverAware || bean <span class="keyword">instanceof</span> ResourceLoaderAware || bean <span class="keyword">instanceof</span> ApplicationEventPublisherAware || bean <span class="keyword">instanceof</span> MessageSourceAware || bean <span class="keyword">instanceof</span> ApplicationContextAware)) &#123;</span><br><span class="line">            acc = <span class="keyword">this</span>.applicationContext.getBeanFactory().getAccessControlContext();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (acc != <span class="keyword">null</span>) &#123;</span><br><span class="line">            AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Object&gt;() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    ApplicationContextAwareProcessor.<span class="keyword">this</span>.invokeAwareInterfaces(bean);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, acc);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.invokeAwareInterfaces(bean);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>1、</strong>实例化Bean然后，检查是否实现了 <code>InitializingBean</code>的 <code>afterPropertiesSet</code>方法，如果实现了就会调用<br><strong>2、</strong>Bean不为null并且bean不是合成的，如果实现了 <code>BeanPostProcessor</code>的 <code>postProcessBeforeInitialization</code>则会调用实现的 <code>postProcessAfterInitialization</code>方法。</p><p>到此创建Bean 的流程就没了，剩下的就是容器销毁的时候的了</p><h3 id="三、destory方法跟销毁Bean"><a href="#三、destory方法跟销毁Bean" class="headerlink" title="三、destory方法跟销毁Bean"></a>三、destory方法跟销毁Bean</h3><p>Bean在创建完毕之后会检查用户是否指定了 <code>destroyMethodName</code>以及是否实现了 <code>DestructionAwareBeanPostProcessor</code>接口的 <code>requiresDestruction</code>方法，如果指定了会记录下来保存在 <code>DisposableBeanAdapter</code>对象中并保存在bean的 <code>disposableBeans</code>属性中。代码在 <code>AbstractBeanFactory</code>的 <code>registerDisposableBeanIfNecessary</code>中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerDisposableBeanIfNecessary</span><span class="params">(String beanName, Object bean, RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line">        AccessControlContext acc = System.getSecurityManager() != <span class="keyword">null</span> ? <span class="keyword">this</span>.getAccessControlContext() : <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (!mbd.isPrototype() &amp;&amp; <span class="keyword">this</span>.requiresDestruction(bean, mbd)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">                <span class="keyword">this</span>.registerDisposableBean(beanName, <span class="keyword">new</span> DisposableBeanAdapter(bean, beanName, mbd, <span class="keyword">this</span>.getBeanPostProcessors(), acc));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Scope scope = (Scope)<span class="keyword">this</span>.scopes.get(mbd.getScope());</span><br><span class="line">                <span class="keyword">if</span> (scope == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"No Scope registered for scope name '"</span> + mbd.getScope() + <span class="string">"'"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                scope.registerDestructionCallback(beanName, <span class="keyword">new</span> DisposableBeanAdapter(bean, beanName, mbd, <span class="keyword">this</span>.getBeanPostProcessors(), acc));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DisposableBeanAdapter</span><span class="params">(Object bean, String beanName, RootBeanDefinition beanDefinition, List&lt;BeanPostProcessor&gt; postProcessors, AccessControlContext acc)</span> </span>&#123;</span><br><span class="line">        Assert.notNull(bean, <span class="string">"Disposable bean must not be null"</span>);</span><br><span class="line">        <span class="keyword">this</span>.bean = bean;</span><br><span class="line">        <span class="keyword">this</span>.beanName = beanName;</span><br><span class="line">        <span class="keyword">this</span>.invokeDisposableBean = <span class="keyword">this</span>.bean <span class="keyword">instanceof</span> DisposableBean &amp;&amp; !beanDefinition.isExternallyManagedDestroyMethod(<span class="string">"destroy"</span>);</span><br><span class="line">        <span class="keyword">this</span>.nonPublicAccessAllowed = beanDefinition.isNonPublicAccessAllowed();</span><br><span class="line">        <span class="keyword">this</span>.acc = acc;</span><br><span class="line">        String destroyMethodName = <span class="keyword">this</span>.inferDestroyMethodIfNecessary(bean, beanDefinition);</span><br><span class="line">        <span class="keyword">if</span> (destroyMethodName != <span class="keyword">null</span> &amp;&amp; (!<span class="keyword">this</span>.invokeDisposableBean || !<span class="string">"destroy"</span>.equals(destroyMethodName)) &amp;&amp; !beanDefinition.isExternallyManagedDestroyMethod(destroyMethodName)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.destroyMethodName = destroyMethodName;</span><br><span class="line">            <span class="keyword">this</span>.destroyMethod = <span class="keyword">this</span>.determineDestroyMethod();</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.destroyMethod == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (beanDefinition.isEnforceDestroyMethod()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionValidationException(<span class="string">"Couldn't find a destroy method named '"</span> + destroyMethodName + <span class="string">"' on bean with name '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Class&lt;?&gt;[] paramTypes = <span class="keyword">this</span>.destroyMethod.getParameterTypes();</span><br><span class="line">                <span class="keyword">if</span> (paramTypes.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionValidationException(<span class="string">"Method '"</span> + destroyMethodName + <span class="string">"' of bean '"</span> + beanName + <span class="string">"' has more than one parameter - not supported as destroy method"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (paramTypes.length == <span class="number">1</span> &amp;&amp; Boolean.TYPE != paramTypes[<span class="number">0</span>]) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionValidationException(<span class="string">"Method '"</span> + destroyMethodName + <span class="string">"' of bean '"</span> + beanName + <span class="string">"' has a non-boolean parameter - not supported as destroy method"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.beanPostProcessors = <span class="keyword">this</span>.filterPostProcessors(postProcessors, bean);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在销毁Bean的时候最后都会调用 <code>AbstractAutowireCapableBeanFactory</code>的 <code>destroyBean</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyBean</span><span class="params">(Object existingBean)</span> </span>&#123;</span><br><span class="line">    (<span class="keyword">new</span> DisposableBeanAdapter(existingBean, <span class="keyword">this</span>.getBeanPostProcessors(), <span class="keyword">this</span>.getAccessControlContext())).destroy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是创建一个 <code>DisposableBeanAdapter</code>对象，这个对象实现了Runnable接口，在实现的 <code>run</code>方法中会调用实现的 <code>DisposableBean</code>接口的 <code>destroy</code>方法。并且在创建 <code>DisposableBeanAdapter</code>对象的时候会根据传入的bean是否实现了 <code>DisposableBean</code>接口来设置 <code>invokeDisposableBean</code>变量，这个变量表实有没有实现 <code>DisposableBean</code>接口</p><figure class="highlight java"><figcaption><span>DisposableBeanAdapter.java >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DisposableBeanAdapter</span><span class="params">(Object bean, List&lt;BeanPostProcessor&gt; postProcessors, AccessControlContext acc)</span> </span>&#123;</span><br><span class="line">        Assert.notNull(bean, <span class="string">"Disposable bean must not be null"</span>);</span><br><span class="line">        <span class="keyword">this</span>.bean = bean;</span><br><span class="line">        <span class="keyword">this</span>.beanName = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.invokeDisposableBean = <span class="keyword">this</span>.bean <span class="keyword">instanceof</span> DisposableBean;</span><br><span class="line">        <span class="keyword">this</span>.nonPublicAccessAllowed = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.acc = acc;</span><br><span class="line">        <span class="keyword">this</span>.beanPostProcessors = <span class="keyword">this</span>.filterPostProcessors(postProcessors, bean);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.destroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(<span class="keyword">this</span>.beanPostProcessors)) &#123;</span><br><span class="line">            Iterator var1 = <span class="keyword">this</span>.beanPostProcessors.iterator();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(var1.hasNext()) &#123;</span><br><span class="line">                DestructionAwareBeanPostProcessor processor = (DestructionAwareBeanPostProcessor)var1.next();</span><br><span class="line">                processor.postProcessBeforeDestruction(<span class="keyword">this</span>.bean, <span class="keyword">this</span>.beanName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.invokeDisposableBean) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="string">"Invoking destroy() on bean with name '"</span> + <span class="keyword">this</span>.beanName + <span class="string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedExceptionAction&lt;Object&gt;() &#123;</span><br><span class="line">                        <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ((DisposableBean)DisposableBeanAdapter.<span class="keyword">this</span>.bean).destroy();</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, <span class="keyword">this</span>.acc);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ((DisposableBean)<span class="keyword">this</span>.bean).destroy();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">                String msg = <span class="string">"Invocation of destroy method failed on bean with name '"</span> + <span class="keyword">this</span>.beanName + <span class="string">"'"</span>;</span><br><span class="line">                <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.warn(msg, var3);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    logger.warn(msg + <span class="string">": "</span> + var3);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.destroyMethod != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.invokeCustomDestroyMethod(<span class="keyword">this</span>.destroyMethod);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.destroyMethodName != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Method methodToCall = <span class="keyword">this</span>.determineDestroyMethod();</span><br><span class="line">            <span class="keyword">if</span> (methodToCall != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.invokeCustomDestroyMethod(methodToCall);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200131181906.png" alt="实例化之前的准备阶段"></p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200131181931.png" alt="实例化前"></p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200131181951.png" alt="实例化后"></p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200131182017.png" alt="初始化前"></p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200131182037.png" alt="初始化后+销毁"></p><p>参考文章:<br><a href="https://mp.weixin.qq.com/s/8F2ViVXa5hnn5Lljbis0VA">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、获取Bean&quot;&gt;&lt;a href=&quot;#一、获取Bean&quot; class=&quot;headerlink&quot; title=&quot;一、获取Bean&quot;&gt;&lt;/a&gt;一、获取Bean&lt;/h3&gt;&lt;h4 id=&quot;第一阶段获取Bean&quot;&gt;&lt;a href=&quot;#第一阶段获取Bean&quot; class=&quot;headerlink&quot; title=&quot;第一阶段获取Bean&quot;&gt;&lt;/a&gt;第一阶段获取Bean&lt;/h4&gt;&lt;p&gt;这里的流程图的入口在 &lt;code&gt;AbstractBeanFactory&lt;/code&gt;类的 &lt;code&gt;doGetBean&lt;/code&gt;方法，这里可以配合前面的 getBean方法分析文章进行阅读。主要流程就是&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、&lt;/strong&gt;先处理Bean 的名称，因为如果以“&amp;amp;”开头的Bean名称表示获取的是对应的FactoryBean对象；&lt;br&gt;&lt;strong&gt;2、&lt;/strong&gt;从缓存中获取单例Bean，有则进一步判断这个Bean是不是在创建中，如果是的就等待创建完毕，否则直接返回这个Bean对象&lt;br&gt;&lt;strong&gt;3、&lt;/strong&gt;如果不存在单例Bean缓存，则先进行循环依赖的解析&lt;br&gt;&lt;strong&gt;4、&lt;/strong&gt;解析完毕之后先获取父类BeanFactory，获取到了则调用父类的getBean方法，不存在则先合并然后创建Bean&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://removeif.github.io/categories/java/"/>
    
      <category term="spring" scheme="https://removeif.github.io/categories/java/spring/"/>
    
    
      <category term="spring" scheme="https://removeif.github.io/tags/spring/"/>
    
      <category term="bean" scheme="https://removeif.github.io/tags/bean/"/>
    
  </entry>
  
  <entry>
    <title>算法成长之路leetcode19-20</title>
    <link href="https://removeif.github.io/algorithm/%E7%AE%97%E6%B3%95%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AFleetcode19-20.html"/>
    <id>https://removeif.github.io/algorithm/%E7%AE%97%E6%B3%95%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AFleetcode19-20.html</id>
    <published>2020-01-19T15:58:33.000Z</published>
    <updated>2020-02-02T02:00:25.565Z</updated>
    
    <content type="html"><![CDATA[<h4 id="19-Remove-Nth-Node-From-End-of-List"><a href="#19-Remove-Nth-Node-From-End-of-List" class="headerlink" title="19. Remove Nth Node From End of List"></a><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">19. Remove Nth Node From End of List</a></h4><p>Given a linked list, remove the n-th node from the end of list and return its head.</p><a id="more"></a><h5 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n &#x3D; 2.</span><br><span class="line"></span><br><span class="line">After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.</span><br><span class="line">Note:</span><br><span class="line"></span><br><span class="line">Given n will always be valid.</span><br><span class="line"></span><br><span class="line">Follow up:</span><br><span class="line"></span><br><span class="line">Could you do this in one pass?</span><br></pre></td></tr></table></figure><h5 id="JAVA题解"><a href="#JAVA题解" class="headerlink" title="JAVA题解"></a>JAVA题解</h5><p><strong>方法一：两次遍历算法</strong></p><ul><li>思路</li></ul><p>我们注意到这个问题可以容易地简化成另一个问题：删除从列表开头数起的第 (L - n + 1)(L−n+1) 个结点，其中 LL 是列表的长度。只要我们找到列表的长度 LL，这个问题就很容易解决。</p><ul><li>算法</li></ul><p>首先我们将添加一个哑结点作为辅助，该结点位于列表头部。哑结点用来简化某些极端情况，例如列表中只含有一个结点，或需要删除列表的头部。在第一次遍历中，我们找出列表的长度 LL。然后设置一个指向哑结点的指针，并移动它遍历列表，直至它到达第 (L - n)(L−n) 个结点那里。我们把第 (L - n)(L−n) 个结点的 next 指针重新链接至第 (L - n + 2)(L−n+2) 个结点，完成这个算法。</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200120000210.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">示例：</span></span><br><span class="line"><span class="comment">给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.</span></span><br><span class="line"><span class="comment">当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.</span></span><br><span class="line"><span class="comment">说明：</span></span><br><span class="line"><span class="comment">给定的 n 保证是有效的。</span></span><br><span class="line"><span class="comment">进阶：</span></span><br><span class="line"><span class="comment">你能尝试使用一趟扫描实现吗？</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    dummy.next = head;</span><br><span class="line">    <span class="keyword">int</span> length  = <span class="number">0</span>;</span><br><span class="line">    ListNode first = head;</span><br><span class="line">    <span class="keyword">while</span> (first != <span class="keyword">null</span>) &#123;</span><br><span class="line">        length++;</span><br><span class="line">        first = first.next;</span><br><span class="line">    &#125;</span><br><span class="line">    length -= n;</span><br><span class="line">    first = dummy;</span><br><span class="line">    <span class="keyword">while</span> (length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        length--;</span><br><span class="line">        first = first.next;</span><br><span class="line">    &#125;</span><br><span class="line">    first.next = first.next.next;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法二：一次遍历算法</strong></p><ul><li>算法</li></ul><p>上述算法可以优化为只使用一次遍历。我们可以使用两个指针而不是一个指针。第一个指针从列表的开头向前移动 n+1n+1 步，而第二个指针将从列表的开头出发。现在，这两个指针被 nn 个结点分开。我们通过同时移动两个指针向前来保持这个恒定的间隔，直到第一个指针到达最后一个结点。此时第二个指针将指向从最后一个结点数起的第 nn 个结点。我们重新链接第二个指针所引用的结点的 next 指针指向该结点的下下个结点。</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200120000247.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    dummy.next = head;</span><br><span class="line">    ListNode first = dummy;</span><br><span class="line">    ListNode second = dummy;</span><br><span class="line">    <span class="comment">// Advances first pointer so that the gap between first and second is n nodes apart</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        first = first.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Move first to the end, maintaining the gap</span></span><br><span class="line">    <span class="keyword">while</span> (first != <span class="keyword">null</span>) &#123;</span><br><span class="line">        first = first.next;</span><br><span class="line">        second = second.next;</span><br><span class="line">    &#125;</span><br><span class="line">    second.next = second.next.next;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">作者：LeetCode</span><br><span class="line">链接：https:<span class="comment">//leetcode-cn.com/problems/remove-nth-node-from-end-of-list/solution/shan-chu-lian-biao-de-dao-shu-di-nge-jie-dian-by-l/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><h4 id="20-Valid-Parentheses"><a href="#20-Valid-Parentheses" class="headerlink" title="20. Valid Parentheses"></a><a href="https://leetcode-cn.com/problems/valid-parentheses/">20. Valid Parentheses</a></h4><p>Given a string containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid.</p><p>An input string is valid if:</p><p>Open brackets must be closed by the same type of brackets.<br>Open brackets must be closed in the correct order.<br>Note that an empty string is also considered valid.</p><h5 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: &quot;()&quot;</span><br><span class="line">Output: true</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: &quot;()[]&#123;&#125;&quot;</span><br><span class="line">Output: true</span><br><span class="line">Example 3:</span><br><span class="line"></span><br><span class="line">Input: &quot;(]&quot;</span><br><span class="line">Output: false</span><br><span class="line">Example 4:</span><br><span class="line"></span><br><span class="line">Input: &quot;([)]&quot;</span><br><span class="line">Output: false</span><br><span class="line">Example 5:</span><br><span class="line"></span><br><span class="line">Input: &quot;&#123;[]&#125;&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><h5 id="JAVA题解-1"><a href="#JAVA题解-1" class="headerlink" title="JAVA题解"></a>JAVA题解</h5><figure class="highlight java"><figcaption><span>Leetcode20.java >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给定一个只包括 '('，')'，'&#123;'，'&#125;'，'['，']' 的字符串，判断字符串是否有效。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 有效字符串需满足：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 左括号必须用相同类型的右括号闭合。</span></span><br><span class="line"><span class="comment"> * 左括号必须以正确的顺序闭合。</span></span><br><span class="line"><span class="comment"> * 注意空字符串可被认为是有效字符串。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 示例 1:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 输入: "()"</span></span><br><span class="line"><span class="comment"> * 输出: true</span></span><br><span class="line"><span class="comment"> * 示例 2:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 输入: "()[]&#123;&#125;"</span></span><br><span class="line"><span class="comment"> * 输出: true</span></span><br><span class="line"><span class="comment"> * 示例 3:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 输入: "(]"</span></span><br><span class="line"><span class="comment"> * 输出: false</span></span><br><span class="line"><span class="comment"> * 示例 4:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 输入: "([)]"</span></span><br><span class="line"><span class="comment"> * 输出: false</span></span><br><span class="line"><span class="comment"> * 示例 5:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 输入: "&#123;[]&#125;"</span></span><br><span class="line"><span class="comment"> * 输出: true</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leetcode20</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 类似栈的处理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> || s.equals(<span class="string">""</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 奇数</span></span><br><span class="line">        <span class="keyword">if</span>(s.length() % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; arr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Map&lt;Character, Integer&gt; cIn = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        cIn.put(<span class="string">'('</span>, <span class="number">1</span>);</span><br><span class="line">        cIn.put(<span class="string">')'</span>, -<span class="number">1</span>);</span><br><span class="line">        cIn.put(<span class="string">'&#123;'</span>, <span class="number">2</span>);</span><br><span class="line">        cIn.put(<span class="string">'&#125;'</span>, -<span class="number">2</span>);</span><br><span class="line">        cIn.put(<span class="string">'['</span>, <span class="number">3</span>);</span><br><span class="line">        cIn.put(<span class="string">']'</span>, -<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">        arr.add(cIn.get(chars[<span class="number">0</span>]));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 相等则移除</span></span><br><span class="line">            <span class="keyword">int</span> latestIndex = arr.size() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (latestIndex &gt;= <span class="number">0</span> &amp;&amp; arr.get(latestIndex) == -cIn.get(chars[i])) &#123;</span><br><span class="line">                arr.remove(latestIndex);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                arr.add(cIn.get(chars[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (arr.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Leetcode20().isValid(<span class="string">"([])[]"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 栈的处理</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.isEmpty())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        Stack&lt;Character&gt; stack=<span class="keyword">new</span> Stack&lt;Character&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c:s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">'('</span>)</span><br><span class="line">                stack.push(<span class="string">')'</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'&#123;'</span>)</span><br><span class="line">                stack.push(<span class="string">'&#125;'</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'['</span>)</span><br><span class="line">                stack.push(<span class="string">']'</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(stack.empty()||c!=stack.pop())</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(stack.empty())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 栈 官方</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Hash table that takes care of the mappings.</span></span><br><span class="line">  <span class="keyword">private</span> HashMap&lt;Character, Character&gt; mappings;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize hash map with mappings. This simply makes the code easier to read.</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Solution</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.mappings = <span class="keyword">new</span> HashMap&lt;Character, Character&gt;();</span><br><span class="line">    <span class="keyword">this</span>.mappings.put(<span class="string">')'</span>, <span class="string">'('</span>);</span><br><span class="line">    <span class="keyword">this</span>.mappings.put(<span class="string">'&#125;'</span>, <span class="string">'&#123;'</span>);</span><br><span class="line">    <span class="keyword">this</span>.mappings.put(<span class="string">']'</span>, <span class="string">'['</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize a stack to be used in the algorithm.</span></span><br><span class="line">    Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;Character&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">      <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// If the current character is a closing bracket.</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.mappings.containsKey(c)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get the top element of the stack. If the stack is empty, set a dummy value of '#'</span></span><br><span class="line">        <span class="keyword">char</span> topElement = stack.empty() ? <span class="string">'#'</span> : stack.pop();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the mapping for this bracket doesn't match the stack's top element, return false.</span></span><br><span class="line">        <span class="keyword">if</span> (topElement != <span class="keyword">this</span>.mappings.get(c)) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// If it was an opening bracket, push to the stack.</span></span><br><span class="line">        stack.push(c);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the stack still contains elements, then it is an invalid expression.</span></span><br><span class="line">    <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;19-Remove-Nth-Node-From-End-of-List&quot;&gt;&lt;a href=&quot;#19-Remove-Nth-Node-From-End-of-List&quot; class=&quot;headerlink&quot; title=&quot;19. Remove Nth Node From End of List&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/&quot;&gt;19. Remove Nth Node From End of List&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Given a linked list, remove the n-th node from the end of list and return its head.&lt;/p&gt;
    
    </summary>
    
    
      <category term="algorithm" scheme="https://removeif.github.io/categories/algorithm/"/>
    
    
      <category term="栈" scheme="https://removeif.github.io/tags/%E6%A0%88/"/>
    
      <category term="链表" scheme="https://removeif.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>springboot优雅的停止服务</title>
    <link href="https://removeif.github.io/java/frame/springboot%E4%BC%98%E9%9B%85%E7%9A%84%E5%81%9C%E6%AD%A2%E6%9C%8D%E5%8A%A1.html"/>
    <id>https://removeif.github.io/java/frame/springboot%E4%BC%98%E9%9B%85%E7%9A%84%E5%81%9C%E6%AD%A2%E6%9C%8D%E5%8A%A1.html</id>
    <published>2020-01-12T13:08:28.000Z</published>
    <updated>2020-02-02T02:00:25.580Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 SpringBoot 的时候，都要涉及到服务的停止和启动，当我们停止服务的时候，很多时候大家都是kill -9 直接把程序进程杀掉，这样程序不会执行优雅的关闭。而且一些没有执行完的程序就会直接退出。</p><a id="more"></a><p>我们很多时候都需要安全的将服务停止，也就是把没有处理完的工作继续处理完成。比如停止一些依赖的服务，输出一些日志，发一些信号给其他的应用系统，这个在保证系统的高可用是非常有必要的。那么咱么就来看一下几种停止 SpringBoot 的方法。</p><h4 id="Springboot提供的actuator"><a href="#Springboot提供的actuator" class="headerlink" title="Springboot提供的actuator"></a>Springboot提供的actuator</h4><p>第一种就是Springboot提供的actuator的功能，它可以执行shutdown, health, info等，默认情况下，actuator的shutdown是disable的，我们需要打开它。首先引入acturator的maven依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后将shutdown节点打开，也将/actuator/shutdown暴露web访问也设置上，除了shutdown之外还有health, info的web访问都打开的话将management.endpoints.web.exposure.include=*就可以。将如下配置设置到application.properties里边。设置一下服务的端口号为3333。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">server.port=3333</span></span><br><span class="line"><span class="string">management.endpoint.shutdown.enabled=true</span></span><br><span class="line"><span class="string">management.endpoints.web.exposure.include=shutdown</span></span><br></pre></td></tr></table></figure><p>接下来，咱们创建一个springboot工程，然后设置一个bean对象，配置上PreDestroy方法。这样在停止的时候会打印语句。bean的整个生命周期分为创建、初始化、销毁，当最后关闭的时候会执行销毁操作。在销毁的方法中执行一条输出日志。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hqs.springboot.shutdowndemo.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PreDestroy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> huangqingshi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019-08-17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TerminateBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"TerminalBean is destroyed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>做一个configuration，然后提供一个获取bean的方法，这样该bean对象会被初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hqs.springboot.shutdowndemo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hqs.springboot.shutdowndemo.bean.TerminateBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> huangqingshi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019-08-17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShutDownConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TerminateBean <span class="title">getTerminateBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TerminateBean();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在启动类里边输出一个启动日志，当工程启动的时候，会看到启动的输出，接下来咱们执行停止命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://localhost:3333/actuator/shutdown</span><br></pre></td></tr></table></figure><p>以下日志可以输出启动时的日志打印和停止时的日志打印，同时程序已经停止。是不是比较神奇。</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200112205153.png" alt=""></p><h4 id="context-close"><a href="#context-close" class="headerlink" title="context.close"></a>context.close</h4><p>第二种方法也比较简单，获取程序启动时候的context，然后关闭主程序启动时的context。这样程序在关闭的时候也会调用PreDestroy注解。如下方法在程序启动十秒后进行关闭。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* method 2: use ctx.close to shutdown all application context */</span></span><br><span class="line">        ConfigurableApplicationContext ctx = SpringApplication.run(ShutdowndemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx.close();</span><br></pre></td></tr></table></figure><h4 id="springboot启动写入app-pid"><a href="#springboot启动写入app-pid" class="headerlink" title="springboot启动写入app.pid"></a>springboot启动写入app.pid</h4><p>第三种方法，在springboot启动的时候将进程号写入一个app.pid文件，生成的路径是可以指定的，可以通过命令 cat /Users/huangqingshi/app.id | xargs kill 命令直接停止服务，这个时候bean对象的PreDestroy方法也会调用的。这种方法大家使用的比较普遍。写一个start.sh用于启动springboot程序，然后写一个停止程序将服务停止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* method 3 : generate a pid in a specified path, while use command to shutdown pid :</span></span><br><span class="line"><span class="comment">            'cat /Users/huangqingshi/app.pid | xargs kill' */</span></span><br><span class="line">        SpringApplication application = <span class="keyword">new</span> SpringApplication(ShutdowndemoApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        application.addListeners(<span class="keyword">new</span> ApplicationPidFileWriter(<span class="string">"/Users/huangqingshi/app.pid"</span>));</span><br><span class="line">        application.run();</span><br></pre></td></tr></table></figure><h4 id="SpringApplication-exit"><a href="#SpringApplication-exit" class="headerlink" title="SpringApplication.exit()"></a>SpringApplication.exit()</h4><p>第四种方法，通过调用一个SpringApplication.exit(）方法也可以退出程序，同时将生成一个退出码，这个退出码可以传递给所有的context。这个就是一个JVM的钩子，通过调用这个方法的话会把所有PreDestroy的方法执行并停止，并且传递给具体的退出码给所有Context。通过调用System.exit(exitCode)可以将这个错误码也传给JVM。程序执行完后最后会输出：Process finished with exit code 0，给JVM一个SIGNAL。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* method 4: exit this application using static method */</span></span><br><span class="line">        ConfigurableApplicationContext ctx = SpringApplication.run(ShutdowndemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">        <span class="keyword">this</span>.exitApplication(ctx);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exitApplication</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> exitCode = SpringApplication.exit(context, (ExitCodeGenerator) () -&gt; <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        System.exit(exitCode);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200112205759.png" alt=""></p><h4 id="Controller获取程序的context关闭"><a href="#Controller获取程序的context关闭" class="headerlink" title="Controller获取程序的context关闭"></a>Controller获取程序的context关闭</h4><p>第五种方法，自己写一个Controller，然后将自己写好的Controller获取到程序的context，然后调用自己配置的Controller方法退出程序。通过调用自己写的/shutDownContext方法关闭程序：curl -X POST <a href="http://localhost:3333/shutDownContext。">http://localhost:3333/shutDownContext。</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hqs.springboot.shutdowndemo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> huangqingshi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019-08-17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShutDownController</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/shutDownContext"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">shutDownContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext ctx = (ConfigurableApplicationContext) context;</span><br><span class="line">        ctx.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"context is shutdown"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        context = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，springboot的优雅关闭方法也都实现好了，也有同学问，如何暴力停止呢，简单，直接kill -9 相应的PID即可。</p><h4 id="总结一下："><a href="#总结一下：" class="headerlink" title="总结一下："></a>总结一下：</h4><p>以上这几种方法实现的话比较简单，但是真实工作中还需要考虑的点还很多，比如需要保护暴露的点不被别人利用，一般要加一些防火墙，或者只在内网使用，保证程序安全。</p><p>在真实的工作中的时候第三种比较常用，程序中一般使用内存队列或线程池的时候最好要优雅的关机，将内存队列没有处理的保存起来或线程池中没处理完的程序处理完。但是因为停机的时候比较快，所以停服务的时候最好不要处理大量的数据操作，这样会影响程序停止。</p><p>参考文章:<br><a href="https://mp.weixin.qq.com/s/T7L_f4v6kWw8KwYepA4ehw">参考链接1</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用 SpringBoot 的时候，都要涉及到服务的停止和启动，当我们停止服务的时候，很多时候大家都是kill -9 直接把程序进程杀掉，这样程序不会执行优雅的关闭。而且一些没有执行完的程序就会直接退出。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://removeif.github.io/categories/java/"/>
    
      <category term="springboot" scheme="https://removeif.github.io/categories/java/springboot/"/>
    
    
      <category term="springboot" scheme="https://removeif.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>算法成长之路leetcode17-18</title>
    <link href="https://removeif.github.io/algorithm/%E7%AE%97%E6%B3%95%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AFleetcode17-18.html"/>
    <id>https://removeif.github.io/algorithm/%E7%AE%97%E6%B3%95%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AFleetcode17-18.html</id>
    <published>2020-01-08T13:55:24.000Z</published>
    <updated>2020-02-02T02:00:25.564Z</updated>
    
    <content type="html"><![CDATA[<h4 id="17-Letter-Combinations-of-a-Phone-Number"><a href="#17-Letter-Combinations-of-a-Phone-Number" class="headerlink" title="17. Letter Combinations of a Phone Number"></a><a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/">17. Letter Combinations of a Phone Number</a></h4><p>Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.</p><a id="more"></a><p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p><h5 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Input: &quot;23&quot;</span><br><span class="line">Output: [&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;].</span><br><span class="line">Note:</span><br><span class="line"></span><br><span class="line">Although the above answer is in lexicographical order, your answer could be in any order you want.</span><br></pre></td></tr></table></figure><h5 id="JAVA题解"><a href="#JAVA题解" class="headerlink" title="JAVA题解"></a>JAVA题解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> 示例:</span></span><br><span class="line"><span class="comment"> 输入："23"</span></span><br><span class="line"><span class="comment"> 输出：["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leetcode17</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">letterCombinations</span><span class="params">(String digits)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        String[] indexToStr = <span class="keyword">new</span> String[]&#123;<span class="string">""</span>, <span class="string">""</span>, <span class="string">"abc"</span>, <span class="string">"def"</span>, <span class="string">"ghi"</span>, <span class="string">"jkl"</span>, <span class="string">"mno"</span>, <span class="string">"pqrs"</span>, <span class="string">"tuv"</span>, <span class="string">"wxyz"</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span> (digits == <span class="keyword">null</span> || <span class="string">""</span>.equals(digits))</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(digits.length() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">char</span>[] chars = indexToStr[Integer.parseInt(digits)].toCharArray();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">                res.add(<span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">char</span>[]&#123;chars[i]&#125;));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] charArray = digits.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] i0Char = indexToStr[(<span class="keyword">int</span>) charArray[<span class="number">0</span>] - (<span class="keyword">int</span>) (<span class="string">'0'</span>)].toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; charArray.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i1 = <span class="number">0</span>; i1 &lt; i0Char.length; i1++) &#123;</span><br><span class="line">                <span class="keyword">char</span>[] chars1 = indexToStr[(<span class="keyword">int</span>) charArray[i] - (<span class="keyword">int</span>) (<span class="string">'0'</span>)].toCharArray();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i2 = <span class="number">0</span>; i2 &lt; chars1.length; i2++) &#123;</span><br><span class="line">                    res.add(<span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">char</span>[]&#123;i0Char[i1], chars1[i2]&#125;));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, String&gt; phone = <span class="keyword">new</span> HashMap&lt;String, String&gt;() &#123;&#123;</span><br><span class="line">        put(<span class="string">"2"</span>, <span class="string">"abc"</span>);</span><br><span class="line">        put(<span class="string">"3"</span>, <span class="string">"def"</span>);</span><br><span class="line">        put(<span class="string">"4"</span>, <span class="string">"ghi"</span>);</span><br><span class="line">        put(<span class="string">"5"</span>, <span class="string">"jkl"</span>);</span><br><span class="line">        put(<span class="string">"6"</span>, <span class="string">"mno"</span>);</span><br><span class="line">        put(<span class="string">"7"</span>, <span class="string">"pqrs"</span>);</span><br><span class="line">        put(<span class="string">"8"</span>, <span class="string">"tuv"</span>);</span><br><span class="line">        put(<span class="string">"9"</span>, <span class="string">"wxyz"</span>);</span><br><span class="line">    &#125;&#125;;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; output = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(String combination, String next_digits)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// if there is no more digits to check</span></span><br><span class="line">        <span class="keyword">if</span> (next_digits.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// the combination is done</span></span><br><span class="line">            output.add(combination);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// if there are still digits to check</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// iterate over all letters which map</span></span><br><span class="line">            <span class="comment">// the next available digit</span></span><br><span class="line">            String digit = next_digits.substring(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            String letters = phone.get(digit);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; letters.length(); i++) &#123;</span><br><span class="line">                String letter = phone.get(digit).substring(i, i + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">// append the current letter to the combination</span></span><br><span class="line">                <span class="comment">// and proceed to the next digits</span></span><br><span class="line">                backtrack(combination + letter, next_digits.substring(<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法：回溯</span></span><br><span class="line"><span class="comment">     * 回溯是一种通过穷举所有可能情况来找到所有解的算法。如果一个候选解最后被发现并不是可行解，回溯算法会舍弃它，并在前面的一些步骤做出一些修改，并重新尝试找到可行解。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 给出如下回溯函数 backtrack(combination, next_digits) ，它将一个目前已经产生的组合 combination 和接下来准备要输入的数字 next_digits 作为参数。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 如果没有更多的数字需要被输入，那意味着当前的组合已经产生好了。</span></span><br><span class="line"><span class="comment">     * 如果还有数字需要被输入：</span></span><br><span class="line"><span class="comment">     * 遍历下一个数字所对应的所有映射的字母。</span></span><br><span class="line"><span class="comment">     * 将当前的字母添加到组合最后，也就是 combination = combination + letter 。</span></span><br><span class="line"><span class="comment">     * 重复这个过程，输入剩下的数字： backtrack(combination + letter, next_digits[1:]) 。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 有动画图解</span></span><br><span class="line"><span class="comment">     * 作者：LeetCode</span></span><br><span class="line"><span class="comment">     * 链接：https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/solution/dian-hua-hao-ma-de-zi-mu-zu-he-by-leetcode/</span></span><br><span class="line"><span class="comment">     * 来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment">     * 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> digits</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">letterCombinations1</span><span class="params">(String digits)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (digits.length() != <span class="number">0</span>)</span><br><span class="line">            backtrack(<span class="string">""</span>, digits);</span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(letterCombinations(<span class="string">"3"</span>));</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Leetcode17().letterCombinations1(<span class="string">"234"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="18-4Sum"><a href="#18-4Sum" class="headerlink" title="18. 4Sum"></a><a href="https://leetcode-cn.com/problems/4sum/">18. 4Sum</a></h4><p>Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.</p><p>Note:</p><p>The solution set must not contain duplicate quadruplets.</p><h5 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Given array nums &#x3D; [1, 0, -1, 0, -2, 2], and target &#x3D; 0.</span><br><span class="line"></span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [-1,  0, 0, 1],</span><br><span class="line">  [-2, -1, 1, 2],</span><br><span class="line">  [-2,  0, 0, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="JAVA题解-1"><a href="#JAVA题解-1" class="headerlink" title="JAVA题解"></a>JAVA题解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，</span></span><br><span class="line"><span class="comment"> * 使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 注意：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 答案中不可以包含重复的四元组。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 示例：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 满足要求的四元组集合为：</span></span><br><span class="line"><span class="comment"> * [</span></span><br><span class="line"><span class="comment"> *   [-1,  0, 0, 1],</span></span><br><span class="line"><span class="comment"> *   [-2, -1, 1, 2],</span></span><br><span class="line"><span class="comment"> *   [-2,  0, 0, 2]</span></span><br><span class="line"><span class="comment"> * ]</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment"> * 链接：https://leetcode-cn.com/problems/4sum</span></span><br><span class="line"><span class="comment"> * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leetcode18</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 思路：</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  四数之和与前面三数之和的思路几乎是一样的，嗝。（刚好前些天才写了三数之和的题解）</span></span><br><span class="line"><span class="comment">     *  如果前面的三数之和会做了的话，这里其实就是在前面的基础上多添加一个遍历的指针而已。</span></span><br><span class="line"><span class="comment">     *  会做三数之和的可以不用看下面的了。。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  使用四个指针(a&lt;b&lt;c&lt;d)。固定最小的a和b在左边，c=b+1,d=_size-1 移动两个指针包夹求解。</span></span><br><span class="line"><span class="comment">     *  保存使得nums[a]+nums[b]+nums[c]+nums[d]==target的解。偏大时d左移，偏小时c右移。c和d相</span></span><br><span class="line"><span class="comment">     *  遇时，表示以当前的a和b为最小值的解已经全部求得。b++,进入下一轮循环b循环，当b循环结束后。</span></span><br><span class="line"><span class="comment">     *  a++，进入下一轮a循环。 即(a在最外层循环，里面嵌套b循环，再嵌套双指针c,d包夹求解)。</span></span><br><span class="line"><span class="comment">     * 准备工作：</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  因为要使用双指针的方法，排序是必须要做der~。 时间复杂度O(NlogN).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 作者：misakasagiri-2</span></span><br><span class="line"><span class="comment">     * 链接：https://leetcode-cn.com/problems/4sum/solution/shuang-zhi-zhen-jie-fa-can-zhao-san-shu-zhi-he-ge-/</span></span><br><span class="line"><span class="comment">     * 来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment">     * 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; fourSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="comment">/*定义一个返回值*/</span></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">/*当数组为null或元素小于4个时，直接返回*/</span></span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*对数组进行从小到大排序*/</span></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        System.out.println(<span class="string">"-4,-1,-1,0,1,2"</span>);</span><br><span class="line">        <span class="comment">/*数组长度*/</span></span><br><span class="line">        <span class="keyword">int</span> length = nums.length;</span><br><span class="line">        <span class="comment">/*定义4个指针k，i，j，h  k从0开始遍历，i从k+1开始遍历，留下j和h，j指向i+1，h指向数组最大值*/</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; length - <span class="number">3</span>; k++) &#123;</span><br><span class="line">            <span class="comment">/*当k的值与前面的值相等时忽略*/</span></span><br><span class="line">            <span class="keyword">if</span> (k &gt; <span class="number">0</span> &amp;&amp; nums[k] == nums[k - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*获取当前最小值，如果最小值比目标值大，说明后面越来越大的值根本没戏*/</span></span><br><span class="line">            <span class="keyword">int</span> min1 = nums[k] + nums[k + <span class="number">1</span>] + nums[k + <span class="number">2</span>] + nums[k + <span class="number">3</span>];</span><br><span class="line">            <span class="keyword">if</span> (min1 &gt; target) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*获取当前最大值，如果最大值比目标值小，说明后面越来越小的值根本没戏，忽略*/</span></span><br><span class="line">            <span class="keyword">int</span> max1 = nums[k] + nums[length - <span class="number">1</span>] + nums[length - <span class="number">2</span>] + nums[length - <span class="number">3</span>];</span><br><span class="line">            <span class="keyword">if</span> (max1 &lt; target) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*第二层循环i，初始值指向k+1*/</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = k + <span class="number">1</span>; i &lt; length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">                <span class="comment">/*当i的值与前面的值相等时忽略*/</span></span><br><span class="line">                <span class="keyword">if</span> (i &gt; k + <span class="number">1</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/*定义指针j指向i+1*/</span></span><br><span class="line">                <span class="keyword">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">                <span class="comment">/*定义指针h指向数组末尾*/</span></span><br><span class="line">                <span class="keyword">int</span> h = length - <span class="number">1</span>;</span><br><span class="line">                <span class="comment">/*获取当前最小值，如果最小值比目标值大，说明后面越来越大的值根本没戏，忽略*/</span></span><br><span class="line">                <span class="keyword">int</span> min = nums[k] + nums[i] + nums[j] + nums[j + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (min &gt; target) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"m,k="</span>+k+<span class="string">",i="</span>+i+<span class="string">",j="</span>+j+<span class="string">",j+1="</span>+(j+<span class="number">1</span>));</span><br><span class="line">                    <span class="keyword">break</span>; <span class="comment">// 此时直接滑动k,因为不管怎么滑动i,min 都会大于target</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/*获取当前最大值，如果最大值比目标值小，说明后面越来越小的值根本没戏，忽略*/</span></span><br><span class="line">                <span class="keyword">int</span> max = nums[k] + nums[i] + nums[h] + nums[h - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (max &lt; target) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"ma,k="</span>+k+<span class="string">",i="</span>+i+<span class="string">",j="</span>+j+<span class="string">",j+1="</span>+(j+<span class="number">1</span>));</span><br><span class="line">                    <span class="keyword">continue</span>; <span class="comment">// 此时continue滑动i 值，nums[i] + nums[h] + nums[h - 1] 变大 ，整个max 会变大</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * -4,-1,-1,0,1,2</span></span><br><span class="line"><span class="comment">                 * ma,k=0,i=1,j=2,j+1=3</span></span><br><span class="line"><span class="comment">                 * m,k=1,i=3,j=4,j+1=5</span></span><br><span class="line"><span class="comment">                 * [[-4, 0, 1, 2], [-1, -1, 0, 1]]</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 * -4,-1,-1,0,1,2</span></span><br><span class="line"><span class="comment">                 * ma,k=0,i=1,j=2,j+1=3</span></span><br><span class="line"><span class="comment">                 * m,k=1,i=3,j=4,j+1=5</span></span><br><span class="line"><span class="comment">                 * [[-1, -1, 0, 1]]</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">/*开始j指针和h指针的表演，计算当前和，如果等于目标值，j++并去重，h--并去重，当当前和大于目标值时h--，当当前和小于目标值时j++*/</span></span><br><span class="line">                <span class="keyword">while</span> (j &lt; h) &#123;</span><br><span class="line">                    <span class="keyword">int</span> curr = nums[k] + nums[i] + nums[j] + nums[h];</span><br><span class="line">                    <span class="keyword">if</span> (curr == target) &#123;</span><br><span class="line">                        result.add(Arrays.asList(nums[k], nums[i], nums[j], nums[h]));</span><br><span class="line">                        j++;</span><br><span class="line">                        <span class="keyword">while</span> (j &lt; h &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                            j++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        h--;</span><br><span class="line">                        <span class="keyword">while</span> (j &lt; h &amp;&amp; i &lt; h &amp;&amp; nums[h] == nums[h + <span class="number">1</span>]) &#123;</span><br><span class="line">                            h--;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (curr &gt; target) &#123;</span><br><span class="line">                        h--;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        j++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    作者：you-wei-wu</span></span><br><span class="line"><span class="comment">    链接：https://leetcode-cn.com/problems/4sum/solution/ji-bai-9994de-yong-hu-you-dai-ma-you-zhu-shi-by-yo/</span></span><br><span class="line"><span class="comment">    来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment">    著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Leetcode18().fourSum(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">4</span>&#125;,-<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;17-Letter-Combinations-of-a-Phone-Number&quot;&gt;&lt;a href=&quot;#17-Letter-Combinations-of-a-Phone-Number&quot; class=&quot;headerlink&quot; title=&quot;17. Letter Combinations of a Phone Number&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/&quot;&gt;17. Letter Combinations of a Phone Number&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.&lt;/p&gt;
    
    </summary>
    
    
      <category term="algorithm" scheme="https://removeif.github.io/categories/algorithm/"/>
    
    
      <category term="双指针" scheme="https://removeif.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
      <category term="递归回溯" scheme="https://removeif.github.io/tags/%E9%80%92%E5%BD%92%E5%9B%9E%E6%BA%AF/"/>
    
  </entry>
  
</feed>
