<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>辣椒の酱</title>
  
  <subtitle>尚未执佩剑，转眼即江湖</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://removeif.github.io/"/>
  <updated>2020-02-10T10:47:40.454Z</updated>
  <id>https://removeif.github.io/</id>
  
  <author>
    <name>辣椒の酱</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法成长之路leetcode21-22</title>
    <link href="https://removeif.github.io/algorithm/%E7%AE%97%E6%B3%95%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AFleetcode21-22.html"/>
    <id>https://removeif.github.io/algorithm/%E7%AE%97%E6%B3%95%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AFleetcode21-22.html</id>
    <published>2020-02-10T10:19:10.000Z</published>
    <updated>2020-02-10T10:47:40.454Z</updated>
    
    <content type="html"><![CDATA[<h3 id="21-Merge-Two-Sorted-Lists"><a href="#21-Merge-Two-Sorted-Lists" class="headerlink" title="21. Merge Two Sorted Lists"></a><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">21. Merge Two Sorted Lists</a></h3><p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p><a id="more"></a><h4 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="line">Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure><h4 id="JAVA题解："><a href="#JAVA题解：" class="headerlink" title="JAVA题解："></a>JAVA题解：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithm.c3;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 示例：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span></span><br><span class="line"><span class="comment"> * 输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment"> * 链接：https://leetcode-cn.com/problems/merge-two-sorted-lists</span></span><br><span class="line"><span class="comment"> * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leetcode21</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 错解</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ListNode l = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode cur = l;</span><br><span class="line">        <span class="keyword">while</span> (l1.next != <span class="keyword">null</span> || l2.next != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (l1.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">                cur.next = l2;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l2.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">                cur.next = l1;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(l1.val &gt; l2.val)&#123;</span><br><span class="line">                    cur.next= l2;</span><br><span class="line">                    l2 = l2.next;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(l1.val == l2.val)&#123;</span><br><span class="line">                    cur.next= l2;</span><br><span class="line">                    cur.next.next = l1;</span><br><span class="line">                    l1 = l1.next;</span><br><span class="line">                    l2 = l2.next;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    cur.next = l1;</span><br><span class="line">                    l1 = l1.next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> l.next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists1</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// maintain an unchanging reference to node ahead of the return node.</span></span><br><span class="line">        ListNode prehead = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        ListNode prev = prehead;</span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l1.val &lt;= l2.val) &#123;</span><br><span class="line">                prev.next = l1;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                prev.next = l2;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            prev = prev.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// exactly one of l1 and l2 can be non-null at this point, so connect</span></span><br><span class="line">        <span class="comment">// the non-null list to the end of the merged list.</span></span><br><span class="line">        prev.next = l1 == <span class="keyword">null</span> ? l2 : l1;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> prehead.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists2</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l1.val &lt; l2.val) &#123;</span><br><span class="line">            l1.next = mergeTwoLists(l1.next, l2);</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l2.next = mergeTwoLists(l1, l2.next);</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ListNode l1 = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        l1.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        l1.next.next = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        ListNode l2 = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        l2.next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        l2.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="keyword">new</span> Leetcode21().mergeTwoLists1(l1,l2));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        ListNode next;</span><br><span class="line"></span><br><span class="line">        ListNode(<span class="keyword">int</span> x) &#123;</span><br><span class="line">            val = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="22-Generate-Parentheses"><a href="#22-Generate-Parentheses" class="headerlink" title="22. Generate Parentheses"></a><a href="https://leetcode-cn.com/problems/generate-parentheses/">22. Generate Parentheses</a></h3><p>Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.</p><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example:"></a>Example:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">For example, given n &#x3D; 3, a solution set is:</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  &quot;((()))&quot;,</span><br><span class="line">  &quot;(()())&quot;,</span><br><span class="line">  &quot;(())()&quot;,</span><br><span class="line">  &quot;()(())&quot;,</span><br><span class="line">  &quot;()()()&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="JAVA题解：-1"><a href="#JAVA题解：-1" class="headerlink" title="JAVA题解："></a>JAVA题解：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithm.c3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给出 n 代表生成括号的对数，请你写出一个函数，使其能够生成所有可能的并且有效的括号组合。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 例如，给出 n = 3，生成结果为：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [</span></span><br><span class="line"><span class="comment"> *   "((()))",</span></span><br><span class="line"><span class="comment"> *   "(()())",</span></span><br><span class="line"><span class="comment"> *   "(())()",</span></span><br><span class="line"><span class="comment"> *   "()(())",</span></span><br><span class="line"><span class="comment"> *   "()()()"</span></span><br><span class="line"><span class="comment"> * ]</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment"> * 链接：https://leetcode-cn.com/problems/generate-parentheses</span></span><br><span class="line"><span class="comment"> * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leetcode22</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 在此题中，动态规划的思想类似于数学归纳法，当知道所有 i&lt;n 的情况时，我们可以通过某种算法算出 i=n 的情况。</span></span><br><span class="line"><span class="comment">     * 本题最核心的思想是，考虑 i=n 时相比 n-1 组括号增加的那一组括号的位置。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 思路：</span></span><br><span class="line"><span class="comment">     * 当我们清楚所有 i&lt;n 时括号的可能生成排列后，对与 i=n 的情况，我们考虑整个括号排列中最左边的括号。</span></span><br><span class="line"><span class="comment">     * 它一定是一个左括号，那么它可以和它对应的右括号组成一组完整的括号 "( )"，我们认为这一组是相比 n-1 增加进来的括号。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 那么，剩下 n-1 组括号有可能在哪呢？</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 【这里是重点，请着重理解】</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 剩下的括号要么在这一组新增的括号内部，要么在这一组新增括号的外部（右侧）。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 既然知道了 i&lt;n 的情况，那我们就可以对所有情况进行遍历：</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * "(" + 【i=p时所有括号的排列组合】 + ")" + 【i=q时所有括号的排列组合】</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 其中 p + q = n-1，且 p q 均为非负整数。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 事实上，当上述 p 从 0 取到 n-1，q 从 n-1 取到 0 后，所有情况就遍历完了。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 注：上述遍历是没有重复情况出现的，即当 (p1,q1)≠(p2,q2) 时，按上述方式取的括号组合一定不同。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 作者：yuyu-13</span></span><br><span class="line"><span class="comment">     * 链接：https://leetcode-cn.com/problems/generate-parentheses/solution/zui-jian-dan-yi-dong-de-dong-tai-gui-hua-bu-lun-da/</span></span><br><span class="line"><span class="comment">     * 来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment">     * 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 简单来说，在求N个括号的排列组合时，把第N种情况（也就是N个括号排列组合）视为单独拿一个括号E出来，</span></span><br><span class="line"><span class="comment">     * 剩下的N-1个括号分为两部分，P个括号和Q个括号，P+Q=N-1，然后这两部分分别处于括号E内和括号E的右边，</span></span><br><span class="line"><span class="comment">     * 各自进行括号的排列组合。由于我们是一步步计算得到N个括号的情况的，所以小于等于N-1个括号的排列组合方式我们是已知的（</span></span><br><span class="line"><span class="comment">     * 用合适的数据结构存储，方便后续调用，且在存储时可利用特定数据结构实现题目某些要求，如排序，去重等），</span></span><br><span class="line"><span class="comment">     * 且P+Q=N-1，P和Q是小于等于N-1的，所以我们能直接得到P个和Q个括号的情况，进而得到N个括号的结果！</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 楼主的算法思想很巧妙，赞一个~这个算法主要的基点就是将排列组合的情况分为了括号内和括号外这两种情况，</span></span><br><span class="line"><span class="comment">     * 且仅存在两种情况！至于为什么，原因在于楼主的算法的前提是单独拿出来的括号E的左边在N个括号所有排列组合情况中都是处于最左边，</span></span><br><span class="line"><span class="comment">     * 所以不存在括号位于括号E的左边的情况。因此，N-1个括号（拿出了括号E）仅可能分布于括号E内和括号E外，分为两种子情况讨论！</span></span><br><span class="line"><span class="comment">     * 这种思想还可以应用于其他类似的题的求解中，即怎样合理高效的利用前面步骤的计算结果得出当前步骤结果，从而得出最终结果。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;LinkedList&lt;String&gt;&gt; result = <span class="keyword">new</span> LinkedList&lt;LinkedList&lt;String&gt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> result.get(<span class="number">0</span>);</span><br><span class="line">        LinkedList&lt;String&gt; list0 = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        list0.add(<span class="string">""</span>);</span><br><span class="line">        result.add(list0);</span><br><span class="line">        LinkedList&lt;String&gt; list1 = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        list1.add(<span class="string">"()"</span>);</span><br><span class="line">        result.add(list1);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            LinkedList&lt;String&gt; temp = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                List&lt;String&gt; str1 = result.get(j);</span><br><span class="line">                List&lt;String&gt; str2 = result.get(i - <span class="number">1</span> - j);</span><br><span class="line">                <span class="keyword">for</span> (String s1 : str1) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (String s2 : str2) &#123;</span><br><span class="line">                        String el = <span class="string">"("</span> + s1 + <span class="string">")"</span> + s2;</span><br><span class="line">                        temp.add(el);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            result.add(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.get(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;21-Merge-Two-Sorted-Lists&quot;&gt;&lt;a href=&quot;#21-Merge-Two-Sorted-Lists&quot; class=&quot;headerlink&quot; title=&quot;21. Merge Two Sorted Lists&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/merge-two-sorted-lists/&quot;&gt;21. Merge Two Sorted Lists&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.&lt;/p&gt;
    
    </summary>
    
    
      <category term="algorithm" scheme="https://removeif.github.io/categories/algorithm/"/>
    
    
      <category term="递归" scheme="https://removeif.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="链表" scheme="https://removeif.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>中国共产党章程(2017修改)</title>
    <link href="https://removeif.github.io/law/%E4%B8%AD%E5%9B%BD%E5%85%B1%E4%BA%A7%E5%85%9A%E7%AB%A0%E7%A8%8B-2017%E4%BF%AE%E6%94%B9.html"/>
    <id>https://removeif.github.io/law/%E4%B8%AD%E5%9B%BD%E5%85%B1%E4%BA%A7%E5%85%9A%E7%AB%A0%E7%A8%8B-2017%E4%BF%AE%E6%94%B9.html</id>
    <published>2020-02-09T10:46:47.000Z</published>
    <updated>2020-02-09T10:54:24.846Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>基本信息</p></blockquote><p>效力级别    党内法规</p><p>时效性    现行有效</p><p>发布日期    2017-10-24 <a id="more"></a></p><p>实施日期    2017-10-24</p><p>发布机关    中共中央 </p><blockquote><p>正文</p></blockquote><h3 id="第一章-党员"><a href="#第一章-党员" class="headerlink" title="第一章　党员"></a>第一章　党员</h3><p><strong>第一条</strong></p><p>年满十八岁的中国工人、农民、军人、知识分子和其他社会阶层的先进分子，承认党的纲领和章程，愿意参加党的一个组织并在其中积极工作、执行党的决议和按期交纳党费的，可以申请加入中国共产党。</p><p><strong>第二条</strong></p><p>中国共产党党员是中国工人阶级的有共产主义觉悟的先锋战士。 中国共产党党员必须全心全意为人民服务，不惜牺牲个人的一切，为实现共产主义奋斗终身。 中国共产党党员永远是劳动人民的普通一员。除了法律和政策规定范围内的个人利益和工作职权以外，所有共产党员都不得谋求任何私利和特权。</p><p><strong>第三条</strong></p><p>党员必须履行下列义务： </p><ul><li>（一）认真学习马克思列宁主义、毛泽东思想、邓小平理论、“三个代表”重要思想、科学发展观、习近平新时代中国特色社会主义思想，学习党的路线、方针、政策和决议，学习党的基本知识，学习科学、文化、法律和业务知识，努力提高为人民服务的本领。 </li><li>（二）贯彻执行党的基本路线和各项方针、政策，带头参加改革开放和社会主义现代化建设，带动群众为经济发展和社会进步艰苦奋斗，在生产、工作、学习和社会生活中起先锋模范作用。 </li><li>（三）坚持党和人民的利益高于一切，个人利益服从党和人民的利益，吃苦在前，享受在后，克己奉公，多做贡献。 （四）自觉遵守党的纪律，首先是党的政治纪律和政治规矩，模范遵守国家的法律法规，严格保守党和国家的秘密，执行党的决定，服从组织分配，积极完成党的任务。</li><li>（五）维护党的团结和统一，对党忠诚老实，言行一致，坚决反对一切派别组织和小集团活动，反对阳奉阴违的两面派行为和一切阴谋诡计。 </li><li>（六）切实开展批评和自我批评，勇于揭露和纠正违反党的原则的言行和工作中的缺点、错误，坚决同消极腐败现象作斗争。 </li><li>（七）密切联系群众，向群众宣传党的主张，遇事同群众商量，及时向党反映群众的意见和要求，维护群众的正当利益。 </li><li>（八）发扬社会主义新风尚，带头实践社会主义核心价值观和社会主义荣辱观，提倡共产主义道德，弘扬中华民族传统美德，为了保护国家和人民的利益，在一切困难和危险的时刻挺身而出，英勇斗争，不怕牺牲。</li></ul><p><strong>第四条</strong></p><p>党员享有下列权利： </p><ul><li>（一）参加党的有关会议，阅读党的有关文件，接受党的教育和培训。 </li><li>（二）在党的会议上和党报党刊上，参加关于党的政策问题的讨论。 </li><li>（三）对党的工作提出建议和倡议。 </li><li>（四）在党的会议上有根据地批评党的任何组织和任何党员，向党负责地揭发、检举党的任何组织和任何党员违法乱纪的事实，要求处分违法乱纪的党员，要求罢免或撤换不称职的干部。 </li><li>（五）行使表决权、选举权，有被选举权。 </li><li>（六）在党组织讨论决定对党员的党纪处分或作出鉴定时，本人有权参加和进行申辩，其他党员可以为他作证和辩护。 </li><li>（七）对党的决议和政策如有不同意见，在坚决执行的前提下，可以声明保留，并且可以把自己的意见向党的上级组织直至中央提出。 </li><li>（八）向党的上级组织直至中央提出请求、申诉和控告，并要求有关组织给以负责的答复。 党的任何一级组织直至中央都无权剥夺党员的上述权利。</li></ul><p><strong>第五条</strong></p><p>发展党员，必须把政治标准放在首位，经过党的支部，坚持个别吸收的原则。 申请入党的人，要填写入党志愿书，要有两名正式党员作介绍人，要经过支部大会通过和上级党组织批准，并且经过预备期的考察，才能成为正式党员。 介绍人要认真了解申请人的思想、品质、经历和工作表现，向他解释党的纲领和党的章程，说明党员的条件、义务和权利，并向党组织作出负责的报告。 党的支部委员会对申请入党的人，要注意征求党内外有关群众的意见，进行严格的审查，认为合格后再提交支部大会讨论。 上级党组织在批准申请人入党以前，要派人同他谈话，作进一步的了解，并帮助他提高对党的认识。 在特殊情况下，党的中央和省、自治区、直辖市委员会可以直接接收党员。</p><p><strong>第六条</strong></p><p>预备党员必须面向党旗进行入党宣誓。誓词如下：我志愿加入中国共产党，拥护党的纲领，遵守党的章程，履行党员义务，执行党的决定，严守党的纪律，保守党的秘密，对党忠诚，积极工作，为共产主义奋斗终身，随时准备为党和人民牺牲一切，永不叛党。</p><p><strong>第七条</strong></p><p>预备党员的预备期为一年。党组织对预备党员应当认真教育和考察。 预备党员的义务同正式党员一样。预备党员的权利，除了没有表决权、选举权和被选举权以外，也同正式党员一样。 预备党员预备期满，党的支部应当及时讨论他能否转为正式党员。认真履行党员义务，具备党员条件的，应当按期转为正式党员；需要继续考察和教育的，可以延长预备期，但不能超过一年；不履行党员义务，不具备党员条件的，应当取消预备党员资格。预备党员转为正式党员，或延长预备期，或取消预备党员资格，都应当经支部大会讨论通过和上级党组织批准。 预备党员的预备期，从支部大会通过他为预备党员之日算起。党员的党龄，从预备期满转为正式党员之日算起。</p><p><strong>第八条</strong></p><p>每个党员，不论职务高低，都必须编入党的一个支部、小组或其他特定组织，参加党的组织生活，接受党内外群众的监督。党员领导干部还必须参加党委、党组的民主生活会。不允许有任何不参加党的组织生活、不接受党内外群众监督的特殊党员。</p><p><strong>第九条</strong></p><p>党员有退党的自由。党员要求退党，应当经支部大会讨论后宣布除名，并报上级党组织备案。 党员缺乏革命意志，不履行党员义务，不符合党员条件，党的支部应当对他进行教育，要求他限期改正；经教育仍无转变的，应当劝他退党。劝党员退党，应当经支部大会讨论决定，并报上级党组织批准。如被劝告退党的党员坚持不退，应当提交支部大会讨论，决定把他除名，并报上级党组织批准。 党员如果没有正当理由，连续六个月不参加党的组织生活，或不交纳党费，或不做党所分配的工作，就被认为是自行脱党。支部大会应当决定把这样的党员除名，并报上级党组织批准。</p><h3 id="第二章-党的组织制度"><a href="#第二章-党的组织制度" class="headerlink" title="第二章　党的组织制度"></a>第二章　党的组织制度</h3><p><strong>第十条</strong></p><p>党是根据自己的纲领和章程，按照民主集中制组织起来的统一整体。党的民主集中制的基本原则是： </p><ul><li>（一）党员个人服从党的组织，少数服从多数，下级组织服从上级组织，全党各个组织和全体党员服从党的全国代表大会和中央委员会。 </li><li>（二）党的各级领导机关，除它们派出的代表机关和在非党组织中的党组外，都由选举产生。 </li><li>（三）党的最高领导机关，是党的全国代表大会和它所产生的中央委员会。党的地方各级领导机关，是党的地方各级代表大会和它们所产生的委员会。党的各级委员会向同级的代表大会负责并报告工作。 </li><li>（四）党的上级组织要经常听取下级组织和党员群众的意见，及时解决他们提出的问题。党的下级组织既要向上级组织请示和报告工作，又要独立负责地解决自己职责范围内的问题。上下级组织之间要互通情报、互相支持和互相监督。党的各级组织要按规定实行党务公开，使党员对党内事务有更多的了解和参与。 </li><li>（五）党的各级委员会实行集体领导和个人分工负责相结合的制度。凡属重大问题都要按照集体领导、民主集中、个别酝酿、会议决定的原则，由党的委员会集体讨论，作出决定；委员会成员要根据集体的决定和分工，切实履行自己的职责。 </li><li>（六）党禁止任何形式的个人崇拜。要保证党的领导人的活动处于党和人民的监督之下，同时维护一切代表党和人民利益的领导人的威信。</li></ul><p><strong>第十一条</strong></p><p>党的各级代表大会的代表和委员会的产生，要体现选举人的意志。选举采用无记名投票的方式。候选人名单要由党组织和选举人充分酝酿讨论。可以直接采用候选人数多于应选人数的差额选举办法进行正式选举。也可以先采用差额选举办法进行预选，产生候选人名单，然后进行正式选举。选举人有了解候选人情况、要求改变候选人、不选任何一个候选人和另选他人的权利。任何组织和个人不得以任何方式强迫选举人选举或不选举某个人。 党的地方各级代表大会和基层代表大会的选举，如果发生违反党章的情况，上一级党的委员会在调查核实后，应作出选举无效和采取相应措施的决定，并报再上一级党的委员会审查批准，正式宣布执行。 党的各级代表大会代表实行任期制。</p><p><strong>第十二条</strong></p><p>党的中央和地方各级委员会在必要时召集代表会议，讨论和决定需要及时解决的重大问题。代表会议代表的名额和产生办法，由召集代表会议的委员会决定。</p><p><strong>第十三条</strong></p><p>凡是成立党的新组织，或是撤销党的原有组织，必须由上级党组织决定。 在党的地方各级代表大会和基层代表大会闭会期间，上级党的组织认为有必要时，可以调动或者指派下级党组织的负责人。 党的中央和地方各级委员会可以派出代表机关。</p><p><strong>第十四条</strong></p><p>党的中央和省、自治区、直辖市委员会实行巡视制度，在一届任期内，对所管理的地方、部门、企事业单位党组织实现巡视全覆盖。 中央有关部委和国家机关部门党组（党委）根据工作需要，开展巡视工作。 党的市（地、州、盟）和县（市、区、旗）委员会建立巡察制度。</p><p><strong>第十五条</strong></p><p>党的各级领导机关，对同下级组织有关的重要问题作出决定时，在通常情况下，要征求下级组织的意见。要保证下级组织能够正常行使他们的职权。凡属应由下级组织处理的问题，如无特殊情况，上级领导机关不要干预。</p><p><strong>第十六条</strong></p><p>有关全国性的重大政策问题，只有党中央有权作出决定，各部门、各地方的党组织可以向中央提出建议，但不得擅自作出决定和对外发表主张。 党的下级组织必须坚决执行上级组织的决定。下级组织如果认为上级组织的决定不符合本地区、本部门的实际情况，可以请求改变；如果上级组织坚持原决定，下级组织必须执行，并不得公开发表不同意见，但有权向再上一级组织报告。 党的各级组织的报刊和其他宣传工具，必须宣传党的路线、方针、政策和决议。</p><p><strong>第十七条</strong></p><p>党组织讨论决定问题，必须执行少数服从多数的原则。决定重要问题，要进行表决。对于少数人的不同意见，应当认真考虑。如对重要问题发生争论，双方人数接近，除了在紧急情况下必须按多数意见执行外，应当暂缓作出决定，进一步调查研究，交换意见，下次再表决；在特殊情况下，也可将争论情况向上级组织报告，请求裁决。 党员个人代表党组织发表重要主张，如果超出党组织已有决定的范围，必须提交所在的党组织讨论决定，或向上级党组织请示。任何党员不论职务高低，都不能个人决定重大问题；如遇紧急情况，必须由个人作出决定时，事后要迅速向党组织报告。不允许任何领导人实行个人专断和把个人凌驾于组织之上。</p><p><strong>第十八条</strong></p><p>党的中央、地方和基层组织，都必须重视党的建设，经常讨论和检查党的宣传工作、教育工作、组织工作、纪律检查工作、群众工作、统一战线工作等，注意研究党内外的思想政治状况。</p><h3 id="第三章-党的中央组织"><a href="#第三章-党的中央组织" class="headerlink" title="第三章　党的中央组织"></a>第三章　党的中央组织</h3><p><strong>第十九条</strong></p><p>党的全国代表大会每五年举行一次，由中央委员会召集。中央委员会认为有必要，或者有三分之一以上的省一级组织提出要求，全国代表大会可以提前举行；如无非常情况，不得延期举行。 全国代表大会代表的名额和选举办法，由中央委员会决定。</p><p><strong>第二十条</strong></p><p>党的全国代表大会的职权是： </p><ul><li>（一）听取和审查中央委员会的报告； </li><li>（二）审查中央纪律检查委员会的报告； </li><li>（三）讨论并决定党的重大问题； </li><li>（四）修改党的章程； </li><li>（五）选举中央委员会； </li><li>（六）选举中央纪律检查委员会。</li></ul><p><strong>第二十一条</strong></p><p>党的全国代表会议的职权是：讨论和决定重大问题；调整和增选中央委员会、中央纪律检查委员会的部分成员。调整和增选中央委员及候补中央委员的数额，不得超过党的全国代表大会选出的中央委员及候补中央委员各自总数的五分之一。</p><p><strong>第二十二条</strong></p><p>党的中央委员会每届任期五年。全国代表大会如提前或延期举行，它的任期相应地改变。中央委员会委员和候补委员必须有五年以上的党龄。中央委员会委员和候补委员的名额，由全国代表大会决定。中央委员会委员出缺，由中央委员会候补委员按照得票多少依次递补。 中央委员会全体会议由中央政治局召集，每年至少举行一次。中央政治局向中央委员会全体会议报告工作，接受监督。 在全国代表大会闭会期间，中央委员会执行全国代表大会的决议，领导党的全部工作，对外代表中国共产党。</p><p><strong>第二十三条</strong></p><p>党的中央政治局、中央政治局常务委员会和中央委员会总书记，由中央委员会全体会议选举。中央委员会总书记必须从中央政治局常务委员会委员中产生。 中央政治局和它的常务委员会在中央委员会全体会议闭会期间，行使中央委员会的职权。 中央书记处是中央政治局和它的常务委员会的办事机构；成员由中央政治局常务委员会提名，中央委员会全体会议通过。 中央委员会总书记负责召集中央政治局会议和中央政治局常务委员会会议，并主持中央书记处的工作。 党的中央军事委员会组成人员由中央委员会决定，中央军事委员会实行主席负责制。 每届中央委员会产生的中央领导机构和中央领导人，在下届全国代表大会开会期间，继续主持党的经常工作，直到下届中央委员会产生新的中央领导机构和中央领导人为止。</p><p><strong>第二十四条</strong></p><p>中国人民解放军的党组织，根据中央委员会的指示进行工作。中央军事委员会负责军队中党的工作和政治工作，对军队中党的组织体制和机构作出规定。</p><h3 id="第四章-党的地方组织"><a href="#第四章-党的地方组织" class="headerlink" title="第四章　党的地方组织"></a>第四章　党的地方组织</h3><p><strong>第二十五条</strong></p><p>党的省、自治区、直辖市的代表大会，设区的市和自治州的代表大会，县（旗）、自治县、不设区的市和市辖区的代表大会，每五年举行一次。 党的地方各级代表大会由同级党的委员会召集。在特殊情况下，经上一级委员会批准，可以提前或延期举行。 党的地方各级代表大会代表的名额和选举办法，由同级党的委员会决定，并报上一级党的委员会批准。</p><p><strong>第二十六条</strong></p><p>党的地方各级代表大会的职权是： </p><ul><li>（一）听取和审查同级委员会的报告； </li><li>（二）审查同级纪律检查委员会的报告； </li><li>（三）讨论本地区范围内的重大问题并作出决议； </li><li>（四）选举同级党的委员会，选举同级党的纪律检查委员会。</li></ul><p><strong>第二十七条</strong></p><p>党的省、自治区、直辖市、设区的市和自治州的委员会，每届任期五年。这些委员会的委员和候补委员必须有五年以上的党龄。 党的县（旗）、自治县、不设区的市和市辖区的委员会，每届任期五年。这些委员会的委员和候补委员必须有三年以上的党龄。 党的地方各级代表大会如提前或延期举行，由它选举的委员会的任期相应地改变。 党的地方各级委员会的委员和候补委员的名额，分别由上一级委员会决定。党的地方各级委员会委员出缺，由候补委员按照得票多少依次递补。 党的地方各级委员会全体会议，每年至少召开两次。 党的地方各级委员会在代表大会闭会期间，执行上级党组织的指示和同级党代表大会的决议，领导本地方的工作，定期向上级党的委员会报告工作。</p><p><strong>第二十八条</strong></p><p>党的地方各级委员会全体会议，选举常务委员会和书记、副书记，并报上级党的委员会批准。党的地方各级委员会的常务委员会，在委员会全体会议闭会期间，行使委员会职权；在下届代表大会开会期间，继续主持经常工作，直到新的常务委员会产生为止。 党的地方各级委员会的常务委员会定期向委员会全体会议报告工作，接受监督。</p><p><strong>第二十九条</strong></p><p>党的地区委员会和相当于地区委员会的组织，是党的省、自治区委员会在几个县、自治县、市范围内派出的代表机关。它根据省、自治区委员会的授权，领导本地区的工作。</p><h3 id="第五章-党的基层组织"><a href="#第五章-党的基层组织" class="headerlink" title="第五章　党的基层组织"></a>第五章　党的基层组织</h3><p><strong>第三十条</strong></p><p>企业、农村、机关、学校、科研院所、街道社区、社会组织、人民解放军连队和其他基层单位，凡是有正式党员三人以上的，都应当成立党的基层组织。 党的基层组织，根据工作需要和党员人数，经上级党组织批准，分别设立党的基层委员会、总支部委员会、支部委员会。基层委员会由党员大会或代表大会选举产生，总支部委员会和支部委员会由党员大会选举产生，提出委员候选人要广泛征求党员和群众的意见。</p><p><strong>第三十一条</strong></p><p>党的基层委员会、总支部委员会、支部委员会每届任期三年至五年。基层委员会、总支部委员会、支部委员会的书记、副书记选举产生后，应报上级党组织批准。</p><p><strong>第三十二条</strong></p><p>党的基层组织是党在社会基层组织中的战斗堡垒，是党的全部工作和战斗力的基础。它的基本任务是： </p><ul><li>（一）宣传和执行党的路线、方针、政策，宣传和执行党中央、上级组织和本组织的决议，充分发挥党员的先锋模范作用，积极创先争优，团结、组织党内外的干部和群众，努力完成本单位所担负的任务。 </li><li>（二）组织党员认真学习马克思列宁主义、毛泽东思想、邓小平理论、“三个代表”重要思想、科学发展观、习近平新时代中国特色社会主义思想，推进“两学一做”学习教育常态化制度化，学习党的路线、方针、政策和决议，学习党的基本知识，学习科学、文化、法律和业务知识。 </li><li>（三）对党员进行教育、管理、监督和服务，提高党员素质，坚定理想信念，增强党性，严格党的组织生活，开展批评和自我批评，维护和执行党的纪律，监督党员切实履行义务，保障党员的权利不受侵犯。加强和改进流动党员管理。 </li><li>（四）密切联系群众，经常了解群众对党员、党的工作的批评和意见，维护群众的正当权利和利益，做好群众的思想政治工作。 </li><li>（五）充分发挥党员和群众的积极性创造性，发现、培养和推荐他们中间的优秀人才，鼓励和支持他们在改革开放和社会主义现代化建设中贡献自己的聪明才智。 </li><li>（六）对要求入党的积极分子进行教育和培养，做好经常性的发展党员工作，重视在生产、工作第一线和青年中发展党员。 </li><li>（七）监督党员干部和其他任何工作人员严格遵守国家法律法规，严格遵守国家的财政经济法规和人事制度，不得侵占国家、集体和群众的利益。 </li><li>（八）教育党员和群众自觉抵制不良倾向，坚决同各种违纪违法行为作斗争。</li></ul><p><strong>第三十三条</strong></p><p>街道、乡、镇党的基层委员会和村、社区党组织，领导本地区的工作和基层社会治理，支持和保证行政组织、经济组织和群众自治组织充分行使职权。 国有企业党委（党组）发挥领导作用，把方向、管大局、保落实，依照规定讨论和决定企业重大事项。国有企业和集体企业中党的基层组织，围绕企业生产经营开展工作。保证监督党和国家的方针、政策在本企业的贯彻执行；支持股东会、董事会、监事会和经理（厂长）依法行使职权；全心全意依靠职工群众，支持职工代表大会开展工作；参与企业重大问题的决策；加强党组织的自身建设，领导思想政治工作、精神文明建设和工会、共青团等群团组织。 非公有制经济组织中党的基层组织，贯彻党的方针政策，引导和监督企业遵守国家的法律法规，领导工会、共青团等群团组织，团结凝聚职工群众，维护各方的合法权益，促进企业健康发展。 社会组织中党的基层组织，宣传和执行党的路线、方针、政策，领导工会、共青团等群团组织，教育管理党员，引领服务群众，推动事业发展。 实行行政领导人负责制的事业单位中党的基层组织，发挥战斗堡垒作用。实行党委领导下的行政领导人负责制的事业单位中党的基层组织，对重大问题进行讨论和作出决定，同时保证行政领导人充分行使自己的职权。 各级党和国家机关中党的基层组织，协助行政负责人完成任务，改进工作，对包括行政负责人在内的每个党员进行教育、管理、监督，不领导本单位的业务工作。</p><p><strong>第三十四条</strong></p><p>党支部是党的基础组织，担负直接教育党员、管理党员、监督党员和组织群众、宣传群众、凝聚群众、服务群众的职责。</p><h3 id="第六章-党的干部"><a href="#第六章-党的干部" class="headerlink" title="第六章　党的干部"></a>第六章　党的干部</h3><p><strong>第三十五条</strong></p><p>党的干部是党的事业的骨干，是人民的公仆，要做到忠诚干净担当。党按照德才兼备、以德为先的原则选拔干部，坚持五湖四海、任人唯贤，坚持事业为上、公道正派，反对任人唯亲，努力实现干部队伍的革命化、年轻化、知识化、专业化。 党重视教育、培训、选拔、考核和监督干部，特别是培养、选拔优秀年轻干部。积极推进干部制度改革。 党重视培养、选拔女干部和少数民族干部。</p><p><strong>第三十六条</strong></p><p>党的各级领导干部必须信念坚定、为民服务、勤政务实、敢于担当、清正廉洁，模范地履行本章程第三条所规定的党员的各项义务，并且必须具备以下的基本条件： </p><ul><li>（一）具有履行职责所需要的马克思列宁主义、毛泽东思想、邓小平理论、“三个代表”重要思想、科学发展观的水平，带头贯彻落实习近平新时代中国特色社会主义思想，努力用马克思主义的立场、观点、方法分析和解决实际问题，坚持讲学习、讲政治、讲正气，经得起各种风浪的考验。 </li><li>（二）具有共产主义远大理想和中国特色社会主义坚定信念，坚决执行党的基本路线和各项方针、政策，立志改革开放，献身现代化事业，在社会主义建设中艰苦创业，树立正确政绩观，做出经得起实践、人民、历史检验的实绩。 </li><li>（三）坚持解放思想，实事求是，与时俱进，开拓创新，认真调查研究，能够把党的方针、政策同本地区、本部门的实际相结合，卓有成效地开展工作，讲实话，办实事，求实效。 </li><li>（四）有强烈的革命事业心和政治责任感，有实践经验，有胜任领导工作的组织能力、文化水平和专业知识。 </li><li>（五）正确行使人民赋予的权力，坚持原则，依法办事，清正廉洁，勤政为民，以身作则，艰苦朴素，密切联系群众，坚持党的群众路线，自觉地接受党和群众的批评和监督，加强道德修养，讲党性、重品行、作表率，做到自重、自省、自警、自励，反对形式主义、官僚主义、享乐主义和奢靡之风，反对任何滥用职权、谋求私利的行为。 </li><li>（六）坚持和维护党的民主集中制，有民主作风，有全局观念，善于团结同志，包括团结同自己有不同意见的同志一道工作。</li></ul><p><strong>第三十七条</strong></p><p>党员干部要善于同党外干部合作共事，尊重他们，虚心学习他们的长处。 党的各级组织要善于发现和推荐有真才实学的党外干部担任领导工作，保证他们有职有权，充分发挥他们的作用。</p><p><strong>第三十八条</strong></p><p>党的各级领导干部，无论是由民主选举产生的，或是由领导机关任命的，他们的职务都不是终身的，都可以变动或解除。 年龄和健康状况不适宜于继续担任工作的干部，应当按照国家的规定退、离休。</p><h3 id="第七章-党的纪律"><a href="#第七章-党的纪律" class="headerlink" title="第七章　党的纪律"></a>第七章　党的纪律</h3><p><strong>第三十九条</strong></p><p>党的纪律是党的各级组织和全体党员必须遵守的行为规则，是维护党的团结统一、完成党的任务的保证。党组织必须严格执行和维护党的纪律，共产党员必须自觉接受党的纪律的约束。</p><p><strong>第四十条</strong></p><p>党的纪律主要包括政治纪律、组织纪律、廉洁纪律、群众纪律、工作纪律、生活纪律。 坚持惩前毖后、治病救人，执纪必严、违纪必究，抓早抓小、防微杜渐，按照错误性质和情节轻重，给以批评教育直至纪律处分。运用监督执纪“四种形态”，让“红红脸、出出汗”成为常态，党纪处分、组织调整成为管党治党的重要手段，严重违纪、严重触犯刑律的党员必须开除党籍。 党内严格禁止用违反党章和国家法律的手段对待党员，严格禁止打击报复和诬告陷害。违反这些规定的组织或个人必须受到党的纪律和国家法律的追究。</p><p><strong>第四十一条</strong></p><p>对党员的纪律处分有五种：警告、严重警告、撤销党内职务、留党察看、开除党籍。 留党察看最长不超过两年。党员在留党察看期间没有表决权、选举权和被选举权。党员经过留党察看，确已改正错误的，应当恢复其党员的权利；坚持错误不改的，应当开除党籍。 开除党籍是党内的最高处分。各级党组织在决定或批准开除党员党籍的时候，应当全面研究有关的材料和意见，采取十分慎重的态度。</p><p><strong>第四十二条</strong></p><p>对党员的纪律处分，必须经过支部大会讨论决定，报党的基层委员会批准；如果涉及的问题比较重要或复杂，或给党员以开除党籍的处分，应分别不同情况，报县级或县级以上党的纪律检查委员会审查批准。在特殊情况下，县级和县级以上各级党的委员会和纪律检查委员会有权直接决定给党员以纪律处分。 对党的中央委员会委员、候补委员，给以警告、严重警告处分，由中央纪律检查委员会常务委员会审议后，报党中央批准。对地方各级党的委员会委员、候补委员，给以警告、严重警告处分，应由上一级纪律检查委员会批准，并报它的同级党的委员会备案。 对党的中央委员会和地方各级委员会的委员、候补委员，给以撤销党内职务、留党察看或开除党籍的处分，必须由本人所在的委员会全体会议三分之二以上的多数决定。在全体会议闭会期间，可以先由中央政治局和地方各级委员会常务委员会作出处理决定，待召开委员会全体会议时予以追认。对地方各级委员会委员和候补委员的上述处分，必须经过上级纪律检查委员会常务委员会审议，由这一级纪律检查委员会报同级党的委员会批准。 严重触犯刑律的中央委员会委员、候补委员，由中央政治局决定开除其党籍；严重触犯刑律的地方各级委员会委员、候补委员，由同级委员会常务委员会决定开除其党籍。</p><p><strong>第四十三条</strong></p><p>党组织对党员作出处分决定，应当实事求是地查清事实。处分决定所依据的事实材料和处分决定必须同本人见面，听取本人说明情况和申辩。如果本人对处分决定不服，可以提出申诉，有关党组织必须负责处理或者迅速转递，不得扣压。对于确属坚持错误意见和无理要求的人，要给以批评教育。</p><p><strong>第四十四条</strong></p><p>党组织如果在维护党的纪律方面失职，必须问责。 对于严重违犯党的纪律、本身又不能纠正的党组织，上一级党的委员会在查明核实后，应根据情节严重的程度，作出进行改组或予以解散的决定，并报再上一级党的委员会审查批准，正式宣布执行。</p><h3 id="第八章-党的纪律检查机关"><a href="#第八章-党的纪律检查机关" class="headerlink" title="第八章　党的纪律检查机关"></a>第八章　党的纪律检查机关</h3><p><strong>第四十五条</strong></p><p>党的中央纪律检查委员会在党的中央委员会领导下进行工作。党的地方各级纪律检查委员会和基层纪律检查委员会在同级党的委员会和上级纪律检查委员会双重领导下进行工作。上级党的纪律检查委员会加强对下级纪律检查委员会的领导。 党的各级纪律检查委员会每届任期和同级党的委员会相同。 党的中央纪律检查委员会全体会议，选举常务委员会和书记、副书记，并报党的中央委员会批准。党的地方各级纪律检查委员会全体会议，选举常务委员会和书记、副书记，并由同级党的委员会通过，报上级党的委员会批准。党的基层委员会是设立纪律检查委员会，还是设立纪律检查委员，由它的上一级党组织根据具体情况决定。党的总支部委员会和支部委员会设纪律检查委员。 党的中央和地方纪律检查委员会向同级党和国家机关全面派驻党的纪律检查组。纪律检查组组长参加驻在部门党的领导组织的有关会议。他们的工作必须受到该机关党的领导组织的支持。</p><p><strong>第四十六条</strong></p><p>党的各级纪律检查委员会是党内监督专责机关，主要任务是：维护党的章程和其他党内法规，检查党的路线、方针、政策和决议的执行情况，协助党的委员会推进全面从严治党、加强党风建设和组织协调反腐败工作。 党的各级纪律检查委员会的职责是监督、执纪、问责，要经常对党员进行遵守纪律的教育，作出关于维护党纪的决定；对党的组织和党员领导干部履行职责、行使权力进行监督，受理处置党员群众检举举报，开展谈话提醒、约谈函询；检查和处理党的组织和党员违反党的章程和其他党内法规的比较重要或复杂的案件，决定或取消对这些案件中的党员的处分；进行问责或提出责任追究的建议；受理党员的控告和申诉；保障党员的权利。 各级纪律检查委员会要把处理特别重要或复杂的案件中的问题和处理的结果，向同级党的委员会报告。党的地方各级纪律检查委员会和基层纪律检查委员会要同时向上级纪律检查委员会报告。 各级纪律检查委员会发现同级党的委员会委员有违犯党的纪律的行为，可以先进行初步核实，如果需要立案检查的，应当在向同级党的委员会报告的同时向上一级纪律检查委员会报告；涉及常务委员的，报告上一级纪律检查委员会，由上一级纪律检查委员会进行初步核实，需要审查的，由上一级纪律检查委员会报它的同级党的委员会批准。</p><p><strong>第四十七条</strong></p><p>上级纪律检查委员会有权检查下级纪律检查委员会的工作，并且有权批准和改变下级纪律检查委员会对于案件所作的决定。如果所要改变的该下级纪律检查委员会的决定，已经得到它的同级党的委员会的批准，这种改变必须经过它的上一级党的委员会批准。 党的地方各级纪律检查委员会和基层纪律检查委员会如果对同级党的委员会处理案件的决定有不同意见，可以请求上一级纪律检查委员会予以复查；如果发现同级党的委员会或它的成员有违犯党的纪律的情况，在同级党的委员会不给予解决或不给予正确解决的时候，有权向上级纪律检查委员会提出申诉，请求协助处理。</p><h3 id="第九章-党组"><a href="#第九章-党组" class="headerlink" title="第九章　党组"></a>第九章　党组</h3><p><strong>第四十八条</strong></p><p>在中央和地方国家机关、人民团体、经济组织、文化组织和其他非党组织的领导机关中，可以成立党组。党组发挥领导核心作用。党组的任务，主要是负责贯彻执行党的路线、方针、政策；加强对本单位党的建设的领导，履行全面从严治党责任；讨论和决定本单位的重大问题；做好干部管理工作；讨论和决定基层党组织设置调整和发展党员、处分党员等重要事项；团结党外干部和群众，完成党和国家交给的任务；领导机关和直属单位党组织的工作。</p><p><strong>第四十九条</strong></p><p>党组的成员，由批准成立党组的党组织决定。党组设书记，必要时还可以设副书记。 党组必须服从批准它成立的党组织领导。</p><p><strong>第五十条</strong></p><p>对下属单位实行集中统一领导的国家工作部门可以建立党委，党委的产生办法、职权和工作任务，由中央另行规定。</p><h3 id="第十章-党和共产主义青年团的关系"><a href="#第十章-党和共产主义青年团的关系" class="headerlink" title="第十章　党和共产主义青年团的关系"></a>第十章　党和共产主义青年团的关系</h3><p><strong>第五十一条</strong></p><p>中国共产主义青年团是中国共产党领导的先进青年的群团组织，是广大青年在实践中学习中国特色社会主义和共产主义的学校，是党的助手和后备军。共青团中央委员会受党中央委员会领导。共青团的地方各级组织受同级党的委员会领导，同时受共青团上级组织领导。</p><p><strong>第五十二条</strong></p><p>党的各级委员会要加强对共青团的领导，注意团的干部的选拔和培训。党要坚决支持共青团根据广大青年的特点和需要，生动活泼地、富于创造性地进行工作，充分发挥团的突击队作用和联系广大青年的桥梁作用。 团的县级和县级以下各级委员会书记，企业事业单位的团委员会书记，是党员的，可以列席同级党的委员会和常务委员会的会议。</p><h3 id="第十一章-党徽党旗"><a href="#第十一章-党徽党旗" class="headerlink" title="第十一章　党徽党旗"></a>第十一章　党徽党旗</h3><p><strong>第五十三条</strong></p><p>中国共产党党徽为镰刀和锤头组成的图案。</p><p><strong>第五十四条</strong></p><p>中国共产党党旗为旗面缀有金黄色党徽图案的红旗。</p><p><strong>第五十五条</strong></p><p>中国共产党的党徽党旗是中国共产党的象征和标志。党的各级组织和每一个党员都要维护党徽党旗的尊严。要按照规定制作和使用党徽党旗。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;基本信息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;效力级别    党内法规&lt;/p&gt;
&lt;p&gt;时效性    现行有效&lt;/p&gt;
&lt;p&gt;发布日期    2017-10-24
    
    </summary>
    
    
      <category term="法律" scheme="https://removeif.github.io/categories/%E6%B3%95%E5%BE%8B/"/>
    
    
      <category term="法律" scheme="https://removeif.github.io/tags/%E6%B3%95%E5%BE%8B/"/>
    
      <category term="党章" scheme="https://removeif.github.io/tags/%E5%85%9A%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>秒杀系统如何支撑百万QPS</title>
    <link href="https://removeif.github.io/design-architecture/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E5%A6%82%E4%BD%95%E6%94%AF%E6%92%91%E7%99%BE%E4%B8%87QPS.html"/>
    <id>https://removeif.github.io/design-architecture/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E5%A6%82%E4%BD%95%E6%94%AF%E6%92%91%E7%99%BE%E4%B8%87QPS.html</id>
    <published>2020-02-05T10:00:44.000Z</published>
    <updated>2020-02-08T09:28:57.272Z</updated>
    
    <content type="html"><![CDATA[<h3 id="12306抢票-极限并发带来的思考"><a href="#12306抢票-极限并发带来的思考" class="headerlink" title="12306抢票,极限并发带来的思考?"></a>12306抢票,极限并发带来的思考?</h3><p>每到节假日期间,一二线城市返乡、外出游玩的人们几乎都面临着一个问题：抢火车票!虽然现在大多数情况下都能订到票,但是放票瞬间即无票的场景，相信大家都深有体会。尤其是春节期间，大家不仅使用12306，还会考虑“智行”和其他的抢票软件,全国上下几亿人在这段时间都在抢票。 <a id="more"></a><br>“12306服务”承受着这个世界上任何秒杀系统都无法超越的QPS,上百万的并发再正常不过了！笔者专门研究了一下“12306”的服务端架构,学习到了其系统设计上很多亮点，在这里和大家分享一下并模拟一个例子：如何在100万人同时抢1万张火车票时，系统提供正常、稳定的服务。<a href="https://github.com/GuoZhaoran/spikeSystem">github代码地址</a></p><h3 id="1-大型高并发系统架构"><a href="#1-大型高并发系统架构" class="headerlink" title="1. 大型高并发系统架构"></a>1. 大型高并发系统架构</h3><p>高并发的系统架构都会采用分布式集群部署，服务上层有着层层负载均衡，并提供各种容灾手段(双火机房、节点容错、服务器灾备等)保证系统的高可用,流量也会根据不同的负载能力和配置策略均衡到不同的服务器上。下边是一个简单的示意图:</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200205172312.png" alt=""></p><h4 id="1-1-负载均衡简介"><a href="#1-1-负载均衡简介" class="headerlink" title="1.1 负载均衡简介"></a>1.1 负载均衡简介</h4><p>上图中描述了用户请求到服务器经历了三层的负载均衡，下边分别简单介绍一下这三种负载均衡：</p><ul><li>OSPF(开放式最短链路优先)是一个内部网关协议(Interior Gateway Protocol,简称IGP)。OSPF通过路由器之间通告网络接口的状态来建立链路状态数据库，生成最短路径树，OSPF会自动计算路由接口上的Cost值，但也可以通过手工指定该接口的Cost值，手工指定的优先于自动计算的值。OSPF计算的Cost，同样是和接口带宽成反比，带宽越高，Cost值越小。到达目标相同Cost值的路径，可以执行负载均衡，最多6条链路同时执行负载均衡。</li><li>LVS (Linux VirtualServer)，它是一种集群(Cluster)技术，采用IP负载均衡技术和基于内容请求分发技术。调度器具有很好的吞吐率，将请求均衡地转移到不同的服务器上执行，且调度器自动屏蔽掉服务器的故障，从而将一组服务器构成一个高性能的、高可用的虚拟服务器。</li><li>Nginx想必大家都很熟悉了,是一款非常高性能的http代理/反向代理服务器,服务开发中也经常使用它来做负载均衡。Nginx实现负载均衡的方式主要有三种:轮询、加权轮询、ip hash轮询，下面我们就针对Nginx的加权轮询做专门的配置和测试</li></ul><h4 id="1-2-Nginx加权轮询的演示"><a href="#1-2-Nginx加权轮询的演示" class="headerlink" title="1.2 Nginx加权轮询的演示"></a>1.2 Nginx加权轮询的演示</h4><p>Nginx实现负载均衡通过upstream模块实现，其中加权轮询的配置是可以给相关的服务加上一个权重值，配置的时候可能根据服务器的性能、负载能力设置相应的负载。下面是一个加权轮询负载的配置，我将在本地的监听3001-3004端口,分别配置1，2，3，4的权重:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置负载均衡</span></span><br><span class="line">    upstream load_rule &#123;</span><br><span class="line">       server 127.0.0.1:3001 weight=1;</span><br><span class="line">       server 127.0.0.1:3002 weight=2;</span><br><span class="line">       server 127.0.0.1:3003 weight=3;</span><br><span class="line">       server 127.0.0.1:3004 weight=4;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  load_balance.com www.load_balance.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">       proxy_pass http://load_rule;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我在本地/etc/hosts目录下配置了 <a href="http://www.load_balance.com">www.load_balance.com</a> 的虚拟域名地址，接下来使用Go语言开启四个http端口监听服务，下面是监听在3001端口的Go程序,其他几个只需要修改端口即可：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">"/buy/ticket"</span>, handleReq)</span><br><span class="line">http.ListenAndServe(<span class="string">":3001"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理请求函数,根据请求将响应结果信息写入日志</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleReq</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">failedMsg :=  <span class="string">"handle in port:"</span></span><br><span class="line">writeLog(failedMsg, <span class="string">"./stat.log"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写入日志</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeLog</span><span class="params">(msg <span class="keyword">string</span>, logPath <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">fd, _ := os.OpenFile(logPath, os.O_RDWR|os.O_CREATE|os.O_APPEND, <span class="number">0644</span>)</span><br><span class="line"><span class="keyword">defer</span> fd.Close()</span><br><span class="line">content := strings.Join([]<span class="keyword">string</span>&#123;msg, <span class="string">"\r\n"</span>&#125;, <span class="string">"3001"</span>)</span><br><span class="line">buf := []<span class="keyword">byte</span>(content)</span><br><span class="line">fd.Write(buf)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我将请求的端口日志信息写到了./stat.log文件当中，然后使用ab压测工具做压测:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ab -n 1000 -c 100 http://www.load_balance.com/buy/ticket</span><br></pre></td></tr></table></figure><p>统计日志中的结果，3001-3004端口分别得到了100、200、300、400的请求量，这和我在nginx中配置的权重占比很好的吻合在了一起，并且负载后的流量非常的均匀、随机。具体的实现大家可以参考nginx的upsteam模块实现源码，这里推荐一篇文章：<a href="https://www.kancloud.cn/digest/understandingnginx/202607">Nginx 中 upstream 机制的负载均衡</a></p><h3 id="2-秒杀抢购系统选型"><a href="#2-秒杀抢购系统选型" class="headerlink" title="2.秒杀抢购系统选型"></a>2.秒杀抢购系统选型</h3><p>回到我们最初提到的问题中来：火车票秒杀系统如何在高并发情况下提供正常、稳定的服务呢？</p><p>从上面的介绍我们知道用户秒杀流量通过层层的负载均衡，均匀到了不同的服务器上，即使如此，集群中的单机所承受的QPS也是非常高的。如何将单机性能优化到极致呢？要解决这个问题，我们就要想明白一件事： 通常订票系统要处理生成订单、减扣库存、用户支付这三个基本的阶段，我们系统要做的事情是要保证火车票订单<strong>不超卖、不少卖</strong>，每张售卖的车票都必须支付才有效，还要保证系统承受极高的并发。这三个阶段的先后顺序改怎么分配才更加合理呢?我们来分析一下：</p><h4 id="2-1-下单减库存"><a href="#2-1-下单减库存" class="headerlink" title="2.1 下单减库存"></a>2.1 下单减库存</h4><p>当用户并发请求到达服务端时，首先创建订单，然后扣除库存，等待用户支付。这种顺序是我们一般人首先会想到的解决方案，这种情况下也能保证订单不会超卖，因为创建订单之后就会减库存，这是一个原子操作。但是这样也会产生一些问题，第一就是在极限并发情况下，任何一个内存操作的细节都至关影响性能，尤其像创建订单这种逻辑，一般都需要存储到磁盘数据库的，对数据库的压力是可想而知的；第二是如果用户存在恶意下单的情况，只下单不支付这样库存就会变少，会少卖很多订单，虽然服务端可以限制IP和用户的购买订单数量，这也不算是一个好方法。</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200205173057.png" alt=""></p><h4 id="2-2-支付减库存"><a href="#2-2-支付减库存" class="headerlink" title="2.2 支付减库存"></a>2.2 支付减库存</h4><p>如果等待用户支付了订单在减库存，第一感觉就是不会少卖。但是这是并发架构的大忌，因为在极限并发情况下，用户可能会创建很多订单，当库存减为零的时候很多用户发现抢到的订单支付不了了，这也就是所谓的“超卖”。也不能避免并发操作数据库磁盘IO</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200205173152.png" alt=""></p><h4 id="2-3-预扣库存"><a href="#2-3-预扣库存" class="headerlink" title="2.3 预扣库存"></a>2.3 预扣库存</h4><p>从上边两种方案的考虑，我们可以得出结论：只要创建订单，就要频繁操作数据库IO。那么有没有一种不需要直接操作数据库IO的方案呢，这就是预扣库存。先扣除了库存，保证不超卖，然后异步生成用户订单，这样响应给用户的速度就会快很多；那么怎么保证不少卖呢？用户拿到了订单，不支付怎么办？我们都知道现在订单都有有效期，比如说用户五分钟内不支付，订单就失效了，订单一旦失效，就会加入新的库存，这也是现在很多网上零售企业保证商品不少卖采用的方案。订单的生成是异步的,一般都会放到MQ、kafka这样的即时消费队列中处理,订单量比较少的情况下，生成订单非常快，用户几乎不用排队。</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200205173416.png" alt=""></p><h3 id="3-扣库存的艺术"><a href="#3-扣库存的艺术" class="headerlink" title="3. 扣库存的艺术"></a>3. 扣库存的艺术</h3><p>从上面的分析可知，显然预扣库存的方案最合理。我们进一步分析扣库存的细节，这里还有很大的优化空间，库存存在哪里？怎样保证高并发下，正确的扣库存，还能快速的响应用户请求？</p><p>在单机低并发情况下，我们实现扣库存通常是这样的:</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200205173602.png" alt=""></p><p>为了保证扣库存和生成订单的原子性，需要采用事务处理，然后取库存判断、减库存，最后提交事务，整个流程有很多IO，对数据库的操作又是阻塞的。这种方式根本不适合高并发的秒杀系统。</p><p>接下来我们对单机扣库存的方案做优化：<strong>本地扣库存</strong>。我们把一定的库存量分配到本地机器，直接在内存中减库存，然后按照之前的逻辑异步创建订单。改进过之后的单机系统是这样的:</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200205173625.png" alt=""></p><p>这样就避免了对数据库频繁的IO操作，只在内存中做运算，极大的提高了单机抗并发的能力。但是百万的用户请求量单机是无论如何也抗不住的，虽然nginx处理网络请求使用epoll模型，c10k的问题在业界早已得到了解决。但是linux系统下，一切资源皆文件，网络请求也是这样，大量的文件描述符会使操作系统瞬间失去响应。上面我们提到了nginx的加权均衡策略，我们不妨假设将100W的用户请求量平均均衡到100台服务器上，这样单机所承受的并发量就小了很多。然后我们每台机器本地库存100张火车票，100台服务器上的总库存还是1万，这样保证了库存订单不超卖,下面是我们描述的集群架构:</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200205173732.png" alt=""></p><p>问题接踵而至，在高并发情况下，现在我们还无法保证系统的高可用，假如这100台服务器上有两三台机器因为扛不住并发的流量或者其他的原因宕机了。那么这些服务器上的订单就卖不出去了，这就造成了订单的少卖。要解决这个问题，我们需要对总订单量做统一的管理，这就是接下来的容错方案。服务器不仅要在本地减库存，另外要<strong>远程统一减库存</strong>。有了远程统一减库存的操作，我们就可以根据机器负载情况，为每台机器分配一些多余的“buffer库存”用来防止机器中有机器宕机的情况。我们结合下面架构图具体分析一下:</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200205173937.png" alt=""></p><p>我们采用Redis存储统一库存，因为Redis的性能非常高，号称单机QPS能抗10W的并发。在本地减库存以后，如果本地有订单，我们再去请求redis远程减库存，本地减库存和远程减库存都成功了，才返回给用户抢票成功的提示,这样也能有效的保证订单不会超卖。当机器中有机器宕机时，因为每个机器上有预留的buffer余票，所以宕机机器上的余票依然能够在其他机器上得到弥补，保证了不少卖。buffer余票设置多少合适呢，理论上buffer设置的越多，系统容忍宕机的机器数量就越多，但是buffer设置的太大也会对redis造成一定的影响。虽然redis内存数据库抗并发能力非常高，请求依然会走一次网络IO,其实抢票过程中对redis的请求次数是本地库存和buffer库存的总量，因为当本地库存不足时，系统直接返回用户“已售罄”的信息提示，就不会再走统一扣库存的逻辑，这在一定程度上也避免了巨大的网络请求量把redis压跨，所以buffer值设置多少，需要架构师对系统的负载能力做认真的考量。</p><h3 id="4-代码演示"><a href="#4-代码演示" class="headerlink" title="4. 代码演示"></a>4. 代码演示</h3><p>Go语言原生为并发设计，我采用go语言给大家演示一下单机抢票的具体流程。</p><h4 id="4-1-初始化工作"><a href="#4-1-初始化工作" class="headerlink" title="4.1 初始化工作"></a>4.1 初始化工作</h4><p>go包中的init函数先于main函数执行，在这个阶段主要做一些准备性工作。我们系统需要做的准备工作有：初始化本地库存、初始化远程redis存储统一库存的hash键值、初始化redis连接池；另外还需要初始化一个大小为1的int类型chan,目的是实现分布式锁的功能，也可以直接使用读写锁或者使用redis等其他的方式避免资源竞争,但使用channel更加高效，这就是go语言的哲学：<strong>不要通过共享内存来通信，而要通过通信来共享内存</strong>。redis库使用的是redigo，下面是代码实现:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">//localSpike包结构体定义</span></span><br><span class="line"><span class="keyword">package</span> localSpike</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LocalSpike <span class="keyword">struct</span> &#123;</span><br><span class="line">LocalInStock     <span class="keyword">int64</span></span><br><span class="line">LocalSalesVolume <span class="keyword">int64</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="comment">//remoteSpike对hash结构的定义和redis连接池</span></span><br><span class="line"><span class="keyword">package</span> remoteSpike</span><br><span class="line"><span class="comment">//远程订单存储健值</span></span><br><span class="line"><span class="keyword">type</span> RemoteSpikeKeys <span class="keyword">struct</span> &#123;</span><br><span class="line">SpikeOrderHashKey <span class="keyword">string</span><span class="comment">//redis中秒杀订单hash结构key</span></span><br><span class="line">TotalInventoryKey <span class="keyword">string</span><span class="comment">//hash结构中总订单库存key</span></span><br><span class="line">QuantityOfOrderKey <span class="keyword">string</span><span class="comment">//hash结构中已有订单数量key</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化redis连接池</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPool</span><span class="params">()</span> *<span class="title">redis</span>.<span class="title">Pool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;redis.Pool&#123;</span><br><span class="line">MaxIdle:   <span class="number">10000</span>,</span><br><span class="line">MaxActive: <span class="number">12000</span>, <span class="comment">// max number of connections</span></span><br><span class="line">Dial: <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(redis.Conn, error)</span></span> &#123;</span><br><span class="line">c, err := redis.Dial(<span class="string">"tcp"</span>, <span class="string">":6379"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c, err</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">localSpike = localSpike2.LocalSpike&#123;</span><br><span class="line">LocalInStock:     <span class="number">150</span>,</span><br><span class="line">LocalSalesVolume: <span class="number">0</span>,</span><br><span class="line">&#125;</span><br><span class="line">remoteSpike = remoteSpike2.RemoteSpikeKeys&#123;</span><br><span class="line">SpikeOrderHashKey:  <span class="string">"ticket_hash_key"</span>,</span><br><span class="line">TotalInventoryKey:  <span class="string">"ticket_total_nums"</span>,</span><br><span class="line">QuantityOfOrderKey: <span class="string">"ticket_sold_nums"</span>,</span><br><span class="line">&#125;</span><br><span class="line">redisPool = remoteSpike2.NewPool()</span><br><span class="line">done = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line">done &lt;- <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-本地扣库存和统一扣库存个"><a href="#4-2-本地扣库存和统一扣库存个" class="headerlink" title="4.2 本地扣库存和统一扣库存个"></a>4.2 本地扣库存和统一扣库存个</h4><p>本地扣库存逻辑非常简单，用户请求过来，添加销量，然后对比销量是否大于本地库存，返回bool值:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> localSpike</span><br><span class="line"><span class="comment">//本地扣库存,返回bool值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(spike *LocalSpike)</span> <span class="title">LocalDeductionStock</span><span class="params">()</span> <span class="title">bool</span></span>&#123;</span><br><span class="line">spike.LocalSalesVolume = spike.LocalSalesVolume + <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> spike.LocalSalesVolume &lt; spike.LocalInStock</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这里对共享数据LocalSalesVolume的操作是要使用锁来实现的，但是因为本地扣库存和统一扣库存是一个原子性操作，所以在最上层使用channel来实现，这块后边会讲。统一扣库存操作redis，因为redis是单线程的，而我们要实现从中取数据，写数据并计算一些列步骤，我们要配合lua脚本打包命令，保证操作的原子性:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">package</span> remoteSpike</span><br><span class="line">......</span><br><span class="line">const LuaScript = `</span><br><span class="line">        <span class="keyword">local</span> ticket_key = KEYS[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">local</span> ticket_total_key = ARGV[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">local</span> ticket_sold_key = ARGV[<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">local</span> ticket_total_nums = <span class="built_in">tonumber</span>(redis.call(<span class="string">'HGET'</span>, ticket_key, ticket_total_key))</span><br><span class="line">        <span class="keyword">local</span> ticket_sold_nums = <span class="built_in">tonumber</span>(redis.call(<span class="string">'HGET'</span>, ticket_key, ticket_sold_key))</span><br><span class="line"><span class="comment">-- 查看是否还有余票,增加订单数量,返回结果值</span></span><br><span class="line">       <span class="keyword">if</span>(ticket_total_nums &gt;= ticket_sold_nums) <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">return</span> redis.call(<span class="string">'HINCRBY'</span>, ticket_key, ticket_sold_key, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">`</span><br><span class="line">//远端统一扣库存</span><br><span class="line">func (RemoteSpikeKeys *RemoteSpikeKeys) RemoteDeductionStock(conn redis.Conn) bool &#123;</span><br><span class="line">lua := redis.NewScript(<span class="number">1</span>, LuaScript)</span><br><span class="line">result, err := redis.Int(lua.Do(conn, RemoteSpikeKeys.SpikeOrderHashKey, RemoteSpikeKeys.TotalInventoryKey, RemoteSpikeKeys.QuantityOfOrderKey))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result != <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用hash结构存储总库存和总销量的信息,用户请求过来时，判断总销量是否大于库存，然后返回相关的bool值。在启动服务之前，我们需要初始化redis的初始库存信息:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hmset ticket_hash_key <span class="string">"ticket_total_nums"</span> 10000 <span class="string">"ticket_sold_nums"</span> 0</span><br></pre></td></tr></table></figure><h4 id="4-3-响应用户信息"><a href="#4-3-响应用户信息" class="headerlink" title="4.3 响应用户信息"></a>4.3 响应用户信息</h4><p>我们开启一个http服务，监听在一个端口上:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">"/buy/ticket"</span>, handleReq)</span><br><span class="line">http.ListenAndServe(<span class="string">":3005"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面我们做完了所有的初始化工作，接下来handleReq的逻辑非常清晰，判断是否抢票成功，返回给用户信息就可以了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="comment">//处理请求函数,根据请求将响应结果信息写入日志</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleReq</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">redisConn := redisPool.Get()</span><br><span class="line">LogMsg := <span class="string">""</span></span><br><span class="line">&lt;-done</span><br><span class="line"><span class="comment">//全局读写锁</span></span><br><span class="line"><span class="keyword">if</span> localSpike.LocalDeductionStock() &amp;&amp; remoteSpike.RemoteDeductionStock(redisConn) &#123;</span><br><span class="line">util.RespJson(w, <span class="number">1</span>,  <span class="string">"抢票成功"</span>, <span class="literal">nil</span>)</span><br><span class="line">LogMsg = LogMsg + <span class="string">"result:1,localSales:"</span> + strconv.FormatInt(localSpike.LocalSalesVolume, <span class="number">10</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">util.RespJson(w, <span class="number">-1</span>, <span class="string">"已售罄"</span>, <span class="literal">nil</span>)</span><br><span class="line">LogMsg = LogMsg + <span class="string">"result:0,localSales:"</span> + strconv.FormatInt(localSpike.LocalSalesVolume, <span class="number">10</span>)</span><br><span class="line">&#125;</span><br><span class="line">done &lt;- <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将抢票状态写入到log中</span></span><br><span class="line">writeLog(LogMsg, <span class="string">"./stat.log"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeLog</span><span class="params">(msg <span class="keyword">string</span>, logPath <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">fd, _ := os.OpenFile(logPath, os.O_RDWR|os.O_CREATE|os.O_APPEND, <span class="number">0644</span>)</span><br><span class="line"><span class="keyword">defer</span> fd.Close()</span><br><span class="line">content := strings.Join([]<span class="keyword">string</span>&#123;msg, <span class="string">"\r\n"</span>&#125;, <span class="string">""</span>)</span><br><span class="line">buf := []<span class="keyword">byte</span>(content)</span><br><span class="line">fd.Write(buf)</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>前边提到我们扣库存时要考虑竞态条件，我们这里是使用channel避免并发的读写，保证了请求的高效顺序执行。我们将接口的返回信息写入到了./stat.log文件方便做压测统计。</p><h4 id="4-4-单机服务压测"><a href="#4-4-单机服务压测" class="headerlink" title="4.4 单机服务压测"></a>4.4 单机服务压测</h4><p>开启服务，我们使用ab压测工具进行测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ab -n 10000 -c 100 http://127.0.0.1:3005/buy/ticket</span><br></pre></td></tr></table></figure><p>下面是我本地低配mac的压测信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">This is ApacheBench, Version <span class="number">2.3</span> &lt;$Revision: <span class="number">1826891</span> $&gt;</span><br><span class="line">Copyright <span class="number">1996</span> Adam Twiss, Zeus Technology Ltd, http:<span class="comment">//www.zeustech.net/</span></span><br><span class="line">Licensed to The Apache Software Foundation, http:<span class="comment">//www.apache.org/</span></span><br><span class="line"></span><br><span class="line">Benchmarking <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> (be patient)</span><br><span class="line">Completed <span class="number">1000</span> requests</span><br><span class="line">Completed <span class="number">2000</span> requests</span><br><span class="line">Completed <span class="number">3000</span> requests</span><br><span class="line">Completed <span class="number">4000</span> requests</span><br><span class="line">Completed <span class="number">5000</span> requests</span><br><span class="line">Completed <span class="number">6000</span> requests</span><br><span class="line">Completed <span class="number">7000</span> requests</span><br><span class="line">Completed <span class="number">8000</span> requests</span><br><span class="line">Completed <span class="number">9000</span> requests</span><br><span class="line">Completed <span class="number">10000</span> requests</span><br><span class="line">Finished <span class="number">10000</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:</span><br><span class="line">Server Hostname:        <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">Server Port:            <span class="number">3005</span></span><br><span class="line"></span><br><span class="line">Document Path:          /buy/ticket</span><br><span class="line">Document Length:        <span class="number">29</span> bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      <span class="number">100</span></span><br><span class="line">Time taken <span class="keyword">for</span> tests:   <span class="number">2.339</span> seconds</span><br><span class="line">Complete requests:      <span class="number">10000</span></span><br><span class="line">Failed requests:        <span class="number">0</span></span><br><span class="line">Total transferred:      <span class="number">1370000</span> bytes</span><br><span class="line">HTML transferred:       <span class="number">290000</span> bytes</span><br><span class="line">Requests per second:    4275.96 [#/sec] (mean)</span><br><span class="line">Time per request:       <span class="number">23.387</span> [ms] (mean)</span><br><span class="line">Time per request:       <span class="number">0.234</span> [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          <span class="number">572.08</span> [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line"><span class="function">Connection <span class="title">Times</span> <span class="params">(ms)</span></span></span><br><span class="line"><span class="function">              min  mean[+/-sd] median   max</span></span><br><span class="line"><span class="function">Connect:        0    8  14.7      6     223</span></span><br><span class="line"><span class="function">Processing:     2   15  17.6     11     232</span></span><br><span class="line"><span class="function">Waiting:        1   11  13.5      8     225</span></span><br><span class="line"><span class="function">Total:          7   23  22.8     18     239</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Percentage of the requests served within a certain <span class="title">time</span> <span class="params">(ms)</span></span></span><br><span class="line"><span class="function">  50%     18</span></span><br><span class="line"><span class="function">  66%     24</span></span><br><span class="line"><span class="function">  75%     26</span></span><br><span class="line"><span class="function">  80%     28</span></span><br><span class="line"><span class="function">  90%     33</span></span><br><span class="line"><span class="function">  95%     39</span></span><br><span class="line"><span class="function">  98%     45</span></span><br><span class="line"><span class="function">  99%     54</span></span><br><span class="line"><span class="function"> 100%    239 <span class="params">(longest request)</span></span></span><br></pre></td></tr></table></figure><p>根据指标显示，我单机每秒就能处理4000+的请求，正常服务器都是多核配置，处理1W+的请求根本没有问题。而且查看日志发现整个服务过程中，请求都很正常，流量均匀，redis也很正常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//stat.log</span></span><br><span class="line">...</span><br><span class="line">result:<span class="number">1</span>,localSales:<span class="number">145</span></span><br><span class="line">result:<span class="number">1</span>,localSales:<span class="number">146</span></span><br><span class="line">result:<span class="number">1</span>,localSales:<span class="number">147</span></span><br><span class="line">result:<span class="number">1</span>,localSales:<span class="number">148</span></span><br><span class="line">result:<span class="number">1</span>,localSales:<span class="number">149</span></span><br><span class="line">result:<span class="number">1</span>,localSales:<span class="number">150</span></span><br><span class="line">result:<span class="number">0</span>,localSales:<span class="number">151</span></span><br><span class="line">result:<span class="number">0</span>,localSales:<span class="number">152</span></span><br><span class="line">result:<span class="number">0</span>,localSales:<span class="number">153</span></span><br><span class="line">result:<span class="number">0</span>,localSales:<span class="number">154</span></span><br><span class="line">result:<span class="number">0</span>,localSales:<span class="number">156</span></span><br><span class="line">...</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="5-总结回顾"><a href="#5-总结回顾" class="headerlink" title="5.总结回顾"></a>5.总结回顾</h3><p>总体来说，秒杀系统是非常复杂的。我们这里只是简单介绍模拟了一下单机如何优化到高性能，集群如何避免单点故障，保证订单不超卖、不少卖的一些策略，完整的订单系统还有订单进度的查看，每台服务器上都有一个任务，定时的从总库存同步余票和库存信息展示给用户,还有用户在订单有效期内不支付，释放订单，补充到库存等等。</p><p>我们实现了高并发抢票的核心逻辑，可以说系统设计的非常的巧妙，巧妙的避开了对DB数据库IO的操作，对Redis网络IO的高并发请求，几乎所有的计算都是在内存中完成的，而且有效的保证了不超卖、不少卖，还能够容忍部分机器的宕机。我觉得其中有两点特别值得学习总结：</p><ul><li>负载均衡，分而治之。通过负载均衡，将不同的流量划分到不同的机器上，每台机器处理好自己的请求，将自己的性能发挥到极致，这样系统的整体也就能承受极高的并发了，就像工作的的一个团队，每个人都将自己的价值发挥到了极致，团队成长自然是很大的。</li><li>合理的使用并发和异步。自epoll网络架构模型解决了c10k问题以来，异步越来被服务端开发人员所接受，能够用异步来做的工作，就用异步来做，在功能拆解上能达到意想不到的效果，这点在nginx、node.js、redis上都能体现，他们处理网络请求使用的epoll模型，用实践告诉了我们单线程依然可以发挥强大的威力。服务器已经进入了多核时代，go语言这种天生为并发而生的语言，完美的发挥了服务器多核优势，很多可以并发处理的任务都可以使用并发来解决，比如go处理http请求时每个请求都会在一个goroutine中执行，总之:怎样合理的压榨CPU,让其发挥出应有的价值，是我们一直需要探索学习的方向。</li></ul><p>参考文章:<br><a href="https://juejin.im/post/5d84e21f6fb9a06ac8248149">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;12306抢票-极限并发带来的思考&quot;&gt;&lt;a href=&quot;#12306抢票-极限并发带来的思考&quot; class=&quot;headerlink&quot; title=&quot;12306抢票,极限并发带来的思考?&quot;&gt;&lt;/a&gt;12306抢票,极限并发带来的思考?&lt;/h3&gt;&lt;p&gt;每到节假日期间,一二线城市返乡、外出游玩的人们几乎都面临着一个问题：抢火车票!虽然现在大多数情况下都能订到票,但是放票瞬间即无票的场景，相信大家都深有体会。尤其是春节期间，大家不仅使用12306，还会考虑“智行”和其他的抢票软件,全国上下几亿人在这段时间都在抢票。
    
    </summary>
    
    
      <category term="架构" scheme="https://removeif.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="设计" scheme="https://removeif.github.io/categories/%E6%9E%B6%E6%9E%84/%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="秒杀系统，支付设计" scheme="https://removeif.github.io/tags/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%EF%BC%8C%E6%94%AF%E4%BB%98%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Kafka基本架构及原理</title>
    <link href="https://removeif.github.io/design-architecture/Kafka%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%8E%9F%E7%90%86.html"/>
    <id>https://removeif.github.io/design-architecture/Kafka%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%8E%9F%E7%90%86.html</id>
    <published>2020-02-02T03:47:53.000Z</published>
    <updated>2020-02-06T03:27:44.577Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、为什么需要消息系统"><a href="#一、为什么需要消息系统" class="headerlink" title="一、为什么需要消息系统"></a>一、为什么需要消息系统</h3><p>1.解耦：<br>    允许你独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束。<br>2.冗余：<br>    消息队列把数据进行持久化直到它们已经被完全处理，通过这一方式规避了数据丢失风险。许多消息队列所采用的”插入-获取-删除”范式中，在把一个消息从队列中删除之前，需要你的处理系统明确的指出该消息已经被处理完毕，从而确保你的数据被安全的保存直到你使用完毕。<br>3.扩展性：<br>    因为消息队列解耦了你的处理过程，所以增大消息入队和处理的频率是很容易的，只要另外增加处理过程即可。<a id="more"></a><br>4.灵活性 &amp; 峰值处理能力：<br>    在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见。如果为以能处理这类峰值访问为标准来投入资源随时待命无疑是巨大的浪费。使用消息队列能够使关键组件顶住突发的访问压力，而不会因为突发的超负荷的请求而完全崩溃。<br>5.可恢复性：<br>    系统的一部分组件失效时，不会影响到整个系统。消息队列降低了进程间的耦合度，所以即使一个处理消息的进程挂掉，加入队列中的消息仍然可以在系统恢复后被处理。<br>6.顺序保证：<br>    在大多使用场景下，数据处理的顺序都很重要。大部分消息队列本来就是排序的，并且能保证数据会按照特定的顺序来处理。（Kafka 保证一个 Partition 内的消息的有序性）<br>7.缓冲：<br>    有助于控制和优化数据流经过系统的速度，解决生产消息和消费消息的处理速度不一致的情况。<br>8.异步通信：<br>    很多时候，用户不想也不需要立即处理消息。消息队列提供了异步处理机制，允许用户把一个消息放入队列，但并不立即处理它。想向队列中放入多少消息就放多少，然后在需要的时候再去处理它们。</p><h3 id="二、kafka-架构"><a href="#二、kafka-架构" class="headerlink" title="二、kafka 架构"></a>二、kafka 架构</h3><h4 id="拓扑结构"><a href="#拓扑结构" class="headerlink" title="拓扑结构"></a>拓扑结构</h4><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202112014.png" alt=""></p><p> 相关名词解释:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1.producer：</span><br><span class="line">　　消息生产者，发布消息到 kafka 集群的终端或服务。</span><br><span class="line">2.broker：</span><br><span class="line">　　kafka 集群中包含的服务器。</span><br><span class="line">3.topic：</span><br><span class="line">　　每条发布到 kafka 集群的消息属于的类别，即 kafka 是面向 topic 的。</span><br><span class="line">4.partition：</span><br><span class="line">　　partition 是物理上的概念，每个 topic 包含一个或多个 partition。kafka 分配的单位是 partition。</span><br><span class="line">5.consumer：</span><br><span class="line">　　从 kafka 集群中消费消息的终端或服务。</span><br><span class="line">6.Consumer group：</span><br><span class="line">　　high-level consumer API 中，每个 consumer 都属于一个 consumer group，每条消息只能被 consumer group 中的一个 Consumer 消费，但可以被多个 consumer group 消费。</span><br><span class="line">7.replica：</span><br><span class="line">　　partition 的副本，保障 partition 的高可用。</span><br><span class="line">8.leader：</span><br><span class="line">　　replica 中的一个角色， producer 和 consumer 只跟 leader 交互。</span><br><span class="line">9.follower：</span><br><span class="line">　　replica 中的一个角色，从 leader 中复制数据。</span><br><span class="line">10.controller：</span><br><span class="line">　　kafka 集群中的其中一个服务器，用来进行 leader election 以及 各种 failover。</span><br><span class="line">12.zookeeper：</span><br><span class="line">　　kafka 通过 zookeeper 来存储集群的 meta 信息。</span><br></pre></td></tr></table></figure><h4 id="zookeeper-节点"><a href="#zookeeper-节点" class="headerlink" title="zookeeper 节点"></a>zookeeper 节点</h4><p>kafka 在 zookeeper 中的存储结构如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202112250.png" alt=""></p><h3 id="三、producer-发布消息"><a href="#三、producer-发布消息" class="headerlink" title="三、producer 发布消息"></a>三、producer 发布消息</h3><h4 id="写入方式"><a href="#写入方式" class="headerlink" title="写入方式"></a>写入方式</h4><p>producer 采用 push 模式将消息发布到 broker，每条消息都被 append 到 patition 中，属于顺序写磁盘（顺序写磁盘效率比随机写内存要高，保障 kafka 吞吐率）。</p><h4 id="消息路由"><a href="#消息路由" class="headerlink" title="消息路由"></a>消息路由</h4><p>producer 发送消息到 broker 时，会根据分区算法选择将其存储到哪一个 partition。其路由机制为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 指定了 patition，则直接使用；</span><br><span class="line">2. 未指定 patition 但指定 key，通过对 key 的 value 进行hash 选出一个 patition</span><br><span class="line">3. patition 和 key 都未指定，使用轮询选出一个 patition。</span><br></pre></td></tr></table></figure><p>附上 java 客户端分区源码，一目了然：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建消息实例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProducerRecord</span><span class="params">(String topic, Integer partition, Long timestamp, K key, V value)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (topic == <span class="keyword">null</span>)</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Topic cannot be null"</span>);</span><br><span class="line">     <span class="keyword">if</span> (timestamp != <span class="keyword">null</span> &amp;&amp; timestamp &lt; <span class="number">0</span>)</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid timestamp "</span> + timestamp);</span><br><span class="line">     <span class="keyword">this</span>.topic = topic;</span><br><span class="line">     <span class="keyword">this</span>.partition = partition;</span><br><span class="line">     <span class="keyword">this</span>.key = key;</span><br><span class="line">     <span class="keyword">this</span>.value = value;</span><br><span class="line">     <span class="keyword">this</span>.timestamp = timestamp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算 patition，如果指定了 patition 则直接使用，否则使用 key 计算</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(ProducerRecord&lt;K, V&gt; record, <span class="keyword">byte</span>[] serializedKey , <span class="keyword">byte</span>[] serializedValue, Cluster cluster)</span> </span>&#123;</span><br><span class="line">     Integer partition = record.partition();</span><br><span class="line">     <span class="keyword">if</span> (partition != <span class="keyword">null</span>) &#123;</span><br><span class="line">          List&lt;PartitionInfo&gt; partitions = cluster.partitionsForTopic(record.topic());</span><br><span class="line">          <span class="keyword">int</span> lastPartition = partitions.size() - <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">if</span> (partition &lt; <span class="number">0</span> || partition &gt; lastPartition) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">"Invalid partition given with record: %d is not in the range [0...%d]."</span>, partition, lastPartition));</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> partition;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.partitioner.partition(record.topic(), record.key(), serializedKey, record.value(), serializedValue, cluster);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 key 选取 patition</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(String topic, Object key, <span class="keyword">byte</span>[] keyBytes, Object value, <span class="keyword">byte</span>[] valueBytes, Cluster cluster)</span> </span>&#123;</span><br><span class="line">     List&lt;PartitionInfo&gt; partitions = cluster.partitionsForTopic(topic);</span><br><span class="line">     <span class="keyword">int</span> numPartitions = partitions.size();</span><br><span class="line">     <span class="keyword">if</span> (keyBytes == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">int</span> nextValue = counter.getAndIncrement();</span><br><span class="line">          List&lt;PartitionInfo&gt; availablePartitions = cluster.availablePartitionsForTopic(topic);</span><br><span class="line">          <span class="keyword">if</span> (availablePartitions.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="keyword">int</span> part = DefaultPartitioner.toPositive(nextValue) % availablePartitions.size();</span><br><span class="line">               <span class="keyword">return</span> availablePartitions.get(part).partition();</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> DefaultPartitioner.toPositive(nextValue) % numPartitions;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//对 keyBytes 进行 hash 选出一个 patition</span></span><br><span class="line">          <span class="keyword">return</span> DefaultPartitioner.toPositive(Utils.murmur2(keyBytes)) % numPartitions;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="写入流程"><a href="#写入流程" class="headerlink" title="写入流程"></a>写入流程</h4><p>producer 写入消息序列图:</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202112612.png" alt=""></p><p>流程说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. producer 先从 zookeeper 的 &quot;&#x2F;brokers&#x2F;...&#x2F;state&quot; 节点找到该 partition 的 leader</span><br><span class="line">2. producer 将消息发送给该 leader</span><br><span class="line">3. leader 将消息写入本地 log</span><br><span class="line">4. followers 从 leader pull 消息，写入本地 log 后 leader 发送 ACK</span><br><span class="line">5. leader 收到所有 ISR 中的 replica 的 ACK 后，增加 HW（high watermark，最后 commit 的 offset） 并向 producer 发送 ACK</span><br></pre></td></tr></table></figure><h4 id="producer-delivery-guarantee"><a href="#producer-delivery-guarantee" class="headerlink" title="producer delivery guarantee"></a>producer delivery guarantee</h4><p>一般情况下存在三种情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. At most once 消息可能会丢，但绝不会重复传输</span><br><span class="line">2. At least one 消息绝不会丢，但可能会重复传输</span><br><span class="line">3. Exactly once 每条消息肯定会被传输一次且仅传输一次</span><br></pre></td></tr></table></figure><p>当 producer 向 broker 发送消息时，一旦这条消息被 commit，由于 replication 的存在，它就不会丢。但是如果 producer 发送数据给 broker 后，遇到网络问题而造成通信中断，那 Producer 就无法判断该条消息是否已经 commit。虽然 Kafka 无法确定网络故障期间发生了什么，但是 producer 可以生成一种类似于主键的东西，发生故障时幂等性的重试多次，这样就做到了 Exactly once，但目前还并未实现。所以目前默认情况下一条消息从 producer 到 broker 是确保了 At least once，可通过设置 producer 异步发送实现At most once。</p><h3 id="四、broker-保存消息"><a href="#四、broker-保存消息" class="headerlink" title="四、broker 保存消息"></a>四、broker 保存消息</h3><h4 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h4><p>物理上把 topic 分成一个或多个 patition（对应 server.properties 中的 num.partitions=3 配置），每个 patition 物理上对应一个文件夹（该文件夹存储该 patition 的所有消息和索引文件），如下：</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202112822.png" alt=""></p><h4 id="存储策略"><a href="#存储策略" class="headerlink" title="存储策略"></a>存储策略</h4><p>无论消息是否被消费，kafka 都会保留所有消息。有两种策略可以删除旧数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 基于时间：log.retention.hours&#x3D;168</span><br><span class="line">2. 基于大小：log.retention.bytes&#x3D;1073741824</span><br></pre></td></tr></table></figure><p>需要注意的是，因为Kafka读取特定消息的时间复杂度为O(1)，即与文件大小无关，所以这里删除过期文件与提高 Kafka 性能无关。</p><h4 id="topic-创建与删除"><a href="#topic-创建与删除" class="headerlink" title="topic 创建与删除"></a>topic 创建与删除</h4><h5 id="创建-topic"><a href="#创建-topic" class="headerlink" title="创建 topic"></a>创建 topic</h5><p>创建 topic 的序列图</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202112925.png" alt=""></p><p>流程说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. controller 在 ZooKeeper 的 &#x2F;brokers&#x2F;topics 节点上注册 watcher，当 topic 被创建，则 controller 会通过 watch 得到该 topic 的 partition&#x2F;replica 分配。</span><br><span class="line">2. controller从 &#x2F;brokers&#x2F;ids 读取当前所有可用的 broker 列表，对于 set_p 中的每一个 partition：</span><br><span class="line">   2.1 从分配给该 partition 的所有 replica（称为AR）中任选一个可用的 broker 作为新的 leader，并将AR设置为新的 ISR</span><br><span class="line">   2.2 将新的 leader 和 ISR 写入 &#x2F;brokers&#x2F;topics&#x2F;[topic]&#x2F;partitions&#x2F;[partition]&#x2F;state</span><br><span class="line">3. controller 通过 RPC 向相关的 broker 发送 LeaderAndISRRequest。</span><br></pre></td></tr></table></figure><h5 id="删除-topic"><a href="#删除-topic" class="headerlink" title="删除 topic"></a>删除 topic</h5><p>删除 topic 的序列图</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202113026.png" alt=""></p><p>流程说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. controller 在 zooKeeper 的 &#x2F;brokers&#x2F;topics 节点上注册 watcher，当 topic 被删除，则 controller 会通过 watch 得到该 topic 的 partition&#x2F;replica 分配。</span><br><span class="line">2. 若 delete.topic.enable&#x3D;false，结束；否则 controller 注册在 &#x2F;admin&#x2F;delete_topics 上的 watch 被 fire，controller 通过回调向对应的 broker 发送 StopReplicaRequest。</span><br></pre></td></tr></table></figure><h3 id="五、kafka-HA"><a href="#五、kafka-HA" class="headerlink" title="五、kafka HA"></a>五、kafka HA</h3><h4 id="replication"><a href="#replication" class="headerlink" title="replication"></a>replication</h4><p>如图.1所示，同一个 partition 可能会有多个 replica（对应 server.properties 配置中的 default.replication.factor=N）。没有 replica 的情况下，一旦 broker 宕机，其上所有 patition 的数据都不可被消费，同时 producer 也不能再将数据存于其上的 patition。引入replication 之后，同一个 partition 可能会有多个 replica，而这时需要在这些 replica 之间选出一个 leader，producer 和 consumer 只与这个 leader 交互，其它 replica 作为 follower 从 leader 中复制数据。</p><p>Kafka 分配 Replica 的算法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 将所有 broker（假设共 n 个 broker）和待分配的 partition 排序</span><br><span class="line">2. 将第 i 个 partition 分配到第（i mod n）个 broker 上</span><br><span class="line">3. 将第 i 个 partition 的第 j 个 replica 分配到第（(i + j) mode n）个 broker上</span><br></pre></td></tr></table></figure><h4 id="leader-failover"><a href="#leader-failover" class="headerlink" title="leader failover"></a>leader failover</h4><p>当 partition 对应的 leader 宕机时，需要从 follower 中选举出新 leader。在选举新leader时，一个基本的原则是，新的 leader 必须拥有旧 leader commit 过的所有消息。</p><p>kafka 在 zookeeper 中（/brokers/…/state）动态维护了一个 ISR（in-sync replicas），由3.3节的写入流程可知 ISR 里面的所有 replica 都跟上了 leader，只有 ISR 里面的成员才能选为 leader。对于 f+1 个 replica，一个 partition 可以在容忍 f 个 replica 失效的情况下保证消息不丢失。</p><p>当所有 replica 都不工作时，有两种可行的方案：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 等待 ISR 中的任一个 replica 活过来，并选它作为 leader。可保障数据不丢失，但时间可能相对较长。</span><br><span class="line">2. 选择第一个活过来的 replica（不一定是 ISR 成员）作为 leader。无法保障数据不丢失，但相对不可用时间较短。</span><br></pre></td></tr></table></figure><p>kafka 0.8.* 使用第二种方式。</p><p>kafka 通过 Controller 来选举 leader，流程请参考5.3节。</p><h4 id="broker-failover"><a href="#broker-failover" class="headerlink" title="broker failover"></a>broker failover</h4><p>kafka broker failover 序列图如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202113536.png" alt=""></p><p>流程说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. controller 在 zookeeper 的 &#x2F;brokers&#x2F;ids&#x2F;[brokerId] 节点注册 Watcher，当 broker 宕机时 zookeeper 会 fire watch</span><br><span class="line">2. controller 从 &#x2F;brokers&#x2F;ids 节点读取可用broker</span><br><span class="line">3. controller决定set_p，该集合包含宕机 broker 上的所有 partition</span><br><span class="line">4. 对 set_p 中的每一个 partition</span><br><span class="line">    4.1 从&#x2F;brokers&#x2F;topics&#x2F;[topic]&#x2F;partitions&#x2F;[partition]&#x2F;state 节点读取 ISR</span><br><span class="line">    4.2 决定新 leader（如4.3节所描述）</span><br><span class="line">    4.3 将新 leader、ISR、controller_epoch 和 leader_epoch 等信息写入 state 节点</span><br><span class="line">5. 通过 RPC 向相关 broker 发送 leaderAndISRRequest 命令</span><br></pre></td></tr></table></figure><h4 id="controller-failover"><a href="#controller-failover" class="headerlink" title="controller failover"></a>controller failover</h4><p>当 controller 宕机时会触发 controller failover。每个 broker 都会在 zookeeper 的 “/controller” 节点注册 watcher，当 controller 宕机时 zookeeper 中的临时节点消失，所有存活的 broker 收到 fire 的通知，每个 broker 都尝试创建新的 controller path，只有一个竞选成功并当选为 controller。</p><p>当新的 controller 当选时，会触发 KafkaController.onControllerFailover 方法，在该方法中完成如下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> 1. 读取并增加 Controller Epoch。</span><br><span class="line"> 2. 在 reassignedPartitions Patch(&#x2F;admin&#x2F;reassign_partitions) 上注册 watcher。</span><br><span class="line"> 3. 在 preferredReplicaElection Path(&#x2F;admin&#x2F;preferred_replica_election) 上注册 watcher。</span><br><span class="line"> 4. 通过 partitionStateMachine 在 broker Topics Patch(&#x2F;brokers&#x2F;topics) 上注册 watcher。</span><br><span class="line"> 5. 若 delete.topic.enable&#x3D;true（默认值是 false），则 partitionStateMachine 在 Delete Topic Patch(&#x2F;admin&#x2F;delete_topics) 上注册 watcher。</span><br><span class="line"> 6. 通过 replicaStateMachine在 Broker Ids Patch(&#x2F;brokers&#x2F;ids)上注册Watch。</span><br><span class="line"> 7. 初始化 ControllerContext 对象，设置当前所有 topic，“活”着的 broker 列表，所有 partition 的 leader 及 ISR等。</span><br><span class="line"> 8. 启动 replicaStateMachine 和 partitionStateMachine。</span><br><span class="line"> 9. 将 brokerState 状态设置为 RunningAsController。</span><br><span class="line">10. 将每个 partition 的 Leadership 信息发送给所有“活”着的 broker。</span><br><span class="line">11. 若 auto.leader.rebalance.enable&#x3D;true（默认值是true），则启动 partition-rebalance 线程。</span><br><span class="line">12. 若 delete.topic.enable&#x3D;true 且Delete Topic Patch(&#x2F;admin&#x2F;delete_topics)中有值，则删除相应的Topic。</span><br></pre></td></tr></table></figure><h3 id="六、consumer-消费消息"><a href="#六、consumer-消费消息" class="headerlink" title="六、consumer 消费消息"></a>六、consumer 消费消息</h3><h4 id="consumer-API"><a href="#consumer-API" class="headerlink" title="consumer API"></a>consumer API</h4><p>kafka 提供了两套 consumer API：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. The high-level Consumer API</span><br><span class="line">2. The SimpleConsumer API</span><br></pre></td></tr></table></figure><p>其中 high-level consumer API 提供了一个从 kafka 消费数据的高层抽象，而 SimpleConsumer API 则需要开发人员更多地关注细节。</p><h5 id="The-high-level-consumer-API"><a href="#The-high-level-consumer-API" class="headerlink" title="The high-level consumer API"></a>The high-level consumer API</h5><p>high-level consumer API 提供了 consumer group 的语义，一个消息只能被 group 内的一个 consumer 所消费，且 consumer 消费消息时不关注 offset，最后一个 offset 由 zookeeper 保存。</p><p>使用 high-level consumer API 可以是多线程的应用，应当注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 如果消费线程大于 patition 数量，则有些线程将收不到消息</span><br><span class="line">2. 如果 patition 数量大于线程数，则有些线程多收到多个 patition 的消息</span><br><span class="line">3. 如果一个线程消费多个 patition，则无法保证你收到的消息的顺序，而一个 patition 内的消息是有序的</span><br></pre></td></tr></table></figure><h5 id="The-SimpleConsumer-API"><a href="#The-SimpleConsumer-API" class="headerlink" title="The SimpleConsumer API"></a>The SimpleConsumer API</h5><p>如果你想要对 patition 有更多的控制权，那就应该使用 SimpleConsumer API，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 多次读取一个消息</span><br><span class="line">2. 只消费一个 patition 中的部分消息</span><br><span class="line">3. 使用事务来保证一个消息仅被消费一次</span><br></pre></td></tr></table></figure><p>但是使用此 API 时，partition、offset、broker、leader 等对你不再透明，需要自己去管理。你需要做大量的额外工作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 必须在应用程序中跟踪 offset，从而确定下一条应该消费哪条消息</span><br><span class="line">2. 应用程序需要通过程序获知每个 Partition 的 leader 是谁</span><br><span class="line">3. 需要处理 leader 的变更</span><br></pre></td></tr></table></figure><p>使用 SimpleConsumer API 的一般流程如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 查找到一个“活着”的 broker，并且找出每个 partition 的 leader</span><br><span class="line">2. 找出每个 partition 的 follower</span><br><span class="line">3. 定义好请求，该请求应该能描述应用程序需要哪些数据</span><br><span class="line">4. fetch 数据</span><br><span class="line">5. 识别 leader 的变化，并对之作出必要的响应</span><br></pre></td></tr></table></figure><blockquote><p>以下针对 high-level Consumer API 进行说明。</p></blockquote><h4 id="consumer-group"><a href="#consumer-group" class="headerlink" title="consumer group"></a>consumer group</h4><p>如 2.2 节所说， kafka 的分配单位是 patition。每个 consumer 都属于一个 group，一个 partition 只能被同一个 group 内的一个 consumer 所消费（也就保障了一个消息只能被 group 内的一个 consuemr 所消费），但是多个 group 可以同时消费这个 partition。</p><p>kafka 的设计目标之一就是同时实现离线处理和实时处理，根据这一特性，可以使用 spark/Storm 这些实时处理系统对消息在线处理，同时使用 Hadoop 批处理系统进行离线处理，还可以将数据备份到另一个数据中心，只需要保证这三者属于不同的 consumer group。如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202113951.png" alt=""></p><h4 id="消费方式"><a href="#消费方式" class="headerlink" title="消费方式"></a>消费方式</h4><p>consumer 采用 pull 模式从 broker 中读取数据。</p><p>push 模式很难适应消费速率不同的消费者，因为消息发送速率是由 broker 决定的。它的目标是尽可能以最快速度传递消息，但是这样很容易造成 consumer 来不及处理消息，典型的表现就是拒绝服务以及网络拥塞。而 pull 模式则可以根据 consumer 的消费能力以适当的速率消费消息。</p><p>对于 Kafka 而言，pull 模式更合适，它可简化 broker 的设计，consumer 可自主控制消费消息的速率，同时 consumer 可以自己控制消费方式——即可批量消费也可逐条消费，同时还能选择不同的提交方式从而实现不同的传输语义。</p><h4 id="consumer-delivery-guarantee"><a href="#consumer-delivery-guarantee" class="headerlink" title="consumer delivery guarantee"></a>consumer delivery guarantee</h4><p>如果将 consumer 设置为 autocommit，consumer 一旦读到数据立即自动 commit。如果只讨论这一读取消息的过程，那 Kafka 确保了 Exactly once。</p><p>但实际使用中应用程序并非在 consumer 读取完数据就结束了，而是要进行进一步处理，而数据处理与 commit 的顺序在很大程度上决定了consumer delivery guarantee：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.读完消息先 commit 再处理消息。</span><br><span class="line">    这种模式下，如果 consumer 在 commit 后还没来得及处理消息就 crash 了，下次重新开始工作后就无法读到刚刚已提交而未处理的消息，这就对应于 At most once</span><br><span class="line">2.读完消息先处理再 commit。</span><br><span class="line">    这种模式下，如果在处理完消息之后 commit 之前 consumer crash 了，下次重新开始工作时还会处理刚刚未 commit 的消息，实际上该消息已经被处理过了。这就对应于 At least once。</span><br><span class="line">3.如果一定要做到 Exactly once，就需要协调 offset 和实际操作的输出。</span><br><span class="line">    精典的做法是引入两阶段提交。如果能让 offset 和操作输入存在同一个地方，会更简洁和通用。这种方式可能更好，因为许多输出系统可能不支持两阶段提交。比如，consumer 拿到数据后可能把数据放到 HDFS，如果把最新的 offset 和数据本身一起写到 HDFS，那就可以保证数据的输出和 offset 的更新要么都完成，要么都不完成，间接实现 Exactly once。（目前就 high-level API而言，offset 是存于Zookeeper 中的，无法存于HDFS，而SimpleConsuemr API的 offset 是由自己去维护的，可以将之存于 HDFS 中）</span><br></pre></td></tr></table></figure><p>总之，Kafka 默认保证 At least once，并且允许通过设置 producer 异步提交来实现 At most once（见文章《kafka consumer防止数据丢失》）。而 Exactly once 要求与外部存储系统协作，幸运的是 kafka 提供的 offset 可以非常直接非常容易得使用这种方式。</p><p>更多关于 kafka 传输语义的信息请参考《Message Delivery Semantics》。</p><h4 id="consumer-rebalance"><a href="#consumer-rebalance" class="headerlink" title="consumer rebalance"></a>consumer rebalance</h4><p>当有 consumer 加入或退出、以及 partition 的改变（如 broker 加入或退出）时会触发 rebalance。consumer rebalance算法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 将目标 topic 下的所有 partirtion 排序，存于PT</span><br><span class="line">2. 对某 consumer group 下所有 consumer 排序，存于 CG，第 i 个consumer 记为 Ci</span><br><span class="line">3. N&#x3D;size(PT)&#x2F;size(CG)，向上取整</span><br><span class="line">4. 解除 Ci 对原来分配的 partition 的消费权（i从0开始）</span><br><span class="line">5. 将第i*N到（i+1）*N-1个 partition 分配给 Ci</span><br></pre></td></tr></table></figure><p>在 0.8.*版本，每个 consumer 都只负责调整自己所消费的 partition，为了保证整个consumer group 的一致性，当一个 consumer 触发了 rebalance 时，该 consumer group 内的其它所有其它 consumer 也应该同时触发 rebalance。这会导致以下几个问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.Herd effect</span><br><span class="line">　　任何 broker 或者 consumer 的增减都会触发所有的 consumer 的 rebalance</span><br><span class="line">2.Split Brain</span><br><span class="line">　　每个 consumer 分别单独通过 zookeeper 判断哪些 broker 和 consumer 宕机了，那么不同 consumer 在同一时刻从 zookeeper 看到的 view 就可能不一样，这是由 zookeeper 的特性决定的，这就会造成不正确的 reblance 尝试。</span><br><span class="line">3. 调整结果不可控</span><br><span class="line">　　所有的 consumer 都并不知道其它 consumer 的 rebalance 是否成功，这可能会导致 kafka 工作在一个不正确的状态。</span><br></pre></td></tr></table></figure><p>基于以上问题，kafka 设计者考虑在0.9.*版本开始使用中心 coordinator 来控制 consumer rebalance，然后又从简便性和验证要求两方面考虑，计划在 consumer 客户端实现分配方案。（见文章《Kafka Detailed Consumer Coordinator Design》和《Kafka Client-side Assignment Proposal》），此处不再赘述。</p><h3 id="七、注意事项"><a href="#七、注意事项" class="headerlink" title="七、注意事项"></a>七、注意事项</h3><h4 id="producer-无法发送消息的问题"><a href="#producer-无法发送消息的问题" class="headerlink" title="producer 无法发送消息的问题"></a>producer 无法发送消息的问题</h4><p>最开始在本机搭建了kafka伪集群，本地 producer 客户端成功发布消息至 broker。随后在服务器上搭建了 kafka 集群，在本机连接该集群，producer 却无法发布消息到 broker（奇怪也没有抛错）。最开始怀疑是 iptables 没开放，于是开放端口，结果还不行（又开始是代码问题、版本问题等等，倒腾了很久）。最后没办法，一项一项查看 server.properties 配置，发现以下两个配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># The address the socket server listens on. It will get the value returned from </span><br><span class="line"># java.net.InetAddress.getCanonicalHostName() if not configured.</span><br><span class="line">#   FORMAT:</span><br><span class="line">#     listeners &#x3D; security_protocol:&#x2F;&#x2F;host_name:port</span><br><span class="line">#   EXAMPLE:</span><br><span class="line">#     listeners &#x3D; PLAINTEXT:&#x2F;&#x2F;your.host.name:9092</span><br><span class="line">listeners&#x3D;PLAINTEXT:&#x2F;&#x2F;:9092</span><br><span class="line"></span><br><span class="line"># Hostname and port the broker will advertise to producers and consumers. If not set, </span><br><span class="line"># it uses the value for &quot;listeners&quot; if configured. Otherwise, it will use the value</span><br><span class="line"># returned from java.net.InetAddress.getCanonicalHostName().</span><br><span class="line"># advertised.listeners&#x3D;PLAINTEXT:&#x2F;&#x2F;your.host.name:9092</span><br></pre></td></tr></table></figure><p>以上说的就是 advertised.listeners 是 broker 给 producer 和 consumer 连接使用的，如果没有设置，就使用 listeners，而如果 host_name 没有设置的话，就使用 java.net.InetAddress.getCanonicalHostName() 方法返回的主机名。</p><p>修改方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. listeners&#x3D;PLAINTEXT:&#x2F;&#x2F;121.10.26.XXX:9092</span><br><span class="line">2. advertised.listeners&#x3D;PLAINTEXT:&#x2F;&#x2F;121.10.26.XXX:9092</span><br></pre></td></tr></table></figure><p>修改后重启服务，正常工作。关于更多 kafka 配置说明，见文章《<a href="http://blog.csdn.net/louisliaoxh/article/details/51516084">Kafka学习整理三(borker(0.9.0及0.10.0)配置)</a>》。</p><h3 id="八、参考相关文章列表"><a href="#八、参考相关文章列表" class="headerlink" title="八、参考相关文章列表"></a>八、参考相关文章列表</h3><blockquote><ol><li><p>《<a href="http://www.infoq.com/cn/articles/kafka-analysis-part-1/">Kafka剖析（一）：Kafka背景及架构介绍</a>》</p></li><li><p>《<a href="http://www.infoq.com/cn/articles/kafka-analysis-part-2/">Kafka设计解析（二）：Kafka High Availability （上）</a>》</p></li><li><p>《<a href="http://www.infoq.com/cn/articles/kafka-analysis-part-3/">Kafka设计解析（二）：Kafka High Availability （下）</a>》</p></li><li><p>《<a href="http://www.infoq.com/cn/articles/kafka-analysis-part-4/">Kafka设计解析（四）：Kafka Consumer解析</a>》</p></li><li><p>《<a href="http://www.infoq.com/cn/articles/kafka-analysis-part-5">Kafka设计解析（五）：Kafka Benchmark</a>》</p></li><li><p>《<a href="http://blog.csdn.net/louisliaoxh/article/details/51516084">Kafka学习整理三(borker(0.9.0及0.10.0)配置)</a>》</p></li><li><p>《<a href="https://cwiki.apache.org/confluence/display/KAFKA/Consumer+Group+Example">Using the High Level Consumer</a>》</p></li><li><p>《<a href="https://cwiki.apache.org/confluence/display/KAFKA/0.8.0+SimpleConsumer+Example">Using SimpleConsumer</a>》</p></li><li><p>《<a href="https://cwiki.apache.org/confluence/display/KAFKA/Consumer+Client+Re-Design">Consumer Client Re-Design</a>》</p></li><li><p>《<a href="http://kafka.apache.org/documentation.html#semantics">Message Delivery Semantics</a>》</p></li><li><p>《<a href="https://cwiki.apache.org/confluence/display/KAFKA/Kafka+Detailed+Consumer+Coordinator+Design#KafkaDetailedConsumerCoordinatorDesign-WARN:Thisisanobsoletedesign.Thedesignthat'simplementedinKafka0.9.0isdescribedinthiswiki.">Kafka Detailed Consumer Coordinator Design</a>》</p></li><li><p>《<a href="https://cwiki.apache.org/confluence/display/KAFKA/Kafka+Client-side+Assignment+Proposal">Kafka Client-side Assignment Proposal</a>》</p></li><li><p>《<a href="http://www.infoq.com/cn/articles/technology-comparison-of-kafka-and-distributedlog?utm_campaign=rightbar_v2&utm_source=infoq&utm_medium=articles_link&utm_content=link_text">Kafka和DistributedLog技术对比</a>》</p></li><li><p>《<a href="http://orchome.com/6">kafka安装和启动</a>》</p></li><li><p>《<a href="http://kane-xie.iteye.com/blog/2225085">kafka consumer防止数据丢失</a>》</p></li></ol></blockquote><p>参考文章:<br><a href="https://www.cnblogs.com/cyfonly/p/5954614.html">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、为什么需要消息系统&quot;&gt;&lt;a href=&quot;#一、为什么需要消息系统&quot; class=&quot;headerlink&quot; title=&quot;一、为什么需要消息系统&quot;&gt;&lt;/a&gt;一、为什么需要消息系统&lt;/h3&gt;&lt;p&gt;1.解耦：&lt;br&gt;    允许你独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束。&lt;br&gt;2.冗余：&lt;br&gt;    消息队列把数据进行持久化直到它们已经被完全处理，通过这一方式规避了数据丢失风险。许多消息队列所采用的”插入-获取-删除”范式中，在把一个消息从队列中删除之前，需要你的处理系统明确的指出该消息已经被处理完毕，从而确保你的数据被安全的保存直到你使用完毕。&lt;br&gt;3.扩展性：&lt;br&gt;    因为消息队列解耦了你的处理过程，所以增大消息入队和处理的频率是很容易的，只要另外增加处理过程即可。
    
    </summary>
    
    
      <category term="架构" scheme="https://removeif.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="Kafka" scheme="https://removeif.github.io/categories/%E6%9E%B6%E6%9E%84/Kafka/"/>
    
    
      <category term="Kafka" scheme="https://removeif.github.io/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Git-rebase-用法示例小结</title>
    <link href="https://removeif.github.io/develop/Git-rebase-%E7%94%A8%E6%B3%95%E7%A4%BA%E4%BE%8B%E5%B0%8F%E7%BB%93.html"/>
    <id>https://removeif.github.io/develop/Git-rebase-%E7%94%A8%E6%B3%95%E7%A4%BA%E4%BE%8B%E5%B0%8F%E7%BB%93.html</id>
    <published>2020-02-02T03:08:07.000Z</published>
    <updated>2020-02-02T03:14:13.789Z</updated>
    
    <content type="html"><![CDATA[<p>看过上一篇文章【<a href="https://removeif.github.io/develop/Git%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E5%9B%9E%E9%80%80%E4%BB%A3%E7%A0%81.html">Git如何优雅地回退代码</a>】的小伙伴们，肯定还有很多跟我一样对rebase的使用还是云里雾里的，这篇文章将使你彻底搞明白怎么使用。<br>rebase在git中是一个非常有魅力的命令，使用得当会极大提高自己的工作效率；相反，如果乱用，会给团队中其他人带来麻烦。它的作用简要概括为：可以对某一段线性提交历史进行编辑、删除、复制、粘贴；因此，合理使用rebase命令可以使我们的提交历史干净、简洁！</p><p>前提：不要通过rebase对任何已经提交到公共仓库中的commit进行修改（你自己一个人玩的分支除外）</p><a id="more"></a><h3 id="一、合并多个commit为一个完整commit"><a href="#一、合并多个commit为一个完整commit" class="headerlink" title="一、合并多个commit为一个完整commit"></a>一、合并多个commit为一个完整commit</h3><p>当我们在本地仓库中提交了多次，在我们把本地提交push到公共仓库中之前，为了让提交记录更简洁明了，我们希望把如下分支B、C、D三个提交记录合并为一个完整的提交，然后再push到公共仓库。</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202105102.png" alt=""></p><p>现在我们在测试分支上添加了四次提交，我们的目标是把最后三个提交合并为一个提交：</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202105128.png" alt=""></p><p>这里我们使用命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i  [startpoint]  [endpoint]</span><br></pre></td></tr></table></figure><p>其中<code>-i</code>的意思是<code>--interactive</code>，即弹出交互式的界面让用户编辑完成合并操作，<code>[startpoint]</code>  <code>[endpoint]</code>则指定了一个编辑区间，如果不指定<code>[endpoint]</code>，则该区间的终点默认是当前分支<code>HEAD</code>所指向的<code>commit</code>(注：该区间指定的是一个前开后闭的区间)。<br> 在查看到了log日志后，我们运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i 36224db</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i HEAD~3</span><br></pre></td></tr></table></figure><p>然后我们会看到如下界面:</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202105240.png" alt=""></p><p>上面未被注释的部分列出的是我们本次rebase操作包含的所有提交，下面注释部分是git为我们提供的命令说明。每一个commit id 前面的<code>pick</code>表示指令类型，git 为我们提供了以下几个命令:</p><blockquote><ul><li>pick：保留该commit（缩写:p）</li><li>reword：保留该commit，但我需要修改该commit的注释（缩写:r）</li><li>edit：保留该commit, 但我要停下来修改该提交(不仅仅修改注释)（缩写:e）</li><li>squash：将该commit和前一个commit合并（缩写:s）</li><li>fixup：将该commit和前一个commit合并，但我不要保留该提交的注释信息（缩写:f）</li><li>exec：执行shell命令（缩写:x）</li><li>drop：我要丢弃该commit（缩写:d）</li></ul></blockquote><p>根据我们的需求，我们将commit内容编辑如下:</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202105338.png" alt=""></p><p>此做法是把后面两次提交都合并到第一次提交里，改完上面的操作后执行vim<code>：wq</code>保存信息，之后会跳出下面的修改注释界面：</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202105547.png" alt=""></p><p>编辑完保存即可完成commit的合并了：</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202105606.png" alt=""></p><h3 id="二、将某一段commit粘贴到另一个分支上"><a href="#二、将某一段commit粘贴到另一个分支上" class="headerlink" title="二、将某一段commit粘贴到另一个分支上"></a>二、将某一段commit粘贴到另一个分支上</h3><p>当我们项目中存在多个分支，有时候我们需要将某一个分支中的一段提交同时应用到其他分支中，就像下图：</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202105647.png" alt=""></p><p>我们希望将develop分支中的C~E部分复制到master分支中，这时我们就可以通过rebase命令来实现（如果只是复制某一两个提交到其他分支，建议使用更简单的命令:<code>git cherry-pick</code>）。<br> 在实际模拟中，我们创建了master和develop两个分支:<br> <strong>master分支:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202105712.png" alt=""></p><p><strong>develop分支:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202105729.png" alt=""></p><p>我们使用命令的形式为:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase   [startpoint]   [endpoint]  --onto  [branchName]</span><br></pre></td></tr></table></figure><p>其中，<code>[startpoint]</code>  <code>[endpoint]</code>仍然和上一个命令一样指定了一个编辑区间(前开后闭)，<code>--onto</code>的意思是要将该指定的提交复制到哪个分支上。<br> 所以，在找到C(90bc0045b)和E(5de0da9f2)的提交id后，我们运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git  rebase   90bc0045b^   5de0da9f2   --onto master</span><br></pre></td></tr></table></figure><p>以上命令有网友补充内容：</p><blockquote><p><a href="https://www.jianshu.com/u/16ee0bbc8425">大帅_8183</a></p><p>15楼 2019.05.26 17:30</p><p>博主，关于你说的“[startpoint] [endpoint]仍然和上一个命令一样指定了一个编辑区间(前开后闭)” ，其中的前开后闭的思维，其实是有歧义的。</p><p>如果一定要用“区间”来表示的话， 那它表示的也一定是一个“前闭后闭”的区间；<br>至于，博主理解的“前开后闭”,其实是博主想使用[startpoint] 这个commit上的功能，但这部分功能本身 就是 上 一个commit提交功能后生成的新的commit(也就是 这里的[startpoint])；</p><p>而原rebase的[startpoint] 的意思是，应该是表示，在此commit开始（[startpoint]）更改的代码部分；</p></blockquote><blockquote><p><a href="https://www.jianshu.com/u/24608a040883">andy_dfa5</a></p><p>5楼 2018.08.13 14:14</p><p>作者写的很好，但是有个小错误，就是rebase是一个开闭集，就是上面例子中 git rebase 90bc0045b^ 5de0da9f2 –onto master。90bc0045b^这个提交是不会生效的，如果要这个生效要从b4d576开始rebase</p></blockquote><p>关于上面的质疑自己动手试下就知道结果了。</p><p>注:因为<code>[startpoint]</code> <code>[endpoint]</code>指定的是一个前开后闭的区间，为了让这个区间包含C提交，我们将区间起始点向后退了一步。<br>运行完成后查看当前分支的日志:</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202105925.png" alt=""></p><p>可以看到，C~E部分的提交内容已经复制到了G的后面了，大功告成？NO！我们看一下当前分支的状态:</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202105950.png" alt=""></p><p>当前HEAD处于游离状态，实际上，此时所有分支的状态应该是这样:</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202110048.png" alt=""></p><p>所以，虽然此时HEAD所指向的内容正是我们所需要的，但是master分支是没有任何变化的，<code>git</code>只是将C~E部分的提交内容复制一份粘贴到了master所指向的提交后面，我们需要做的就是将master所指向的提交id设置为当前HEAD所指向的提交id就可以了，即:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git reset --hard  0c72e64</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200202110353.png" alt=""></p><p>此时我们才大功告成！</p><p>参考文章:<br><a href="https://www.jianshu.com/p/4a8f4af4e803">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看过上一篇文章【&lt;a href=&quot;https://removeif.github.io/develop/Git%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E5%9B%9E%E9%80%80%E4%BB%A3%E7%A0%81.html&quot;&gt;Git如何优雅地回退代码&lt;/a&gt;】的小伙伴们，肯定还有很多跟我一样对rebase的使用还是云里雾里的，这篇文章将使你彻底搞明白怎么使用。&lt;br&gt;rebase在git中是一个非常有魅力的命令，使用得当会极大提高自己的工作效率；相反，如果乱用，会给团队中其他人带来麻烦。它的作用简要概括为：可以对某一段线性提交历史进行编辑、删除、复制、粘贴；因此，合理使用rebase命令可以使我们的提交历史干净、简洁！&lt;/p&gt;
&lt;p&gt;前提：不要通过rebase对任何已经提交到公共仓库中的commit进行修改（你自己一个人玩的分支除外）&lt;/p&gt;
    
    </summary>
    
    
      <category term="基础工具类" scheme="https://removeif.github.io/categories/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
      <category term="Git" scheme="https://removeif.github.io/categories/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7%E7%B1%BB/Git/"/>
    
    
      <category term="Git" scheme="https://removeif.github.io/tags/Git/"/>
    
      <category term="rebase" scheme="https://removeif.github.io/tags/rebase/"/>
    
  </entry>
  
  <entry>
    <title>Git如何优雅地回退代码</title>
    <link href="https://removeif.github.io/develop/Git%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E5%9B%9E%E9%80%80%E4%BB%A3%E7%A0%81.html"/>
    <id>https://removeif.github.io/develop/Git%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E5%9B%9E%E9%80%80%E4%BB%A3%E7%A0%81.html</id>
    <published>2020-02-01T13:30:26.000Z</published>
    <updated>2020-02-02T02:00:25.571Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>从接触编程就开始使用 Git 进行代码管理，先是自己玩 Github，又在工作中使用 Gitlab，虽然使用时间挺长，可是也只进行一些常用操作，如推拉代码、提交、合并等，更复杂的操作没有使用过，看过的教程也逐渐淡忘了，有些对不起 Linus 大神。</p><p>出来混总是要还的，前些天就遇到了 Git 里一种十分糟心的场景，并为之前没有深入理解 Git 命令付出了一下午时间的代价。</p><p>先介绍一下这种场景，我们一个项目从 N 版本升到 A 版本时引入了另一项目的 jar 包，又陆续发布了 B、C 版本，但在 C 版本后忽然发现了 A 版本引入的 jar 包有极大的性能问题，B、C 版本都是基于 A 版本发布的，要修复 jar 包性能问题，等 jar 包再发版还得几天，可此时线上又有紧急的 Bug 要修，于是就陷入了进退两难的境地。</p><p>最后决定先将代码回退到 A 版本之前，再基于旧版本修复 Bug，也就开始了五个小时的受苦之路。</p><a id="more"></a><h3 id="基础试探"><a href="#基础试探" class="headerlink" title="基础试探"></a>基础试探</h3><h4 id="revert"><a href="#revert" class="headerlink" title="revert"></a>revert</h4><p>首先肯定的是 revert，<code>git revert commit_id</code> 能产生一个 与 commit_id 完全相反的提交，即 commit_id 里是添加， revert 提交里就是删除。</p><p>但是使用 git log 查看了提交记录后，我就打消了这种想法，因为提交次数太多了，中途还有几次从其他分支的 merge 操作。</p><p>”利益于”我们不太干净的提交记录，要完成从 C 版本到 N 版本的 revert，我需要倒序执行 revert 操作几十次，如果其中顺序错了一次，最终结果可能就是不对的。</p><p>另外我们知道我们在进行代码 merge 时，也会把 merge 信息产生一次新的提交，而 revert 这次 merge commit 时需要指定 m 参数，以指定 <code>mainline</code></p><p>这个 mainline 是主线，也是我们要保留代码的主分支，从 feature 分支往 develop 分支合并，或由 develop 分支合并到 master 的提交还好确定，但 feature 分支互相合并时，我哪知道哪个是主线啊。</p><p>所以 revert 的文案被废弃了。</p><h4 id="Reset"><a href="#Reset" class="headerlink" title="Reset"></a>Reset</h4><p>然后就考虑 <code>reset</code> 了， reset 也能使代码回到某次提交，但跟 revert 不同的是， reset 是将提交的 HEAD 指针指到某次提交，之后的提交记录会消失，就像从没有过这么一次提交。</p><p>但由于我们都在 feature 分支开发，我在 feature 分支上将代码回退到某次提交后，将其合并到 develop 分支时却被提示报错。</p><p>这是因为 feature 分支回退了提交后，在 git 的 workflow 里，feature 分支是落后于 develop 分支的，而合并向 develop 分支，又需要和 develop 分支保持最新的同步，需要将 develop 分支的数据合并到 feature 分支上，而合并后，原来被 reset 的代码又回来了。</p><p>这个时候另一个可选项是在 master 分支上执行 reset，使用 <code>--hard</code> 选项完全抛弃这些旧代码，reset 后再强制推到远端。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">master&gt; git reset --hard commit_id</span><br><span class="line">master&gt; git push --force origin master</span><br></pre></td></tr></table></figure><p>但是还是有问题，首先，我们的 master 分支在 gitlab 里是被保护的，不能使用 force push，毕竟风险挺大了，万一有人 reset 到最开始的提交再强制 push 的话，虽然可以使用 <code>reflog</code> 恢复，但也是一番折腾。</p><p>另外，reset 毕竟太野蛮，我们还是想能保留提交历史，以后排查问题也可以参考。</p><h3 id="升级融合"><a href="#升级融合" class="headerlink" title="升级融合"></a>升级融合</h3><h4 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h4><p>只好用搜索引擎继续搜索，看到有人提出可以先使用 <code>rebase</code> 把多个提交合并成一个提交，再使用 revert 产生一次反提交，这种方法的思路非常清晰，把 revert 和 rebase 两个命令搭配得很好，相当于使用 revert 回退的升级版。</p><p>先说一下 rebase，<strong>rebase</strong> 是”变基”的意思，这里的”基”，在我理解是指[多次] commit 形成的 git workflow，使用 rebase，我们可以改变这些历史提交，修改 commit 信息，将多个 commit 进行组合。</p><p>介绍 rebase 的文档有很多，我们直接来说用它来进行代码回退的步骤。</p><ol><li><p>首先，切出一个新分支 F，使用 git log 查询一下<code>要回退到</code>的 commit 版本 N。</p></li><li><p>使用命令 <code>git rebase -i N</code>， -i 指定交互模式后，会打开 git rebase 编辑界面，形如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pick 6fa5869 commit1</span><br><span class="line">pick 0b84ee7 commit2</span><br><span class="line">pick 986c6c8 commit3</span><br><span class="line">pick 91a0dcc commit4</span><br></pre></td></tr></table></figure></li><li><p>这些 commit 自旧到新由上而下排列，我们只需要在 commit_id 前添加操作命令即可。</p><p>在合并 commit 这个需求里，我们可以选择 <code>pick(p)</code> 最旧的 commit1，然后在后续的 commit_id 前添加 <code>squash(s)</code> 命令，将这些 commits 都合并到最旧的 commit1 上。</p></li><li><p>保存 rebase 结果后，再编辑 commit 信息，使这次 rebase 失效，git 会将之前的这些 commit 都删除，并将其更改合并为一个新的 commit5</p><p>如果出错了，也可以使用 <code>git rebase --abort/--continue/--edit-todo``</code>对之前的编辑进行撤销、继续编辑。</p></li><li><p>这个时候，主分支上的提交记录是 <code>older, commit1, commit2, commit3, commit4</code></p><p>而 F 分支上的提交记录是 <code>older, commit5</code>，由于 F 分支的祖先节点是 older，明显落后于主分支的 commit4，将 F 分支向主分支合并是不允许的</p><p>所以我们需要执行 <code>git merge master</code> 将主分支向 F 分支合并，合并后 git 会发现 commit1 到 commit4 提交的内容和 F 分支上 commit5 的修改内容是完全相同的，会自动进行合并，内容不变，但多了一个 commit5。</p></li><li><p>再在 F 分支上对 commit5 进行一次 revert 反提交，就实现了把 commit1 到 commit4 的提交全部回退。</p></li></ol><p>这种方法的取巧之处在于巧妙地利用了 rebase 操作历史提交的功能和 git 识别修改相同自动合并的特性，操作虽然复杂，但历史提交保留得还算完整。</p><p>rebase 这种修改历史提交的功能非常实用，能够很好地解决我们遇到的一个小功能提交了好多次才好使，而把 git 历史弄得乱七八糟的问题，只需要注意避免在多人同时开发的分支使用就行了。</p><p>遗憾的是，当天我并没有理解到 rebase 的这种思想，又由于试了几个方法都不行太过于慌乱，在 rebase 完成后，向主分支合并被拒之后对这些方式的可行性产生了怀疑，又加上有同事提出听起来更可行的方式，就中断了操作。</p><h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><p>这种更可行的方式就是对文件操作，然后让 git 来识别变更，具体是：</p><ol><li>从主分支上切出一个跟主分支完全相同的分支 F。</li><li>从文件管理系统复制项目文件夹为 bak，在 bak 内使用 <code>git checkout N</code> 将代码切到想要的历史提交，这时候 git 会将 bak 内的文件恢复到 N 状态。</li><li>在从文件管理系统内，将 bak 文件夹下 <code>除了 .git</code> 文件夹下的所有内容复制粘贴到原项目目录下。git 会纯从文件级别识别到变更，然后更新工作区。</li><li>在原项目目录下执行 <code>add 和 commit</code>，完成反提交。</li></ol><p>这种方式的巧妙之处在于利用 git 本身对文件的识别，不牵涉到对 workflow 操作。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>最后终于靠着文件操作方式成功完成了代码回退，事后想来真是一把心酸泪。</p><p>为了让我的五个小时不白费，复盘一下当时的场景，学习并总结一下四种代码回退的方式：</p><ul><li>revert 适合需要回退的历史提交不多，且无合并冲突的情景。</li><li>如果你可以向 master 强推代码，且想让 git log 里不再出现被回退代码的痕迹，可以使用 <code>git reset --hard + git push --force``</code>的方式。</li><li>如果你有些 geek，追求用”正规而正统”的方式来回退代码，rebase + revert 满足你的需求。</li><li>如果你不在乎是否优雅，想用最简单，最直接的方式，文件操作正合适。</li></ul><p>git 真的是非常牛逼的代码管理工具，入手简单，三五个命令组合起来就足够完成工作需求，又对 geeker 们非常友好，你想要的骚操作它都支持，学无止境啊。</p><p>参考文章:<br><a href="https://mp.weixin.qq.com/s/R2FC922c49bS4CaWd47mug">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;从接触编程就开始使用 Git 进行代码管理，先是自己玩 Github，又在工作中使用 Gitlab，虽然使用时间挺长，可是也只进行一些常用操作，如推拉代码、提交、合并等，更复杂的操作没有使用过，看过的教程也逐渐淡忘了，有些对不起 Linus 大神。&lt;/p&gt;
&lt;p&gt;出来混总是要还的，前些天就遇到了 Git 里一种十分糟心的场景，并为之前没有深入理解 Git 命令付出了一下午时间的代价。&lt;/p&gt;
&lt;p&gt;先介绍一下这种场景，我们一个项目从 N 版本升到 A 版本时引入了另一项目的 jar 包，又陆续发布了 B、C 版本，但在 C 版本后忽然发现了 A 版本引入的 jar 包有极大的性能问题，B、C 版本都是基于 A 版本发布的，要修复 jar 包性能问题，等 jar 包再发版还得几天，可此时线上又有紧急的 Bug 要修，于是就陷入了进退两难的境地。&lt;/p&gt;
&lt;p&gt;最后决定先将代码回退到 A 版本之前，再基于旧版本修复 Bug，也就开始了五个小时的受苦之路。&lt;/p&gt;
    
    </summary>
    
    
      <category term="基础工具类" scheme="https://removeif.github.io/categories/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
      <category term="Git" scheme="https://removeif.github.io/categories/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7%E7%B1%BB/Git/"/>
    
    
      <category term="Git" scheme="https://removeif.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Spring的Bean生命周期</title>
    <link href="https://removeif.github.io/java/frame/Spring%E7%9A%84Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html"/>
    <id>https://removeif.github.io/java/frame/Spring%E7%9A%84Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html</id>
    <published>2020-01-31T10:23:32.000Z</published>
    <updated>2020-02-02T02:00:25.580Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、获取Bean"><a href="#一、获取Bean" class="headerlink" title="一、获取Bean"></a>一、获取Bean</h3><h4 id="第一阶段获取Bean"><a href="#第一阶段获取Bean" class="headerlink" title="第一阶段获取Bean"></a>第一阶段获取Bean</h4><p>这里的流程图的入口在 <code>AbstractBeanFactory</code>类的 <code>doGetBean</code>方法，这里可以配合前面的 getBean方法分析文章进行阅读。主要流程就是</p><p><strong>1、</strong>先处理Bean 的名称，因为如果以“&amp;”开头的Bean名称表示获取的是对应的FactoryBean对象；<br><strong>2、</strong>从缓存中获取单例Bean，有则进一步判断这个Bean是不是在创建中，如果是的就等待创建完毕，否则直接返回这个Bean对象<br><strong>3、</strong>如果不存在单例Bean缓存，则先进行循环依赖的解析<br><strong>4、</strong>解析完毕之后先获取父类BeanFactory，获取到了则调用父类的getBean方法，不存在则先合并然后创建Bean</p><a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200131172749.png" alt=""></p><h3 id="二、创建Bean"><a href="#二、创建Bean" class="headerlink" title="二、创建Bean"></a>二、创建Bean</h3><h4 id="创建Bean之前"><a href="#创建Bean之前" class="headerlink" title="创建Bean之前"></a>创建Bean之前</h4><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200131173132.png" alt=""></p><h4 id="在真正创建Bean之前逻辑"><a href="#在真正创建Bean之前逻辑" class="headerlink" title="在真正创建Bean之前逻辑"></a>在真正创建Bean之前逻辑</h4><p>这个流程图对应的代码在 <code>AbstractAutowireCapableBeanFactory</code>类的 <code>createBean</code>方法中。</p><p><strong>1、</strong>这里会先获取 <code>RootBeanDefinition</code>对象中的Class对象并确保已经关联了要创建的Bean的Class 。<br><strong>2、</strong>这里会检查3个条件</p><p>（1）Bean的属性中的 <code>beforeInstantiationResolved</code>字段是否为true，默认是false。<br>（2）Bean是原生的Bean<br>（3）Bean的 <code>hasInstantiationAwareBeanPostProcessors</code>属性为true，这个属性在Spring准备刷新容器钱转杯BeanPostProcessors的时候会设置，如果当前Bean实现了 <code>InstantiationAwareBeanPostProcessor</code>则这个就会是true。</p><p>当三个条件都存在的时候，就会调用实现的 <code>InstantiationAwareBeanPostProcessor</code>接口的 <code>postProcessBeforeInstantiation</code>方法，然后获取返回的Bean，如果返回的Bean不是null还会调用实现的 <code>BeanPostProcessor</code>接口的 <code>postProcessAfterInitialization</code>方法，这里用代码说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object  <span class="title">resolveBeforeInstantiation</span><span class="params">(String beanName,RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Object bean = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//条件1</span></span><br><span class="line">        <span class="keyword">if</span>(! Boolean.FALSE.equals(mbd.beforeInstantiationResolved)) &#123;</span><br><span class="line">            <span class="comment">//条件2跟条件3</span></span><br><span class="line">            <span class="keyword">if</span>(!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">                Class&lt;?&gt; targetType = determineTargetType(beanName, mbd);</span><br><span class="line">                <span class="keyword">if</span>(targetType != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//调用实现的postProcessBeforeInstantiation方法</span></span><br><span class="line">                    bean = applyBeanPostProcessorsBeforeInstantiation(targetType, beanName);</span><br><span class="line">                    <span class="keyword">if</span>(bean != <span class="keyword">null</span> ) &#123;</span><br><span class="line">                    <span class="comment">//调用实现的postProcessAfterInitialization方法</span></span><br><span class="line">                        bean = applyBeanPostProcessorsAfterInitialization(bean, beanName);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//不满足2或者3的时候就会设置为false</span></span><br><span class="line">            mbd.beforeInstantiationResolved = (bean != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果上面3个条件其中一个不满足就不会调用实现的方法。默认这里都不会调用的这些 <code>BeanPostProcessors</code>的实现方法。然后继续执行后面的 <code>doCreateBean</code>方法。</p><h4 id="真正的创建Bean，doCreateBean"><a href="#真正的创建Bean，doCreateBean" class="headerlink" title="真正的创建Bean，doCreateBean"></a>真正的创建Bean，doCreateBean</h4><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200131174146.png" alt=""></p><h4 id="doCreateBean方法逻辑"><a href="#doCreateBean方法逻辑" class="headerlink" title="doCreateBean方法逻辑"></a>doCreateBean方法逻辑</h4><p>这个代码的实现还是在 <code>AbstractAutowireCapableBeanFactory</code>方法中。流程是</p><p><strong>1、</strong>先检查 <code>instanceWrapper</code>变量是不是null，这里一般是null，除非当前正在创建的Bean在 <code>factoryBeanInstanceCache</code>中存在这个是保存还没创建完成的FactoryBean的集合。<br><strong>2、</strong>调用createBeanInstance方法实例化Bean，这个方法在后面会讲解<br><strong>3、</strong>如果当前 <code>RootBeanDefinition</code>对象还没有调用过实现了的 <code>MergedBeanDefinitionPostProcessor</code>接口的方法，则会进行调用 。<br><strong>4、</strong> 当满足以下三点<br>（1）是单例Bean<br>（2）尝试解析bean之间的循环引用<br>（3）bean目前正在创建中<br>则会进一步检查是否实现了 <code>SmartInstantiationAwareBeanPostProcessor</code>接口如果实现了则调用是实现的 <code>getEarlyBeanReference</code>方法5、 调用 <code>populateBean</code>方法进行属性填充，这里后面会讲解6、 调用 <code>initializeBean</code>方法对Bean进行初始化，这里后面会讲解</p><h4 id="实例化Bean，createBeanInstance"><a href="#实例化Bean，createBeanInstance" class="headerlink" title="实例化Bean，createBeanInstance"></a>实例化Bean，createBeanInstance</h4><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200131174320.png" alt=""></p><h4 id="实例化Bean"><a href="#实例化Bean" class="headerlink" title="实例化Bean"></a>实例化Bean</h4><p>这里的逻辑稍微有一点复杂，这个流程图已经是简化过后的了。简要根据代码说明一下流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> BeanWrapper <span class="title">createBeanInstance</span><span class="params">(String beanName, RootBeanDefinition mbd, Object[] args)</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt; beanClass = <span class="keyword">this</span>.resolveBeanClass(mbd, beanName, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span> (beanClass != <span class="keyword">null</span> &amp;&amp; !Modifier.isPublic(beanClass.getModifiers()) &amp;&amp; !mbd.isNonPublicAccessAllowed()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName, <span class="string">"Bean class isn't public, and non-public access not allowed: "</span> + beanClass.getName());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mbd.getFactoryMethodName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.instantiateUsingFactoryMethod(beanName, mbd, args);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">boolean</span> resolved = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">boolean</span> autowireNecessary = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (args == <span class="keyword">null</span>) &#123;</span><br><span class="line">                Object var7 = mbd.constructorArgumentLock;</span><br><span class="line">                <span class="keyword">synchronized</span>(mbd.constructorArgumentLock) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mbd.resolvedConstructorOrFactoryMethod != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        resolved = <span class="keyword">true</span>;</span><br><span class="line">                        autowireNecessary = mbd.constructorArgumentsResolved;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (resolved) &#123;</span><br><span class="line">                <span class="keyword">return</span> autowireNecessary ? <span class="keyword">this</span>.autowireConstructor(beanName, mbd, (Constructor[])<span class="keyword">null</span>, (Object[])<span class="keyword">null</span>) : <span class="keyword">this</span>.instantiateBean(beanName, mbd);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Constructor&lt;?&gt;[] ctors = <span class="keyword">this</span>.determineConstructorsFromBeanPostProcessors(beanClass, beanName);</span><br><span class="line">                <span class="keyword">return</span> ctors == <span class="keyword">null</span> &amp;&amp; mbd.getResolvedAutowireMode() != <span class="number">3</span> &amp;&amp; !mbd.hasConstructorArgumentValues() &amp;&amp; ObjectUtils.isEmpty(args) ? <span class="keyword">this</span>.instantiateBean(beanName, mbd) : <span class="keyword">this</span>.autowireConstructor(beanName, mbd, ctors, args);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>1、</strong>先检查Class是否已经关联了，并且对应的修饰符是否是public的<br><strong>2、</strong>如果用户定义了Bean实例化的函数，则调用并返回<br><strong>3、</strong>如果当前Bean实现了 <code>FactoryBean</code>接口则调用对应的 <code>FactoryBean</code>接口的 <code>getObject</code>方法<br><strong>4、</strong>根据getBean时候是否传入构造参数进行处理<br><strong>4.1</strong> 如果没有传入构造参数，则检查是否存在已经缓存的无参构造器，有则使用构造器直接创建，没有就会调用 <code>instantiateBean</code>方法先获取实例化的策略默认是 <code>CglibSubclassingInstantiationStrategy</code>，然后实例化Bean。最后返回<br><strong>4.2</strong> 如果传入了构造参数，则会先检查是否实现了 <code>SmartInstantiationAwareBeanPostProcessor</code>接口，如果实现了会调用 <code>determineCandidateConstructors</code>获取返回的候选构造器。<br><strong>4.3</strong> 检查4个条件是否满足一个<br>（1）构造器不为null，<br>（2）从RootBeanDefinition中获取到的关联的注入方式是构造器注入（没有构造参数就是setter注入，有则是构造器注入）<br>（3）含有构造参数<br>（4）getBean方法传入构造参数不是空</p><p>满足其中一个则会调用返回的候选构造器实例化Bean并返回，如果都不满足，则会根据构造参数选则合适的有参构造器然后实例化Bean并返回</p><p><strong>5、</strong>如果上面都没有合适的构造器，则直接使用无参构造器创建并返回Bean。</p><h4 id="填充Bean，populateBean"><a href="#填充Bean，populateBean" class="headerlink" title="填充Bean，populateBean"></a>填充Bean，populateBean</h4><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200131175228.png" alt=""></p><h4 id="填充Bean"><a href="#填充Bean" class="headerlink" title="填充Bean"></a>填充Bean</h4><p>这里还是根据代码来说一下流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">populateBean</span><span class="params">(String beanName, RootBeanDefinition mbd, BeanWrapper bw)</span> </span>&#123;</span><br><span class="line">        PropertyValues pvs = mbd.getPropertyValues();</span><br><span class="line">        <span class="keyword">if</span> (bw == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!((PropertyValues)pvs).isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName, <span class="string">"Cannot apply property values to null instance"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">boolean</span> continueWithPropertyPopulation = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (!mbd.isSynthetic() &amp;&amp; <span class="keyword">this</span>.hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">                Iterator var6 = <span class="keyword">this</span>.getBeanPostProcessors().iterator();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(var6.hasNext()) &#123;</span><br><span class="line">                    BeanPostProcessor bp = (BeanPostProcessor)var6.next();</span><br><span class="line">                    <span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                        InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor)bp;</span><br><span class="line">                        <span class="keyword">if</span> (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) &#123;</span><br><span class="line">                            continueWithPropertyPopulation = <span class="keyword">false</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (continueWithPropertyPopulation) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mbd.getResolvedAutowireMode() == <span class="number">1</span> || mbd.getResolvedAutowireMode() == <span class="number">2</span>) &#123;</span><br><span class="line">                    MutablePropertyValues newPvs = <span class="keyword">new</span> MutablePropertyValues((PropertyValues)pvs);</span><br><span class="line">                    <span class="keyword">if</span> (mbd.getResolvedAutowireMode() == <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.autowireByName(beanName, mbd, bw, newPvs);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (mbd.getResolvedAutowireMode() == <span class="number">2</span>) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.autowireByType(beanName, mbd, bw, newPvs);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    pvs = newPvs;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">boolean</span> hasInstAwareBpps = <span class="keyword">this</span>.hasInstantiationAwareBeanPostProcessors();</span><br><span class="line">                <span class="keyword">boolean</span> needsDepCheck = mbd.getDependencyCheck() != <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (hasInstAwareBpps || needsDepCheck) &#123;</span><br><span class="line">                    PropertyDescriptor[] filteredPds = <span class="keyword">this</span>.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class="line">                    <span class="keyword">if</span> (hasInstAwareBpps) &#123;</span><br><span class="line">                        Iterator var9 = <span class="keyword">this</span>.getBeanPostProcessors().iterator();</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">while</span>(var9.hasNext()) &#123;</span><br><span class="line">                            BeanPostProcessor bp = (BeanPostProcessor)var9.next();</span><br><span class="line">                            <span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                                InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor)bp;</span><br><span class="line">                                pvs = ibp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);</span><br><span class="line">                                <span class="keyword">if</span> (pvs == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                    <span class="keyword">return</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (needsDepCheck) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.checkDependencies(beanName, mbd, filteredPds, (PropertyValues)pvs);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.applyPropertyValues(beanName, mbd, bw, (PropertyValues)pvs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>1、</strong>检查当前Bean是否实现了 <code>InstantiationAwareBeanPostProcessor</code>的 <code>postProcessAfterInstantiation</code>方法则调用，并结束Bean的填充。<br><strong>2、</strong>将按照类型跟按照名称注入的Bean分开，如果注入的Bean还没有实例化的这里会实例化，然后放到 <code>PropertyValues</code>对象中。<br><strong>3、</strong>如果实现了 <code>InstantiationAwareBeanPostProcessor</code>类的 <code>postProcessProperties</code>则调用这个方法并获取返回值，如果返回值是null，则有可能是实现了过期的 <code>postProcessPropertyValues</code>方法，这里需要进一步调用 <code>postProcessPropertyValues</code>方法<br><strong>4、</strong>进行参数填充</p><h4 id="初始化Bean，initializeBean"><a href="#初始化Bean，initializeBean" class="headerlink" title="初始化Bean，initializeBean"></a>初始化Bean，initializeBean</h4><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200131175430.png" alt=""></p><h4 id="初始化Bean"><a href="#初始化Bean" class="headerlink" title="初始化Bean"></a>初始化Bean</h4><p>同时这里根据代码跟流程图来说明</p><p><strong>1、</strong>如果Bean实现了 <code>BeanNameAware</code>, <code>BeanClassLoaderAware</code>, <code>BeanFactoryAware</code>则调用对应实现的方法 。<br><strong>2、</strong>Bean不为null并且bean不是合成的，如果实现了 <code>BeanPostProcessor</code>的 <code>postProcessBeforeInitialization</code>则会调用实现的 <code>postProcessBeforeInitialization</code>方法。在 <code>ApplicationContextAwareProcessor</code>类中实现了 <code>postProcessBeforeInitialization</code>方法。而这个类会在Spring刷新容器准备 <code>beanFactory</code>的时候会加进去，这里就会被调用，而调用里面会检查Bean是不是 <code>EnvironmentAware</code>, <code>EmbeddedValueResolverAware</code>, <code>ResourceLoaderAware</code>, <code>ApplicationEventPublisherAware</code>, <code>MessageSourceAware</code>, <code>ApplicationContextAware</code>的实现类。这里就会调用对应的实现方法。代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">prepareBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">        beanFactory.setBeanClassLoader(<span class="keyword">this</span>.getClassLoader());</span><br><span class="line">        beanFactory.setBeanExpressionResolver(<span class="keyword">new</span> StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));</span><br><span class="line">        beanFactory.addPropertyEditorRegistrar(<span class="keyword">new</span> ResourceEditorRegistrar(<span class="keyword">this</span>, <span class="keyword">this</span>.getEnvironment()));</span><br><span class="line">        beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationContextAwareProcessor(<span class="keyword">this</span>));</span><br><span class="line">        beanFactory.ignoreDependencyInterface(ResourceLoaderAware<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        beanFactory.ignoreDependencyInterface(MessageSourceAware<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        beanFactory.ignoreDependencyInterface(ApplicationContextAware<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        beanFactory.ignoreDependencyInterface(EnvironmentAware<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        beanFactory.registerResolvableDependency(BeanFactory<span class="class">.<span class="keyword">class</span>, <span class="title">beanFactory</span>)</span>;</span><br><span class="line">        beanFactory.registerResolvableDependency(ResourceLoader<span class="class">.<span class="keyword">class</span>, <span class="title">this</span>)</span>;</span><br><span class="line">        beanFactory.registerResolvableDependency(ApplicationEventPublisher<span class="class">.<span class="keyword">class</span>, <span class="title">this</span>)</span>;</span><br><span class="line">        beanFactory.registerResolvableDependency(ApplicationContext<span class="class">.<span class="keyword">class</span>, <span class="title">this</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (beanFactory.containsBean(<span class="string">"loadTimeWeaver"</span>)) &#123;</span><br><span class="line">            beanFactory.addBeanPostProcessor(<span class="keyword">new</span> LoadTimeWeaverAwareProcessor(beanFactory));</span><br><span class="line">            beanFactory.setTempClassLoader(<span class="keyword">new</span> ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!beanFactory.containsLocalBean(<span class="string">"environment"</span>)) &#123;</span><br><span class="line">            beanFactory.registerSingleton(<span class="string">"environment"</span>, <span class="keyword">this</span>.getEnvironment());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!beanFactory.containsLocalBean(<span class="string">"systemProperties"</span>)) &#123;</span><br><span class="line">            beanFactory.registerSingleton(<span class="string">"systemProperties"</span>, <span class="keyword">this</span>.getEnvironment().getSystemProperties());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!beanFactory.containsLocalBean(<span class="string">"systemEnvironment"</span>)) &#123;</span><br><span class="line">            beanFactory.registerSingleton(<span class="string">"systemEnvironment"</span>, <span class="keyword">this</span>.getEnvironment().getSystemEnvironment());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(<span class="keyword">final</span> Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        AccessControlContext acc = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span> &amp;&amp; (bean <span class="keyword">instanceof</span> EnvironmentAware || bean <span class="keyword">instanceof</span> EmbeddedValueResolverAware || bean <span class="keyword">instanceof</span> ResourceLoaderAware || bean <span class="keyword">instanceof</span> ApplicationEventPublisherAware || bean <span class="keyword">instanceof</span> MessageSourceAware || bean <span class="keyword">instanceof</span> ApplicationContextAware)) &#123;</span><br><span class="line">            acc = <span class="keyword">this</span>.applicationContext.getBeanFactory().getAccessControlContext();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (acc != <span class="keyword">null</span>) &#123;</span><br><span class="line">            AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Object&gt;() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    ApplicationContextAwareProcessor.<span class="keyword">this</span>.invokeAwareInterfaces(bean);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, acc);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.invokeAwareInterfaces(bean);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>1、</strong>实例化Bean然后，检查是否实现了 <code>InitializingBean</code>的 <code>afterPropertiesSet</code>方法，如果实现了就会调用<br><strong>2、</strong>Bean不为null并且bean不是合成的，如果实现了 <code>BeanPostProcessor</code>的 <code>postProcessBeforeInitialization</code>则会调用实现的 <code>postProcessAfterInitialization</code>方法。</p><p>到此创建Bean 的流程就没了，剩下的就是容器销毁的时候的了</p><h3 id="三、destory方法跟销毁Bean"><a href="#三、destory方法跟销毁Bean" class="headerlink" title="三、destory方法跟销毁Bean"></a>三、destory方法跟销毁Bean</h3><p>Bean在创建完毕之后会检查用户是否指定了 <code>destroyMethodName</code>以及是否实现了 <code>DestructionAwareBeanPostProcessor</code>接口的 <code>requiresDestruction</code>方法，如果指定了会记录下来保存在 <code>DisposableBeanAdapter</code>对象中并保存在bean的 <code>disposableBeans</code>属性中。代码在 <code>AbstractBeanFactory</code>的 <code>registerDisposableBeanIfNecessary</code>中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerDisposableBeanIfNecessary</span><span class="params">(String beanName, Object bean, RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line">        AccessControlContext acc = System.getSecurityManager() != <span class="keyword">null</span> ? <span class="keyword">this</span>.getAccessControlContext() : <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (!mbd.isPrototype() &amp;&amp; <span class="keyword">this</span>.requiresDestruction(bean, mbd)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">                <span class="keyword">this</span>.registerDisposableBean(beanName, <span class="keyword">new</span> DisposableBeanAdapter(bean, beanName, mbd, <span class="keyword">this</span>.getBeanPostProcessors(), acc));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Scope scope = (Scope)<span class="keyword">this</span>.scopes.get(mbd.getScope());</span><br><span class="line">                <span class="keyword">if</span> (scope == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"No Scope registered for scope name '"</span> + mbd.getScope() + <span class="string">"'"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                scope.registerDestructionCallback(beanName, <span class="keyword">new</span> DisposableBeanAdapter(bean, beanName, mbd, <span class="keyword">this</span>.getBeanPostProcessors(), acc));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DisposableBeanAdapter</span><span class="params">(Object bean, String beanName, RootBeanDefinition beanDefinition, List&lt;BeanPostProcessor&gt; postProcessors, AccessControlContext acc)</span> </span>&#123;</span><br><span class="line">        Assert.notNull(bean, <span class="string">"Disposable bean must not be null"</span>);</span><br><span class="line">        <span class="keyword">this</span>.bean = bean;</span><br><span class="line">        <span class="keyword">this</span>.beanName = beanName;</span><br><span class="line">        <span class="keyword">this</span>.invokeDisposableBean = <span class="keyword">this</span>.bean <span class="keyword">instanceof</span> DisposableBean &amp;&amp; !beanDefinition.isExternallyManagedDestroyMethod(<span class="string">"destroy"</span>);</span><br><span class="line">        <span class="keyword">this</span>.nonPublicAccessAllowed = beanDefinition.isNonPublicAccessAllowed();</span><br><span class="line">        <span class="keyword">this</span>.acc = acc;</span><br><span class="line">        String destroyMethodName = <span class="keyword">this</span>.inferDestroyMethodIfNecessary(bean, beanDefinition);</span><br><span class="line">        <span class="keyword">if</span> (destroyMethodName != <span class="keyword">null</span> &amp;&amp; (!<span class="keyword">this</span>.invokeDisposableBean || !<span class="string">"destroy"</span>.equals(destroyMethodName)) &amp;&amp; !beanDefinition.isExternallyManagedDestroyMethod(destroyMethodName)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.destroyMethodName = destroyMethodName;</span><br><span class="line">            <span class="keyword">this</span>.destroyMethod = <span class="keyword">this</span>.determineDestroyMethod();</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.destroyMethod == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (beanDefinition.isEnforceDestroyMethod()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionValidationException(<span class="string">"Couldn't find a destroy method named '"</span> + destroyMethodName + <span class="string">"' on bean with name '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Class&lt;?&gt;[] paramTypes = <span class="keyword">this</span>.destroyMethod.getParameterTypes();</span><br><span class="line">                <span class="keyword">if</span> (paramTypes.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionValidationException(<span class="string">"Method '"</span> + destroyMethodName + <span class="string">"' of bean '"</span> + beanName + <span class="string">"' has more than one parameter - not supported as destroy method"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (paramTypes.length == <span class="number">1</span> &amp;&amp; Boolean.TYPE != paramTypes[<span class="number">0</span>]) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionValidationException(<span class="string">"Method '"</span> + destroyMethodName + <span class="string">"' of bean '"</span> + beanName + <span class="string">"' has a non-boolean parameter - not supported as destroy method"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.beanPostProcessors = <span class="keyword">this</span>.filterPostProcessors(postProcessors, bean);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在销毁Bean的时候最后都会调用 <code>AbstractAutowireCapableBeanFactory</code>的 <code>destroyBean</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyBean</span><span class="params">(Object existingBean)</span> </span>&#123;</span><br><span class="line">    (<span class="keyword">new</span> DisposableBeanAdapter(existingBean, <span class="keyword">this</span>.getBeanPostProcessors(), <span class="keyword">this</span>.getAccessControlContext())).destroy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是创建一个 <code>DisposableBeanAdapter</code>对象，这个对象实现了Runnable接口，在实现的 <code>run</code>方法中会调用实现的 <code>DisposableBean</code>接口的 <code>destroy</code>方法。并且在创建 <code>DisposableBeanAdapter</code>对象的时候会根据传入的bean是否实现了 <code>DisposableBean</code>接口来设置 <code>invokeDisposableBean</code>变量，这个变量表实有没有实现 <code>DisposableBean</code>接口</p><figure class="highlight java"><figcaption><span>DisposableBeanAdapter.java >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DisposableBeanAdapter</span><span class="params">(Object bean, List&lt;BeanPostProcessor&gt; postProcessors, AccessControlContext acc)</span> </span>&#123;</span><br><span class="line">        Assert.notNull(bean, <span class="string">"Disposable bean must not be null"</span>);</span><br><span class="line">        <span class="keyword">this</span>.bean = bean;</span><br><span class="line">        <span class="keyword">this</span>.beanName = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.invokeDisposableBean = <span class="keyword">this</span>.bean <span class="keyword">instanceof</span> DisposableBean;</span><br><span class="line">        <span class="keyword">this</span>.nonPublicAccessAllowed = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.acc = acc;</span><br><span class="line">        <span class="keyword">this</span>.beanPostProcessors = <span class="keyword">this</span>.filterPostProcessors(postProcessors, bean);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.destroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(<span class="keyword">this</span>.beanPostProcessors)) &#123;</span><br><span class="line">            Iterator var1 = <span class="keyword">this</span>.beanPostProcessors.iterator();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(var1.hasNext()) &#123;</span><br><span class="line">                DestructionAwareBeanPostProcessor processor = (DestructionAwareBeanPostProcessor)var1.next();</span><br><span class="line">                processor.postProcessBeforeDestruction(<span class="keyword">this</span>.bean, <span class="keyword">this</span>.beanName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.invokeDisposableBean) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="string">"Invoking destroy() on bean with name '"</span> + <span class="keyword">this</span>.beanName + <span class="string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedExceptionAction&lt;Object&gt;() &#123;</span><br><span class="line">                        <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ((DisposableBean)DisposableBeanAdapter.<span class="keyword">this</span>.bean).destroy();</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, <span class="keyword">this</span>.acc);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ((DisposableBean)<span class="keyword">this</span>.bean).destroy();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">                String msg = <span class="string">"Invocation of destroy method failed on bean with name '"</span> + <span class="keyword">this</span>.beanName + <span class="string">"'"</span>;</span><br><span class="line">                <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.warn(msg, var3);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    logger.warn(msg + <span class="string">": "</span> + var3);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.destroyMethod != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.invokeCustomDestroyMethod(<span class="keyword">this</span>.destroyMethod);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.destroyMethodName != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Method methodToCall = <span class="keyword">this</span>.determineDestroyMethod();</span><br><span class="line">            <span class="keyword">if</span> (methodToCall != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.invokeCustomDestroyMethod(methodToCall);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200131181906.png" alt="实例化之前的准备阶段"></p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200131181931.png" alt="实例化前"></p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200131181951.png" alt="实例化后"></p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200131182017.png" alt="初始化前"></p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200131182037.png" alt="初始化后+销毁"></p><p>参考文章:<br><a href="https://mp.weixin.qq.com/s/8F2ViVXa5hnn5Lljbis0VA">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、获取Bean&quot;&gt;&lt;a href=&quot;#一、获取Bean&quot; class=&quot;headerlink&quot; title=&quot;一、获取Bean&quot;&gt;&lt;/a&gt;一、获取Bean&lt;/h3&gt;&lt;h4 id=&quot;第一阶段获取Bean&quot;&gt;&lt;a href=&quot;#第一阶段获取Bean&quot; class=&quot;headerlink&quot; title=&quot;第一阶段获取Bean&quot;&gt;&lt;/a&gt;第一阶段获取Bean&lt;/h4&gt;&lt;p&gt;这里的流程图的入口在 &lt;code&gt;AbstractBeanFactory&lt;/code&gt;类的 &lt;code&gt;doGetBean&lt;/code&gt;方法，这里可以配合前面的 getBean方法分析文章进行阅读。主要流程就是&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、&lt;/strong&gt;先处理Bean 的名称，因为如果以“&amp;amp;”开头的Bean名称表示获取的是对应的FactoryBean对象；&lt;br&gt;&lt;strong&gt;2、&lt;/strong&gt;从缓存中获取单例Bean，有则进一步判断这个Bean是不是在创建中，如果是的就等待创建完毕，否则直接返回这个Bean对象&lt;br&gt;&lt;strong&gt;3、&lt;/strong&gt;如果不存在单例Bean缓存，则先进行循环依赖的解析&lt;br&gt;&lt;strong&gt;4、&lt;/strong&gt;解析完毕之后先获取父类BeanFactory，获取到了则调用父类的getBean方法，不存在则先合并然后创建Bean&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://removeif.github.io/categories/java/"/>
    
      <category term="spring" scheme="https://removeif.github.io/categories/java/spring/"/>
    
    
      <category term="spring" scheme="https://removeif.github.io/tags/spring/"/>
    
      <category term="bean" scheme="https://removeif.github.io/tags/bean/"/>
    
  </entry>
  
  <entry>
    <title>算法成长之路leetcode19-20</title>
    <link href="https://removeif.github.io/algorithm/%E7%AE%97%E6%B3%95%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AFleetcode19-20.html"/>
    <id>https://removeif.github.io/algorithm/%E7%AE%97%E6%B3%95%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AFleetcode19-20.html</id>
    <published>2020-01-19T15:58:33.000Z</published>
    <updated>2020-02-02T02:00:25.565Z</updated>
    
    <content type="html"><![CDATA[<h4 id="19-Remove-Nth-Node-From-End-of-List"><a href="#19-Remove-Nth-Node-From-End-of-List" class="headerlink" title="19. Remove Nth Node From End of List"></a><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">19. Remove Nth Node From End of List</a></h4><p>Given a linked list, remove the n-th node from the end of list and return its head.</p><a id="more"></a><h5 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n &#x3D; 2.</span><br><span class="line"></span><br><span class="line">After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.</span><br><span class="line">Note:</span><br><span class="line"></span><br><span class="line">Given n will always be valid.</span><br><span class="line"></span><br><span class="line">Follow up:</span><br><span class="line"></span><br><span class="line">Could you do this in one pass?</span><br></pre></td></tr></table></figure><h5 id="JAVA题解"><a href="#JAVA题解" class="headerlink" title="JAVA题解"></a>JAVA题解</h5><p><strong>方法一：两次遍历算法</strong></p><ul><li>思路</li></ul><p>我们注意到这个问题可以容易地简化成另一个问题：删除从列表开头数起的第 (L - n + 1)(L−n+1) 个结点，其中 LL 是列表的长度。只要我们找到列表的长度 LL，这个问题就很容易解决。</p><ul><li>算法</li></ul><p>首先我们将添加一个哑结点作为辅助，该结点位于列表头部。哑结点用来简化某些极端情况，例如列表中只含有一个结点，或需要删除列表的头部。在第一次遍历中，我们找出列表的长度 LL。然后设置一个指向哑结点的指针，并移动它遍历列表，直至它到达第 (L - n)(L−n) 个结点那里。我们把第 (L - n)(L−n) 个结点的 next 指针重新链接至第 (L - n + 2)(L−n+2) 个结点，完成这个算法。</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200120000210.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">示例：</span></span><br><span class="line"><span class="comment">给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.</span></span><br><span class="line"><span class="comment">当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.</span></span><br><span class="line"><span class="comment">说明：</span></span><br><span class="line"><span class="comment">给定的 n 保证是有效的。</span></span><br><span class="line"><span class="comment">进阶：</span></span><br><span class="line"><span class="comment">你能尝试使用一趟扫描实现吗？</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    dummy.next = head;</span><br><span class="line">    <span class="keyword">int</span> length  = <span class="number">0</span>;</span><br><span class="line">    ListNode first = head;</span><br><span class="line">    <span class="keyword">while</span> (first != <span class="keyword">null</span>) &#123;</span><br><span class="line">        length++;</span><br><span class="line">        first = first.next;</span><br><span class="line">    &#125;</span><br><span class="line">    length -= n;</span><br><span class="line">    first = dummy;</span><br><span class="line">    <span class="keyword">while</span> (length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        length--;</span><br><span class="line">        first = first.next;</span><br><span class="line">    &#125;</span><br><span class="line">    first.next = first.next.next;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法二：一次遍历算法</strong></p><ul><li>算法</li></ul><p>上述算法可以优化为只使用一次遍历。我们可以使用两个指针而不是一个指针。第一个指针从列表的开头向前移动 n+1n+1 步，而第二个指针将从列表的开头出发。现在，这两个指针被 nn 个结点分开。我们通过同时移动两个指针向前来保持这个恒定的间隔，直到第一个指针到达最后一个结点。此时第二个指针将指向从最后一个结点数起的第 nn 个结点。我们重新链接第二个指针所引用的结点的 next 指针指向该结点的下下个结点。</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200120000247.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    dummy.next = head;</span><br><span class="line">    ListNode first = dummy;</span><br><span class="line">    ListNode second = dummy;</span><br><span class="line">    <span class="comment">// Advances first pointer so that the gap between first and second is n nodes apart</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        first = first.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Move first to the end, maintaining the gap</span></span><br><span class="line">    <span class="keyword">while</span> (first != <span class="keyword">null</span>) &#123;</span><br><span class="line">        first = first.next;</span><br><span class="line">        second = second.next;</span><br><span class="line">    &#125;</span><br><span class="line">    second.next = second.next.next;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">作者：LeetCode</span><br><span class="line">链接：https:<span class="comment">//leetcode-cn.com/problems/remove-nth-node-from-end-of-list/solution/shan-chu-lian-biao-de-dao-shu-di-nge-jie-dian-by-l/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><h4 id="20-Valid-Parentheses"><a href="#20-Valid-Parentheses" class="headerlink" title="20. Valid Parentheses"></a><a href="https://leetcode-cn.com/problems/valid-parentheses/">20. Valid Parentheses</a></h4><p>Given a string containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid.</p><p>An input string is valid if:</p><p>Open brackets must be closed by the same type of brackets.<br>Open brackets must be closed in the correct order.<br>Note that an empty string is also considered valid.</p><h5 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: &quot;()&quot;</span><br><span class="line">Output: true</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: &quot;()[]&#123;&#125;&quot;</span><br><span class="line">Output: true</span><br><span class="line">Example 3:</span><br><span class="line"></span><br><span class="line">Input: &quot;(]&quot;</span><br><span class="line">Output: false</span><br><span class="line">Example 4:</span><br><span class="line"></span><br><span class="line">Input: &quot;([)]&quot;</span><br><span class="line">Output: false</span><br><span class="line">Example 5:</span><br><span class="line"></span><br><span class="line">Input: &quot;&#123;[]&#125;&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><h5 id="JAVA题解-1"><a href="#JAVA题解-1" class="headerlink" title="JAVA题解"></a>JAVA题解</h5><figure class="highlight java"><figcaption><span>Leetcode20.java >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给定一个只包括 '('，')'，'&#123;'，'&#125;'，'['，']' 的字符串，判断字符串是否有效。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 有效字符串需满足：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 左括号必须用相同类型的右括号闭合。</span></span><br><span class="line"><span class="comment"> * 左括号必须以正确的顺序闭合。</span></span><br><span class="line"><span class="comment"> * 注意空字符串可被认为是有效字符串。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 示例 1:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 输入: "()"</span></span><br><span class="line"><span class="comment"> * 输出: true</span></span><br><span class="line"><span class="comment"> * 示例 2:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 输入: "()[]&#123;&#125;"</span></span><br><span class="line"><span class="comment"> * 输出: true</span></span><br><span class="line"><span class="comment"> * 示例 3:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 输入: "(]"</span></span><br><span class="line"><span class="comment"> * 输出: false</span></span><br><span class="line"><span class="comment"> * 示例 4:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 输入: "([)]"</span></span><br><span class="line"><span class="comment"> * 输出: false</span></span><br><span class="line"><span class="comment"> * 示例 5:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 输入: "&#123;[]&#125;"</span></span><br><span class="line"><span class="comment"> * 输出: true</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leetcode20</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 类似栈的处理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> || s.equals(<span class="string">""</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 奇数</span></span><br><span class="line">        <span class="keyword">if</span>(s.length() % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; arr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Map&lt;Character, Integer&gt; cIn = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        cIn.put(<span class="string">'('</span>, <span class="number">1</span>);</span><br><span class="line">        cIn.put(<span class="string">')'</span>, -<span class="number">1</span>);</span><br><span class="line">        cIn.put(<span class="string">'&#123;'</span>, <span class="number">2</span>);</span><br><span class="line">        cIn.put(<span class="string">'&#125;'</span>, -<span class="number">2</span>);</span><br><span class="line">        cIn.put(<span class="string">'['</span>, <span class="number">3</span>);</span><br><span class="line">        cIn.put(<span class="string">']'</span>, -<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">        arr.add(cIn.get(chars[<span class="number">0</span>]));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 相等则移除</span></span><br><span class="line">            <span class="keyword">int</span> latestIndex = arr.size() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (latestIndex &gt;= <span class="number">0</span> &amp;&amp; arr.get(latestIndex) == -cIn.get(chars[i])) &#123;</span><br><span class="line">                arr.remove(latestIndex);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                arr.add(cIn.get(chars[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (arr.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Leetcode20().isValid(<span class="string">"([])[]"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 栈的处理</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.isEmpty())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        Stack&lt;Character&gt; stack=<span class="keyword">new</span> Stack&lt;Character&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c:s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">'('</span>)</span><br><span class="line">                stack.push(<span class="string">')'</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'&#123;'</span>)</span><br><span class="line">                stack.push(<span class="string">'&#125;'</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'['</span>)</span><br><span class="line">                stack.push(<span class="string">']'</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(stack.empty()||c!=stack.pop())</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(stack.empty())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 栈 官方</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Hash table that takes care of the mappings.</span></span><br><span class="line">  <span class="keyword">private</span> HashMap&lt;Character, Character&gt; mappings;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize hash map with mappings. This simply makes the code easier to read.</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Solution</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.mappings = <span class="keyword">new</span> HashMap&lt;Character, Character&gt;();</span><br><span class="line">    <span class="keyword">this</span>.mappings.put(<span class="string">')'</span>, <span class="string">'('</span>);</span><br><span class="line">    <span class="keyword">this</span>.mappings.put(<span class="string">'&#125;'</span>, <span class="string">'&#123;'</span>);</span><br><span class="line">    <span class="keyword">this</span>.mappings.put(<span class="string">']'</span>, <span class="string">'['</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize a stack to be used in the algorithm.</span></span><br><span class="line">    Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;Character&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">      <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// If the current character is a closing bracket.</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.mappings.containsKey(c)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get the top element of the stack. If the stack is empty, set a dummy value of '#'</span></span><br><span class="line">        <span class="keyword">char</span> topElement = stack.empty() ? <span class="string">'#'</span> : stack.pop();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the mapping for this bracket doesn't match the stack's top element, return false.</span></span><br><span class="line">        <span class="keyword">if</span> (topElement != <span class="keyword">this</span>.mappings.get(c)) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// If it was an opening bracket, push to the stack.</span></span><br><span class="line">        stack.push(c);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the stack still contains elements, then it is an invalid expression.</span></span><br><span class="line">    <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;19-Remove-Nth-Node-From-End-of-List&quot;&gt;&lt;a href=&quot;#19-Remove-Nth-Node-From-End-of-List&quot; class=&quot;headerlink&quot; title=&quot;19. Remove Nth Node From End of List&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/&quot;&gt;19. Remove Nth Node From End of List&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Given a linked list, remove the n-th node from the end of list and return its head.&lt;/p&gt;
    
    </summary>
    
    
      <category term="algorithm" scheme="https://removeif.github.io/categories/algorithm/"/>
    
    
      <category term="链表" scheme="https://removeif.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="栈" scheme="https://removeif.github.io/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>springboot优雅的停止服务</title>
    <link href="https://removeif.github.io/java/frame/springboot%E4%BC%98%E9%9B%85%E7%9A%84%E5%81%9C%E6%AD%A2%E6%9C%8D%E5%8A%A1.html"/>
    <id>https://removeif.github.io/java/frame/springboot%E4%BC%98%E9%9B%85%E7%9A%84%E5%81%9C%E6%AD%A2%E6%9C%8D%E5%8A%A1.html</id>
    <published>2020-01-12T13:08:28.000Z</published>
    <updated>2020-02-02T02:00:25.580Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 SpringBoot 的时候，都要涉及到服务的停止和启动，当我们停止服务的时候，很多时候大家都是kill -9 直接把程序进程杀掉，这样程序不会执行优雅的关闭。而且一些没有执行完的程序就会直接退出。</p><a id="more"></a><p>我们很多时候都需要安全的将服务停止，也就是把没有处理完的工作继续处理完成。比如停止一些依赖的服务，输出一些日志，发一些信号给其他的应用系统，这个在保证系统的高可用是非常有必要的。那么咱么就来看一下几种停止 SpringBoot 的方法。</p><h4 id="Springboot提供的actuator"><a href="#Springboot提供的actuator" class="headerlink" title="Springboot提供的actuator"></a>Springboot提供的actuator</h4><p>第一种就是Springboot提供的actuator的功能，它可以执行shutdown, health, info等，默认情况下，actuator的shutdown是disable的，我们需要打开它。首先引入acturator的maven依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后将shutdown节点打开，也将/actuator/shutdown暴露web访问也设置上，除了shutdown之外还有health, info的web访问都打开的话将management.endpoints.web.exposure.include=*就可以。将如下配置设置到application.properties里边。设置一下服务的端口号为3333。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">server.port=3333</span></span><br><span class="line"><span class="string">management.endpoint.shutdown.enabled=true</span></span><br><span class="line"><span class="string">management.endpoints.web.exposure.include=shutdown</span></span><br></pre></td></tr></table></figure><p>接下来，咱们创建一个springboot工程，然后设置一个bean对象，配置上PreDestroy方法。这样在停止的时候会打印语句。bean的整个生命周期分为创建、初始化、销毁，当最后关闭的时候会执行销毁操作。在销毁的方法中执行一条输出日志。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hqs.springboot.shutdowndemo.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PreDestroy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> huangqingshi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019-08-17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TerminateBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"TerminalBean is destroyed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>做一个configuration，然后提供一个获取bean的方法，这样该bean对象会被初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hqs.springboot.shutdowndemo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hqs.springboot.shutdowndemo.bean.TerminateBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> huangqingshi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019-08-17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShutDownConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TerminateBean <span class="title">getTerminateBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TerminateBean();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在启动类里边输出一个启动日志，当工程启动的时候，会看到启动的输出，接下来咱们执行停止命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://localhost:3333/actuator/shutdown</span><br></pre></td></tr></table></figure><p>以下日志可以输出启动时的日志打印和停止时的日志打印，同时程序已经停止。是不是比较神奇。</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200112205153.png" alt=""></p><h4 id="context-close"><a href="#context-close" class="headerlink" title="context.close"></a>context.close</h4><p>第二种方法也比较简单，获取程序启动时候的context，然后关闭主程序启动时的context。这样程序在关闭的时候也会调用PreDestroy注解。如下方法在程序启动十秒后进行关闭。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* method 2: use ctx.close to shutdown all application context */</span></span><br><span class="line">        ConfigurableApplicationContext ctx = SpringApplication.run(ShutdowndemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx.close();</span><br></pre></td></tr></table></figure><h4 id="springboot启动写入app-pid"><a href="#springboot启动写入app-pid" class="headerlink" title="springboot启动写入app.pid"></a>springboot启动写入app.pid</h4><p>第三种方法，在springboot启动的时候将进程号写入一个app.pid文件，生成的路径是可以指定的，可以通过命令 cat /Users/huangqingshi/app.id | xargs kill 命令直接停止服务，这个时候bean对象的PreDestroy方法也会调用的。这种方法大家使用的比较普遍。写一个start.sh用于启动springboot程序，然后写一个停止程序将服务停止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* method 3 : generate a pid in a specified path, while use command to shutdown pid :</span></span><br><span class="line"><span class="comment">            'cat /Users/huangqingshi/app.pid | xargs kill' */</span></span><br><span class="line">        SpringApplication application = <span class="keyword">new</span> SpringApplication(ShutdowndemoApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        application.addListeners(<span class="keyword">new</span> ApplicationPidFileWriter(<span class="string">"/Users/huangqingshi/app.pid"</span>));</span><br><span class="line">        application.run();</span><br></pre></td></tr></table></figure><h4 id="SpringApplication-exit"><a href="#SpringApplication-exit" class="headerlink" title="SpringApplication.exit()"></a>SpringApplication.exit()</h4><p>第四种方法，通过调用一个SpringApplication.exit(）方法也可以退出程序，同时将生成一个退出码，这个退出码可以传递给所有的context。这个就是一个JVM的钩子，通过调用这个方法的话会把所有PreDestroy的方法执行并停止，并且传递给具体的退出码给所有Context。通过调用System.exit(exitCode)可以将这个错误码也传给JVM。程序执行完后最后会输出：Process finished with exit code 0，给JVM一个SIGNAL。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* method 4: exit this application using static method */</span></span><br><span class="line">        ConfigurableApplicationContext ctx = SpringApplication.run(ShutdowndemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">        <span class="keyword">this</span>.exitApplication(ctx);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exitApplication</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> exitCode = SpringApplication.exit(context, (ExitCodeGenerator) () -&gt; <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        System.exit(exitCode);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200112205759.png" alt=""></p><h4 id="Controller获取程序的context关闭"><a href="#Controller获取程序的context关闭" class="headerlink" title="Controller获取程序的context关闭"></a>Controller获取程序的context关闭</h4><p>第五种方法，自己写一个Controller，然后将自己写好的Controller获取到程序的context，然后调用自己配置的Controller方法退出程序。通过调用自己写的/shutDownContext方法关闭程序：curl -X POST <a href="http://localhost:3333/shutDownContext。">http://localhost:3333/shutDownContext。</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hqs.springboot.shutdowndemo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> huangqingshi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019-08-17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShutDownController</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/shutDownContext"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">shutDownContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext ctx = (ConfigurableApplicationContext) context;</span><br><span class="line">        ctx.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"context is shutdown"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        context = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，springboot的优雅关闭方法也都实现好了，也有同学问，如何暴力停止呢，简单，直接kill -9 相应的PID即可。</p><h4 id="总结一下："><a href="#总结一下：" class="headerlink" title="总结一下："></a>总结一下：</h4><p>以上这几种方法实现的话比较简单，但是真实工作中还需要考虑的点还很多，比如需要保护暴露的点不被别人利用，一般要加一些防火墙，或者只在内网使用，保证程序安全。</p><p>在真实的工作中的时候第三种比较常用，程序中一般使用内存队列或线程池的时候最好要优雅的关机，将内存队列没有处理的保存起来或线程池中没处理完的程序处理完。但是因为停机的时候比较快，所以停服务的时候最好不要处理大量的数据操作，这样会影响程序停止。</p><p>参考文章:<br><a href="https://mp.weixin.qq.com/s/T7L_f4v6kWw8KwYepA4ehw">参考链接1</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用 SpringBoot 的时候，都要涉及到服务的停止和启动，当我们停止服务的时候，很多时候大家都是kill -9 直接把程序进程杀掉，这样程序不会执行优雅的关闭。而且一些没有执行完的程序就会直接退出。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://removeif.github.io/categories/java/"/>
    
      <category term="springboot" scheme="https://removeif.github.io/categories/java/springboot/"/>
    
    
      <category term="springboot" scheme="https://removeif.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>算法成长之路leetcode17-18</title>
    <link href="https://removeif.github.io/algorithm/%E7%AE%97%E6%B3%95%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AFleetcode17-18.html"/>
    <id>https://removeif.github.io/algorithm/%E7%AE%97%E6%B3%95%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AFleetcode17-18.html</id>
    <published>2020-01-08T13:55:24.000Z</published>
    <updated>2020-02-02T02:00:25.564Z</updated>
    
    <content type="html"><![CDATA[<h4 id="17-Letter-Combinations-of-a-Phone-Number"><a href="#17-Letter-Combinations-of-a-Phone-Number" class="headerlink" title="17. Letter Combinations of a Phone Number"></a><a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/">17. Letter Combinations of a Phone Number</a></h4><p>Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.</p><a id="more"></a><p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p><h5 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Input: &quot;23&quot;</span><br><span class="line">Output: [&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;].</span><br><span class="line">Note:</span><br><span class="line"></span><br><span class="line">Although the above answer is in lexicographical order, your answer could be in any order you want.</span><br></pre></td></tr></table></figure><h5 id="JAVA题解"><a href="#JAVA题解" class="headerlink" title="JAVA题解"></a>JAVA题解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> 示例:</span></span><br><span class="line"><span class="comment"> 输入："23"</span></span><br><span class="line"><span class="comment"> 输出：["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leetcode17</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">letterCombinations</span><span class="params">(String digits)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        String[] indexToStr = <span class="keyword">new</span> String[]&#123;<span class="string">""</span>, <span class="string">""</span>, <span class="string">"abc"</span>, <span class="string">"def"</span>, <span class="string">"ghi"</span>, <span class="string">"jkl"</span>, <span class="string">"mno"</span>, <span class="string">"pqrs"</span>, <span class="string">"tuv"</span>, <span class="string">"wxyz"</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span> (digits == <span class="keyword">null</span> || <span class="string">""</span>.equals(digits))</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(digits.length() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">char</span>[] chars = indexToStr[Integer.parseInt(digits)].toCharArray();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">                res.add(<span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">char</span>[]&#123;chars[i]&#125;));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] charArray = digits.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] i0Char = indexToStr[(<span class="keyword">int</span>) charArray[<span class="number">0</span>] - (<span class="keyword">int</span>) (<span class="string">'0'</span>)].toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; charArray.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i1 = <span class="number">0</span>; i1 &lt; i0Char.length; i1++) &#123;</span><br><span class="line">                <span class="keyword">char</span>[] chars1 = indexToStr[(<span class="keyword">int</span>) charArray[i] - (<span class="keyword">int</span>) (<span class="string">'0'</span>)].toCharArray();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i2 = <span class="number">0</span>; i2 &lt; chars1.length; i2++) &#123;</span><br><span class="line">                    res.add(<span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">char</span>[]&#123;i0Char[i1], chars1[i2]&#125;));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, String&gt; phone = <span class="keyword">new</span> HashMap&lt;String, String&gt;() &#123;&#123;</span><br><span class="line">        put(<span class="string">"2"</span>, <span class="string">"abc"</span>);</span><br><span class="line">        put(<span class="string">"3"</span>, <span class="string">"def"</span>);</span><br><span class="line">        put(<span class="string">"4"</span>, <span class="string">"ghi"</span>);</span><br><span class="line">        put(<span class="string">"5"</span>, <span class="string">"jkl"</span>);</span><br><span class="line">        put(<span class="string">"6"</span>, <span class="string">"mno"</span>);</span><br><span class="line">        put(<span class="string">"7"</span>, <span class="string">"pqrs"</span>);</span><br><span class="line">        put(<span class="string">"8"</span>, <span class="string">"tuv"</span>);</span><br><span class="line">        put(<span class="string">"9"</span>, <span class="string">"wxyz"</span>);</span><br><span class="line">    &#125;&#125;;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; output = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(String combination, String next_digits)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// if there is no more digits to check</span></span><br><span class="line">        <span class="keyword">if</span> (next_digits.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// the combination is done</span></span><br><span class="line">            output.add(combination);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// if there are still digits to check</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// iterate over all letters which map</span></span><br><span class="line">            <span class="comment">// the next available digit</span></span><br><span class="line">            String digit = next_digits.substring(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            String letters = phone.get(digit);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; letters.length(); i++) &#123;</span><br><span class="line">                String letter = phone.get(digit).substring(i, i + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">// append the current letter to the combination</span></span><br><span class="line">                <span class="comment">// and proceed to the next digits</span></span><br><span class="line">                backtrack(combination + letter, next_digits.substring(<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法：回溯</span></span><br><span class="line"><span class="comment">     * 回溯是一种通过穷举所有可能情况来找到所有解的算法。如果一个候选解最后被发现并不是可行解，回溯算法会舍弃它，并在前面的一些步骤做出一些修改，并重新尝试找到可行解。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 给出如下回溯函数 backtrack(combination, next_digits) ，它将一个目前已经产生的组合 combination 和接下来准备要输入的数字 next_digits 作为参数。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 如果没有更多的数字需要被输入，那意味着当前的组合已经产生好了。</span></span><br><span class="line"><span class="comment">     * 如果还有数字需要被输入：</span></span><br><span class="line"><span class="comment">     * 遍历下一个数字所对应的所有映射的字母。</span></span><br><span class="line"><span class="comment">     * 将当前的字母添加到组合最后，也就是 combination = combination + letter 。</span></span><br><span class="line"><span class="comment">     * 重复这个过程，输入剩下的数字： backtrack(combination + letter, next_digits[1:]) 。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 有动画图解</span></span><br><span class="line"><span class="comment">     * 作者：LeetCode</span></span><br><span class="line"><span class="comment">     * 链接：https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/solution/dian-hua-hao-ma-de-zi-mu-zu-he-by-leetcode/</span></span><br><span class="line"><span class="comment">     * 来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment">     * 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> digits</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">letterCombinations1</span><span class="params">(String digits)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (digits.length() != <span class="number">0</span>)</span><br><span class="line">            backtrack(<span class="string">""</span>, digits);</span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(letterCombinations(<span class="string">"3"</span>));</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Leetcode17().letterCombinations1(<span class="string">"234"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="18-4Sum"><a href="#18-4Sum" class="headerlink" title="18. 4Sum"></a><a href="https://leetcode-cn.com/problems/4sum/">18. 4Sum</a></h4><p>Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.</p><p>Note:</p><p>The solution set must not contain duplicate quadruplets.</p><h5 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Given array nums &#x3D; [1, 0, -1, 0, -2, 2], and target &#x3D; 0.</span><br><span class="line"></span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [-1,  0, 0, 1],</span><br><span class="line">  [-2, -1, 1, 2],</span><br><span class="line">  [-2,  0, 0, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="JAVA题解-1"><a href="#JAVA题解-1" class="headerlink" title="JAVA题解"></a>JAVA题解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，</span></span><br><span class="line"><span class="comment"> * 使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 注意：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 答案中不可以包含重复的四元组。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 示例：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 满足要求的四元组集合为：</span></span><br><span class="line"><span class="comment"> * [</span></span><br><span class="line"><span class="comment"> *   [-1,  0, 0, 1],</span></span><br><span class="line"><span class="comment"> *   [-2, -1, 1, 2],</span></span><br><span class="line"><span class="comment"> *   [-2,  0, 0, 2]</span></span><br><span class="line"><span class="comment"> * ]</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment"> * 链接：https://leetcode-cn.com/problems/4sum</span></span><br><span class="line"><span class="comment"> * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leetcode18</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 思路：</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  四数之和与前面三数之和的思路几乎是一样的，嗝。（刚好前些天才写了三数之和的题解）</span></span><br><span class="line"><span class="comment">     *  如果前面的三数之和会做了的话，这里其实就是在前面的基础上多添加一个遍历的指针而已。</span></span><br><span class="line"><span class="comment">     *  会做三数之和的可以不用看下面的了。。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  使用四个指针(a&lt;b&lt;c&lt;d)。固定最小的a和b在左边，c=b+1,d=_size-1 移动两个指针包夹求解。</span></span><br><span class="line"><span class="comment">     *  保存使得nums[a]+nums[b]+nums[c]+nums[d]==target的解。偏大时d左移，偏小时c右移。c和d相</span></span><br><span class="line"><span class="comment">     *  遇时，表示以当前的a和b为最小值的解已经全部求得。b++,进入下一轮循环b循环，当b循环结束后。</span></span><br><span class="line"><span class="comment">     *  a++，进入下一轮a循环。 即(a在最外层循环，里面嵌套b循环，再嵌套双指针c,d包夹求解)。</span></span><br><span class="line"><span class="comment">     * 准备工作：</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  因为要使用双指针的方法，排序是必须要做der~。 时间复杂度O(NlogN).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 作者：misakasagiri-2</span></span><br><span class="line"><span class="comment">     * 链接：https://leetcode-cn.com/problems/4sum/solution/shuang-zhi-zhen-jie-fa-can-zhao-san-shu-zhi-he-ge-/</span></span><br><span class="line"><span class="comment">     * 来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment">     * 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; fourSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="comment">/*定义一个返回值*/</span></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">/*当数组为null或元素小于4个时，直接返回*/</span></span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*对数组进行从小到大排序*/</span></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        System.out.println(<span class="string">"-4,-1,-1,0,1,2"</span>);</span><br><span class="line">        <span class="comment">/*数组长度*/</span></span><br><span class="line">        <span class="keyword">int</span> length = nums.length;</span><br><span class="line">        <span class="comment">/*定义4个指针k，i，j，h  k从0开始遍历，i从k+1开始遍历，留下j和h，j指向i+1，h指向数组最大值*/</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; length - <span class="number">3</span>; k++) &#123;</span><br><span class="line">            <span class="comment">/*当k的值与前面的值相等时忽略*/</span></span><br><span class="line">            <span class="keyword">if</span> (k &gt; <span class="number">0</span> &amp;&amp; nums[k] == nums[k - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*获取当前最小值，如果最小值比目标值大，说明后面越来越大的值根本没戏*/</span></span><br><span class="line">            <span class="keyword">int</span> min1 = nums[k] + nums[k + <span class="number">1</span>] + nums[k + <span class="number">2</span>] + nums[k + <span class="number">3</span>];</span><br><span class="line">            <span class="keyword">if</span> (min1 &gt; target) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*获取当前最大值，如果最大值比目标值小，说明后面越来越小的值根本没戏，忽略*/</span></span><br><span class="line">            <span class="keyword">int</span> max1 = nums[k] + nums[length - <span class="number">1</span>] + nums[length - <span class="number">2</span>] + nums[length - <span class="number">3</span>];</span><br><span class="line">            <span class="keyword">if</span> (max1 &lt; target) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*第二层循环i，初始值指向k+1*/</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = k + <span class="number">1</span>; i &lt; length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">                <span class="comment">/*当i的值与前面的值相等时忽略*/</span></span><br><span class="line">                <span class="keyword">if</span> (i &gt; k + <span class="number">1</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/*定义指针j指向i+1*/</span></span><br><span class="line">                <span class="keyword">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">                <span class="comment">/*定义指针h指向数组末尾*/</span></span><br><span class="line">                <span class="keyword">int</span> h = length - <span class="number">1</span>;</span><br><span class="line">                <span class="comment">/*获取当前最小值，如果最小值比目标值大，说明后面越来越大的值根本没戏，忽略*/</span></span><br><span class="line">                <span class="keyword">int</span> min = nums[k] + nums[i] + nums[j] + nums[j + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (min &gt; target) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"m,k="</span>+k+<span class="string">",i="</span>+i+<span class="string">",j="</span>+j+<span class="string">",j+1="</span>+(j+<span class="number">1</span>));</span><br><span class="line">                    <span class="keyword">break</span>; <span class="comment">// 此时直接滑动k,因为不管怎么滑动i,min 都会大于target</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/*获取当前最大值，如果最大值比目标值小，说明后面越来越小的值根本没戏，忽略*/</span></span><br><span class="line">                <span class="keyword">int</span> max = nums[k] + nums[i] + nums[h] + nums[h - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (max &lt; target) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"ma,k="</span>+k+<span class="string">",i="</span>+i+<span class="string">",j="</span>+j+<span class="string">",j+1="</span>+(j+<span class="number">1</span>));</span><br><span class="line">                    <span class="keyword">continue</span>; <span class="comment">// 此时continue滑动i 值，nums[i] + nums[h] + nums[h - 1] 变大 ，整个max 会变大</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * -4,-1,-1,0,1,2</span></span><br><span class="line"><span class="comment">                 * ma,k=0,i=1,j=2,j+1=3</span></span><br><span class="line"><span class="comment">                 * m,k=1,i=3,j=4,j+1=5</span></span><br><span class="line"><span class="comment">                 * [[-4, 0, 1, 2], [-1, -1, 0, 1]]</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 * -4,-1,-1,0,1,2</span></span><br><span class="line"><span class="comment">                 * ma,k=0,i=1,j=2,j+1=3</span></span><br><span class="line"><span class="comment">                 * m,k=1,i=3,j=4,j+1=5</span></span><br><span class="line"><span class="comment">                 * [[-1, -1, 0, 1]]</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">/*开始j指针和h指针的表演，计算当前和，如果等于目标值，j++并去重，h--并去重，当当前和大于目标值时h--，当当前和小于目标值时j++*/</span></span><br><span class="line">                <span class="keyword">while</span> (j &lt; h) &#123;</span><br><span class="line">                    <span class="keyword">int</span> curr = nums[k] + nums[i] + nums[j] + nums[h];</span><br><span class="line">                    <span class="keyword">if</span> (curr == target) &#123;</span><br><span class="line">                        result.add(Arrays.asList(nums[k], nums[i], nums[j], nums[h]));</span><br><span class="line">                        j++;</span><br><span class="line">                        <span class="keyword">while</span> (j &lt; h &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                            j++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        h--;</span><br><span class="line">                        <span class="keyword">while</span> (j &lt; h &amp;&amp; i &lt; h &amp;&amp; nums[h] == nums[h + <span class="number">1</span>]) &#123;</span><br><span class="line">                            h--;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (curr &gt; target) &#123;</span><br><span class="line">                        h--;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        j++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    作者：you-wei-wu</span></span><br><span class="line"><span class="comment">    链接：https://leetcode-cn.com/problems/4sum/solution/ji-bai-9994de-yong-hu-you-dai-ma-you-zhu-shi-by-yo/</span></span><br><span class="line"><span class="comment">    来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment">    著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Leetcode18().fourSum(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">4</span>&#125;,-<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;17-Letter-Combinations-of-a-Phone-Number&quot;&gt;&lt;a href=&quot;#17-Letter-Combinations-of-a-Phone-Number&quot; class=&quot;headerlink&quot; title=&quot;17. Letter Combinations of a Phone Number&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/&quot;&gt;17. Letter Combinations of a Phone Number&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.&lt;/p&gt;
    
    </summary>
    
    
      <category term="algorithm" scheme="https://removeif.github.io/categories/algorithm/"/>
    
    
      <category term="双指针" scheme="https://removeif.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
      <category term="递归回溯" scheme="https://removeif.github.io/tags/%E9%80%92%E5%BD%92%E5%9B%9E%E6%BA%AF/"/>
    
  </entry>
  
  <entry>
    <title>springboot-restful-swagger实战</title>
    <link href="https://removeif.github.io/java/frame/springboot-restful-swagger%E5%AE%9E%E6%88%98.html"/>
    <id>https://removeif.github.io/java/frame/springboot-restful-swagger%E5%AE%9E%E6%88%98.html</id>
    <published>2020-01-04T10:11:19.000Z</published>
    <updated>2020-02-02T02:00:25.580Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、目标"><a href="#一、目标" class="headerlink" title="一、目标"></a>一、目标</h3><ol><li>了解 Restful 是什么，基本概念及风格；</li><li>能使用SpringBoot 实现一套基础的 Restful 风格接口；</li><li>利用Swagger 生成清晰的接口文档。</li></ol><a id="more"></a><h3 id="二、Restful-入门"><a href="#二、Restful-入门" class="headerlink" title="二、Restful 入门"></a>二、Restful 入门</h3><p><strong>什么是REST</strong> </p><p>摘自百科的定义：REST即表述性状态转移(英文：Representational State Transfer，简称REST) 是Roy Fielding博士(HTTP规范主要贡献者)在2000年的论文中提出来的一种软件架构风格。 是一种针对网络应用的设计和开发方式，可以降低开发的复杂性，提高系统的可伸缩性。</p><p>通俗点说，REST就是一组架构约束准则；在这些准则中，有不少是利用了现有的WEB标准能力。 而最终的目的则是简化当前业务层的设计及开发工作。</p><p>Restful API 则是指符合REST架构约束的API，关于这个词在早年前其实已经非常流行，但大多数开发者对其仍然 处于观望状态，并不一定会立即采用。这个相信与当时技术社区的成熟度及氛围是密切相关。 无论如何，在微服务架构如此流行的今天，Restful API已经成为了一种必备的的<strong>标准设计风格</strong>。</p><p><strong>关键要点</strong></p><p>理解 Restful 风格需要理解以下几点：</p><ul><li>资源</li></ul><p>资源指的就是一个抽象的信息实体，可以是一个用户、一首歌曲、一篇文章，只要是可作为引用的对象就是资源。 每个资源通常会被映射到一个URI，通过访问这个URI可以获取到信息。</p><ul><li>资源的表述</li></ul><p>资源表述(Representation)指的则是资源的外在表现形式 比如一个帖子，可以通过HTML格式展现，也可以通过XML、JSON等格式输出到客户端。</p><p>在前面的文章(SpringBoot-Scope详解)中提到，HTTP协议通过MIME来统一定义数据信息的格式标准。 通常，<strong>Accept</strong>、<strong>Content-Type</strong>可以用来指定客户端及服务端可接受的信息格式，而这个就是资源的表述</p><ul><li>状态转移</li></ul><p>在HTTP访问过程中，资源的状态发生变化。这里会涉及到以下的几个动词：</p><table><thead><tr><th align="left">名称</th><th align="left">语义</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">获取资源</td></tr><tr><td align="left">POST</td><td align="left">新建资源</td></tr><tr><td align="left">PUT</td><td align="left">更新资源</td></tr><tr><td align="left">DELETE</td><td align="left">删除资源</td></tr></tbody></table><p>对于不同的访问方法，服务器会产生对应的行为并促使资源状态产生转换。</p><p><strong>关于无状态</strong></p><p>Restful 是无状态的设计，这点意味着交互过程中的请求应该能包含所有需要的信息，而不需要依赖于已有的上下文。 然而 JavaEE中存在一些违背的做法，比如Cookie中设置JSESSIONID， 在多次请求间传递该值作为会话唯一标识，这标识着服务端必须保存着这些会话状态数据。</p><p>PlayFramework框架实现了<strong>无状态的Session，其将会话数据经过加密编码并置入Cookie中， 这样客户端的请求将直接携带上全部的信息，是无状态的请求</strong>，这点非常有利于服务端的可扩展性。</p><h3 id="三、SpringBoot-实现-Restful"><a href="#三、SpringBoot-实现-Restful" class="headerlink" title="三、SpringBoot 实现 Restful"></a>三、SpringBoot 实现 Restful</h3><p>接下来，我们利用 SpringBoot 来实现一个Restful 风格的样例。</p><p><strong>说明</strong>基于 PetStore(宠物店) 的案例，实现对某顾客(Customer)名下的宠物(Pet)的增删改查。</p><h4 id="1-实体定义"><a href="#1-实体定义" class="headerlink" title="1. 实体定义"></a>1. 实体定义</h4><p><strong>Customer</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Customer 只包含一个name属性，我们假定这是唯一的标志。</p><p><strong>Pet</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String petId;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Pet 包含了以下几个属性</p><table><thead><tr><th align="left">属性名</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">petId</td><td align="left">宠物ID编号</td></tr><tr><td align="left">name</td><td align="left">宠物名称</td></tr><tr><td align="left">type</td><td align="left">宠物类型</td></tr><tr><td align="left">description</td><td align="left"></td></tr></tbody></table><h4 id="2-URL资源"><a href="#2-URL资源" class="headerlink" title="2. URL资源"></a>2. URL资源</h4><p>基于Restful 的原则，我们定义了以下的一组URL：</p><table><thead><tr><th align="left">接口</th><th align="left">方法</th><th align="left">URL</th></tr></thead><tbody><tr><td align="left">添加宠物</td><td align="left">POST</td><td align="left">/rest/pets/{customer}</td></tr><tr><td align="left">获取宠物列表</td><td align="left">GET</td><td align="left">/rest/pets/{customer}</td></tr><tr><td align="left">获取宠物信息</td><td align="left">GET</td><td align="left">/rest/pets/{customer}/{petId}</td></tr><tr><td align="left">更新宠物信息</td><td align="left">PUT</td><td align="left">/rest/pets/{customer}/{petId}</td></tr><tr><td align="left">删除宠物</td><td align="left">DELETE</td><td align="left">/rest/pets/{customer}/{petId}</td></tr></tbody></table><h4 id="3-数据管理"><a href="#3-数据管理" class="headerlink" title="3. 数据管理"></a>3. 数据管理</h4><p>接下来实现一个PetManager 类，用于模拟在内存中对Pet数据进行增删改查 代码如下：</p><figure class="highlight java"><figcaption><span>PetManager.java >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PetManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Customer&gt; customers = <span class="keyword">new</span> ConcurrentHashMap&lt;String, Customer&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Map&lt;String, Pet&gt;&gt; pets = <span class="keyword">new</span> ConcurrentHashMap&lt;String, Map&lt;String, Pet&gt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 启动时初始化，执行一次</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] customerNames = <span class="keyword">new</span> String[]&#123;<span class="string">"Lilei"</span>, <span class="string">"Hanmeimei"</span>, <span class="string">"Jim Green"</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (String customerName : customerNames) &#123;</span><br><span class="line">            customers.put(customerName, <span class="keyword">new</span> Customer(customerName));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取customer</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">getCustomer</span><span class="params">(String customer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(customer)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> customers.get(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取customer名下的 pet 列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Pet&gt; <span class="title">getPets</span><span class="params">(String customer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(customer)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!pets.containsKey(customer)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pets.get(customer).values().stream().collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取某个pet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> petId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pet <span class="title">getPet</span><span class="params">(String customer, String petId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(customer) || StringUtils.isEmpty(petId)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!pets.containsKey(customer)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pets.get(customer).get(petId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除pet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> petId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removePet</span><span class="params">(String customer, String petId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(customer) || StringUtils.isEmpty(petId)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!pets.containsKey(customer)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pets.get(customer).remove(petId) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加pet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pet <span class="title">addPet</span><span class="params">(String customer, Pet pet)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(customer) || pet == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, Pet&gt; customerPets = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (!pets.containsKey(customer)) &#123;</span><br><span class="line">            customerPets = <span class="keyword">new</span> LinkedHashMap&lt;String, Pet&gt;();</span><br><span class="line">            Map&lt;String, Pet&gt; previous = pets.putIfAbsent(customer, customerPets);</span><br><span class="line">            <span class="comment">// 已经存在</span></span><br><span class="line">            <span class="keyword">if</span> (previous != <span class="keyword">null</span>) &#123;</span><br><span class="line">                customerPets = previous;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            customerPets = pets.get(customer);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pet.getPetId() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            pet.setPetId(UUID.randomUUID().toString());</span><br><span class="line">        &#125;</span><br><span class="line">        customerPets.put(pet.getPetId(), pet);</span><br><span class="line">        <span class="keyword">return</span> pet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新某个pet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> petPojo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pet <span class="title">updatePet</span><span class="params">(String customer, Pet petPojo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(customer) || petPojo == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (petPojo.getPetId() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Pet pet = getPet(customer, petPojo.getPetId());</span><br><span class="line">        pet.setType(petPojo.getType());</span><br><span class="line">        pet.setName(petPojo.getName());</span><br><span class="line">        pet.setDescription(petPojo.getDescription());</span><br><span class="line">        <span class="keyword">return</span> pet;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-控制层实现"><a href="#4-控制层实现" class="headerlink" title="4. 控制层实现"></a>4. 控制层实现</h4><p>SpringBoot 提供了 <strong>@RestController</strong>，用于快速定义一个Restful 风格的Controller类<strong>@RestController=@ResponseBody + @Controller</strong></p><figure class="highlight java"><figcaption><span>RestApiController.java >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/rest/pets/&#123;customer&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestApiController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PetManager dataManager;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加宠物</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Object&gt; <span class="title">addPet</span><span class="params">(@PathVariable String customer, @RequestBody Pet pet)</span> </span>&#123;</span><br><span class="line">        validateCustomer(customer);</span><br><span class="line">        Pet newPet = dataManager.addPet(customer, pet);</span><br><span class="line"><span class="comment">// 返回 201.created</span></span><br><span class="line">        <span class="keyword">if</span> (newPet != <span class="keyword">null</span>) &#123;</span><br><span class="line">            URI location = ServletUriComponentsBuilder.fromCurrentRequest().path(<span class="string">"/&#123;petId&#125;"</span>)</span><br><span class="line">                    .buildAndExpand(newPet.getPetId()).toUri();</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.created(location).build();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 返回 204.noContent</span></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.noContent().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取宠物列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Pet&gt; <span class="title">listPets</span><span class="params">(@PathVariable String customer)</span> </span>&#123;</span><br><span class="line">        validateCustomer(customer);</span><br><span class="line">        List&lt;Pet&gt; pets = dataManager.getPets(customer);</span><br><span class="line">        <span class="keyword">return</span> pets;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取某个宠物</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> petId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;petId&#125;"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pet <span class="title">getPet</span><span class="params">(@PathVariable String customer, @PathVariable String petId)</span> </span>&#123;</span><br><span class="line">        validateCustomer(customer);</span><br><span class="line">        validatePet(customer, petId);</span><br><span class="line">        Pet pet = dataManager.getPet(customer, petId);</span><br><span class="line">        <span class="keyword">return</span> pet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新宠物信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> petId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/&#123;petId&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Object&gt; <span class="title">updatePet</span><span class="params">(@PathVariable String customer, @PathVariable String petId, @RequestBody Pet pet)</span> </span>&#123;</span><br><span class="line">        validateCustomer(customer);</span><br><span class="line">        validatePet(customer, petId);</span><br><span class="line">        pet.setPetId(petId);</span><br><span class="line">        Pet petObject = dataManager.updatePet(customer, pet);</span><br><span class="line">        <span class="keyword">if</span> (petObject != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.ok(petObject);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.noContent().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除某个宠物</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> petId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/&#123;petId&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Object&gt; <span class="title">removePet</span><span class="params">(@PathVariable String customer, @PathVariable String petId)</span> </span>&#123;</span><br><span class="line">        validateCustomer(customer);</span><br><span class="line">        validatePet(customer, petId);</span><br><span class="line">        dataManager.removePet(customer, petId);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok().build();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上述代码中已经实现了完整的增删改查语义。 在Restful 风格的API 接口定义中，往往会引用 HTTP 状态码用于表示不同的结果，比如一些错误的状态类型。</p><p>这里我们对Customer、Pet 进行存在性校验，若资源不存在返回404_NotFound。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验customer是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">validateCustomer</span><span class="params">(String customer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dataManager.getCustomer(customer) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ObjectNotFoundException(String.format(<span class="string">"the customer['%s'] is not found"</span>, customer));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验pet是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">validatePet</span><span class="params">(String customer, String petId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dataManager.getPet(customer, petId) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ObjectNotFoundException(String.format(<span class="string">"the pet['%s/%s'] is not found"</span>, customer, petId));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>自定义异常拦截</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ⾃定义异常，及拦截逻辑</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> atp</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectNotFoundException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ObjectNotFoundException</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(ObjectNotFoundException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseStatus</span>(<span class="title">HttpStatus</span>.<span class="title">NOT_FOUND</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">objectNotFoundExceptionHandler</span>(<span class="title">ObjectNotFoundException</span> <span class="title">ex</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ex.getMessage();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="5-接口请求示例"><a href="#5-接口请求示例" class="headerlink" title="5.接口请求示例"></a>5.接口请求示例</h4><h5 id="1-添加宠物"><a href="#1-添加宠物" class="headerlink" title="1. 添加宠物"></a>1. 添加宠物</h5><p><strong>URL</strong> POST http:///rest/pets/LiLei</p><p><strong>请求内容</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"Smart Baby"</span>,</span><br><span class="line"><span class="attr">"description"</span>: <span class="string">"very small and smart also."</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"Dog"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-获取宠物列表"><a href="#2-获取宠物列表" class="headerlink" title="2. 获取宠物列表"></a>2. 获取宠物列表</h5><p>*<em>URL *</em>GET http:///rest/pets/LiLei</p><p><strong>返回</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line"><span class="attr">"petId"</span>: <span class="string">"b5400334-e7b3-42f1-b192-f5e7c3193543"</span>,</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"Smart Baby"</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"Dog"</span>,</span><br><span class="line"><span class="attr">"description"</span>: <span class="string">"very small and smart also."</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="attr">"petId"</span>: <span class="string">"610780af-94f1-4011-a175-7a0f3895163d"</span>,</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"Big Cat"</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"Cat"</span>,</span><br><span class="line"><span class="attr">"description"</span>: <span class="string">"very old but I like it."</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><h5 id="3-查询宠物信息"><a href="#3-查询宠物信息" class="headerlink" title="3. 查询宠物信息"></a>3. 查询宠物信息</h5><p><strong>URL</strong> GET http:///rest/pets/LiLei/b5400334-e7b3-42f1-b192-f5e7c3193543</p><p><strong>返回</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"petId"</span>: <span class="string">"b5400334-e7b3-42f1-b192-f5e7c3193543"</span>,</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"Smart Baby"</span>,</span><br><span class="line"><span class="string">"type"</span>: <span class="string">"Dog"</span>,</span><br><span class="line"><span class="string">"description"</span>: <span class="string">"very small and smart also."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-更新宠物信息"><a href="#4-更新宠物信息" class="headerlink" title="4. 更新宠物信息"></a>4. 更新宠物信息</h5><p><strong>URL ** PUT http:///rest/pets/LiLei/b5400334-e7b3-42f1-b192-f5e7c3193543 **请求内容</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"Big Cat V2"</span>,</span><br><span class="line"><span class="attr">"description"</span>: <span class="string">"I don't like it any more"</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"Cat"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>返回</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"petId"</span>: <span class="string">"a98e4478-e754-4969-851b-bcaccd67263e"</span>,</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"Big Cat V2"</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"Cat"</span>,</span><br><span class="line"><span class="attr">"description"</span>: <span class="string">"I don't like it any more"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-删除宠物"><a href="#5-删除宠物" class="headerlink" title="5. 删除宠物"></a>5. 删除宠物</h5><p>*<em>URL *</em>DELETE http:///rest/pets/LiLei/b5400334-e7b3-42f1-b192-f5e7c3193543 </p><p>相关出错</p><ul><li>客户不存在：404 the customer[‘test’] is not found</li><li>宠物不存在：404 the pet[‘LiLei/b5400334-e7b3-42f1-b192-f5e7c31935431’] is not found</li></ul><h3 id="四、Swagger-的使用"><a href="#四、Swagger-的使用" class="headerlink" title="四、Swagger 的使用"></a>四、Swagger 的使用</h3><p><strong>关于Swagger</strong></p><p>Swagger是目前非常流行的一个API设计开发框架(基于OpenApi)， 可用于API的设计、管理、代码生成以及Mock测试等。</p><p>目前Swagger的应用非常广，其涵盖的开源模块也比较多，这里将使用<strong>swagger-ui</strong>实现API在线DOC的生成。</p><p><strong>引入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>定义API配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String VERSION = <span class="string">"1.0.0"</span>;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;swagger.enable&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> enabled;</span><br><span class="line"></span><br><span class="line">    <span class="function">ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder().</span><br><span class="line">                title(<span class="string">"Pet Api Definition"</span>)</span><br><span class="line">                .description(<span class="string">"The Petstore CRUD Example"</span>)</span><br><span class="line">                .license(<span class="string">"Apache 2.0"</span>)</span><br><span class="line">                .licenseUrl(<span class="string">"http://www.apache.org/licenses/LICENSE-2.0.html"</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">""</span>)</span><br><span class="line">                .version(VERSION)</span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"zalesfoo@163.com"</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">customImplementation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).select()</span><br><span class="line">                .apis(RequestHandlerSelectors.withClassAnnotation(Api<span class="class">.<span class="keyword">class</span>))</span></span><br><span class="line"><span class="class">                .<span class="title">build</span>()</span></span><br><span class="line"><span class="class">                .<span class="title">enable</span>(<span class="title">enabled</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">apiInfo</span>(<span class="title">apiInfo</span>())</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@EnableSwagger2</code>声明了Swagger的启用，Docket的Bean定义是API配置的入口， 可以设置API名称、版本号，扫描范围等。</p><p><strong>声明API描述</strong></p><p>在原有的Controller 方法上添加关于API的声明，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api</span>(value = <span class="string">"Pet Restful api"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/rest/pets/&#123;customer&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestApiController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"添加宠物"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(paramType = <span class="string">"path"</span>, name = <span class="string">"customer"</span>, dataType = <span class="string">"String"</span>, required = <span class="keyword">true</span>, value = <span class="string">"客户名"</span>, defa</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(paramType = <span class="string">"body"</span>, name = <span class="string">"pet"</span>, dataType = <span class="string">"Pet"</span>, required = <span class="keyword">true</span>, value = <span class="string">"pet 请求"</span>, defaultVal</span><br><span class="line">            <span class="meta">@ApiResponses</span>(&#123;</span><br><span class="line">                    <span class="meta">@ApiResponse</span>(code = <span class="number">201</span>, message = <span class="string">"添加成功"</span>),</span><br><span class="line">                    <span class="meta">@ApiResponse</span>(code = <span class="number">404</span>, message = <span class="string">"资源不存在"</span>)&#125;)</span><br><span class="line">                    <span class="meta">@PostMapping</span></span><br><span class="line">                    <span class="keyword">public</span> ResponseEntity&lt;Object&gt;addPet(<span class="meta">@PathVariable</span> String customer, <span class="meta">@RequestBody</span> Pet pet)&#123;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了能描述返回对象的文档说明，为Pet类做API声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModel</span>(<span class="string">"宠物信息"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(name = <span class="string">"petId"</span>, value = <span class="string">"宠物ID"</span>)</span><br><span class="line">    <span class="keyword">private</span> String petId;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(name = <span class="string">"name"</span>, value = <span class="string">"宠物名称"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(name = <span class="string">"type"</span>, value = <span class="string">"宠物类型"</span>)</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(name = <span class="string">"description"</span>, value = <span class="string">"宠物描述"</span>)</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>相关的注解</strong></p><table><thead><tr><th align="left">注解</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">@ApiModelProperty</td><td align="left">用在出入参数对象的字段上</td></tr><tr><td align="left">@Api</td><td align="left">用于controller类</td></tr><tr><td align="left">@ApiOperation</td><td align="left">用于controller方法，描述操作</td></tr><tr><td align="left">@ApiResponses</td><td align="left">用于controller方法，描述响应</td></tr><tr><td align="left">@ApiResponse</td><td align="left">用于@ApiResponses内，描述单个响应结果</td></tr><tr><td align="left">@ApiImplicitParams</td><td align="left">用于controller的方法，描述入参</td></tr><tr><td align="left">@ApiImplicitParam</td><td align="left">用于@ApiImplicitParams内，描述单个入参</td></tr><tr><td align="left">@ApiModel</td><td align="left">用于返回对象类</td></tr></tbody></table><p><strong>访问文档</strong></p><p>最后，访问 <a href="http://localhost:8000/swagger_ui.html">http://localhost:8000/swagger_ui.html</a> ,可看到生成的文档界面：</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2020/20200104180649.png" alt=""></p><p>参考文章:<br><a href="https://mp.weixin.qq.com/s/eNsdU-w0zOWYTTUD8RDkJQ">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、目标&quot;&gt;&lt;a href=&quot;#一、目标&quot; class=&quot;headerlink&quot; title=&quot;一、目标&quot;&gt;&lt;/a&gt;一、目标&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;了解 Restful 是什么，基本概念及风格；&lt;/li&gt;
&lt;li&gt;能使用SpringBoot 实现一套基础的 Restful 风格接口；&lt;/li&gt;
&lt;li&gt;利用Swagger 生成清晰的接口文档。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://removeif.github.io/categories/java/"/>
    
      <category term="springboot" scheme="https://removeif.github.io/categories/java/springboot/"/>
    
    
      <category term="springboot" scheme="https://removeif.github.io/tags/springboot/"/>
    
      <category term="swagger" scheme="https://removeif.github.io/tags/swagger/"/>
    
  </entry>
  
  <entry>
    <title>算法成长之路leetcode15-16</title>
    <link href="https://removeif.github.io/algorithm/%E7%AE%97%E6%B3%95%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AFleetcode15-16.html"/>
    <id>https://removeif.github.io/algorithm/%E7%AE%97%E6%B3%95%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AFleetcode15-16.html</id>
    <published>2020-01-01T13:14:27.000Z</published>
    <updated>2020-02-02T02:00:25.564Z</updated>
    
    <content type="html"><![CDATA[<h4 id="15-3Sum"><a href="#15-3Sum" class="headerlink" title="15. 3Sum"></a><a href="https://leetcode-cn.com/problems/3sum/">15. 3Sum</a></h4><p>Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.</p><a id="more"></a><p>Note:</p><p>The solution set must not contain duplicate triplets.</p><h5 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br><span class="line">Given array nums &#x3D; [-1, 0, 1, 2, -1, -4],</span><br><span class="line"></span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [-1, 0, 1],</span><br><span class="line">  [-1, -1, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="JAVA题解"><a href="#JAVA题解" class="headerlink" title="JAVA题解"></a>JAVA题解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，</span></span><br><span class="line"><span class="comment"> * 使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 注意：答案中不可以包含重复的三元组。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 满足要求的三元组集合为：</span></span><br><span class="line"><span class="comment"> * [</span></span><br><span class="line"><span class="comment"> *   [-1, 0, 1],</span></span><br><span class="line"><span class="comment"> *   [-1, -1, 2]</span></span><br><span class="line"><span class="comment"> * ]</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment"> * 链接：https://leetcode-cn.com/problems/3sum</span></span><br><span class="line"><span class="comment"> * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leetcode15</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ❌错解</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Set&lt;String&gt; ids = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; nums.length-<span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = j+<span class="number">1</span>; k &lt; nums.length; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(nums[i]+nums[j]+nums[k] == <span class="number">0</span>)&#123;</span><br><span class="line">                        String i2 = nums[i] + <span class="string">""</span>+nums[j]+nums[k];</span><br><span class="line">                        System.out.println(nums[i]+<span class="string">","</span>+nums[j]+<span class="string">","</span>+nums[k]+<span class="string">"="</span>+i2);</span><br><span class="line">                        <span class="keyword">if</span>(!ids.contains(i2))&#123;</span><br><span class="line">                            ids.add(i2);</span><br><span class="line">                            res.add(Arrays.asList(nums[i],nums[j],nums[k]));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 思路</span></span><br><span class="line"><span class="comment">     * 标签：数组遍历</span></span><br><span class="line"><span class="comment">     * 首先对数组进行排序，排序后固定一个数 nums[i]nums[i]，再使用左右指针指向 nums[i]nums[i]后面的两端，数字分别为 nums[L]nums[L] 和 nums[R]nums[R]，计算三个数的和 sumsum 判断是否满足为 00，满足则添加进结果集</span></span><br><span class="line"><span class="comment">     * 如果 nums[i]nums[i]大于 00，则三数之和必然无法等于 00，结束循环</span></span><br><span class="line"><span class="comment">     * 如果 nums[i]nums[i] == nums[i-1]nums[i−1]，则说明该数字重复，会导致结果重复，所以应该跳过</span></span><br><span class="line"><span class="comment">     * 当 sumsum == 00 时，nums[L]nums[L] == nums[L+1]nums[L+1] 则会导致结果重复，应该跳过，L++L++</span></span><br><span class="line"><span class="comment">     * 当 sumsum == 00 时，nums[R]nums[R] == nums[R-1]nums[R−1] 则会导致结果重复，应该跳过，R--R−−</span></span><br><span class="line"><span class="comment">     * 时间复杂度：O(n^2)，n 为数组长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 作者：guanpengchn</span></span><br><span class="line"><span class="comment">     * 链接：https://leetcode-cn.com/problems/3sum/solution/hua-jie-suan-fa-15-san-shu-zhi-he-by-guanpengchn/</span></span><br><span class="line"><span class="comment">     * 来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment">     * 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; threeSum1(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || len &lt; <span class="number">3</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        Arrays.sort(nums); <span class="comment">// 排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) <span class="keyword">break</span>; <span class="comment">// 如果当前数字大于0，则三数之和一定大于0，所以结束循环</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>; <span class="comment">// 去重</span></span><br><span class="line">            <span class="keyword">int</span> L = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> R = len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (L &lt; R) &#123;</span><br><span class="line">                <span class="keyword">int</span> sum = nums[i] + nums[L] + nums[R];</span><br><span class="line">                <span class="keyword">if</span> (sum == <span class="number">0</span>) &#123;</span><br><span class="line">                    ans.add(Arrays.asList(nums[i], nums[L], nums[R]));</span><br><span class="line">                    <span class="comment">// 此时nums[L] == nums[L + 1] 会重复，继续跳过一个</span></span><br><span class="line">                    <span class="keyword">while</span> (L &lt; R &amp;&amp; nums[L] == nums[L + <span class="number">1</span>]) L++; <span class="comment">// 去重</span></span><br><span class="line">                    <span class="keyword">while</span> (L &lt; R &amp;&amp; nums[R] == nums[R - <span class="number">1</span>]) R--; <span class="comment">// 去重</span></span><br><span class="line">                    L++;</span><br><span class="line">                    R--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) L++;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; <span class="number">0</span>) R--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(threeSum(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">4</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">6</span>&#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="16-3Sum-Closest"><a href="#16-3Sum-Closest" class="headerlink" title="16. 3Sum Closest"></a><a href="https://leetcode-cn.com/problems/3sum-closest/">16. 3Sum Closest</a></h4><p>Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p><h5 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Given array nums &#x3D; [-1, 2, 1, -4], and target &#x3D; 1.</span><br><span class="line"></span><br><span class="line">The sum that is closest to the target is 2. (-1 + 2 + 1 &#x3D; 2).</span><br></pre></td></tr></table></figure><h5 id="JAVA题解-1"><a href="#JAVA题解-1" class="headerlink" title="JAVA题解"></a>JAVA题解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，</span></span><br><span class="line"><span class="comment"> * 使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment"> * 链接：https://leetcode-cn.com/problems/3sum-closest</span></span><br><span class="line"><span class="comment"> * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leetcode16</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 想到的思路，找出所有的组合以及它们的sum，然后排好序二分法查找sum中最接近的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">threeSumClosest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 思路</span></span><br><span class="line"><span class="comment">     * 标签：排序和双指针</span></span><br><span class="line"><span class="comment">     * 本题目因为要计算三个数，如果靠暴力枚举的话时间复杂度会到 O(n^3)，需要降低时间复杂度</span></span><br><span class="line"><span class="comment">     * 首先进行数组排序，时间复杂度 O(nlogn)O(nlogn)</span></span><br><span class="line"><span class="comment">     * 在数组 nums 中，进行遍历，每遍历一个值利用其下标i，形成一个固定值 nums[i]</span></span><br><span class="line"><span class="comment">     * 再使用前指针指向 start = i + 1 处，后指针指向 end = nums.length - 1 处，也就是结尾处</span></span><br><span class="line"><span class="comment">     * 根据 sum = nums[i] + nums[start] + nums[end] 的结果，判断 sum 与目标 target 的距离，如果更近则更新结果 ans</span></span><br><span class="line"><span class="comment">     * 同时判断 sum 与 target 的大小关系，因为数组有序，如果 sum &gt; target 则 end--，如果 sum &lt; target 则 start++，如果 sum == target 则说明距离为 0 直接返回结果</span></span><br><span class="line"><span class="comment">     * 整个遍历过程，固定值为 n 次，双指针为 n 次，时间复杂度为 O(n^2)</span></span><br><span class="line"><span class="comment">     * 总时间复杂度：O(nlogn) + O(n^2) = O(n^2)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 作者：guanpengchn</span></span><br><span class="line"><span class="comment">     * 链接：https://leetcode-cn.com/problems/3sum-closest/solution/hua-jie-suan-fa-16-zui-jie-jin-de-san-shu-zhi-he-b/</span></span><br><span class="line"><span class="comment">     * 来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment">     * 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">threeSumClosest1</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">int</span> ans = nums[<span class="number">0</span>] + nums[<span class="number">1</span>] + nums[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> start = i+<span class="number">1</span>, end = nums.length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(start &lt; end) &#123;</span><br><span class="line">                <span class="keyword">int</span> sum = nums[start] + nums[end] + nums[i];</span><br><span class="line">                <span class="comment">// 结果差值更小时，取更小的</span></span><br><span class="line">                <span class="keyword">if</span>(Math.abs(target - sum) &lt; Math.abs(target - ans))</span><br><span class="line">                    ans = sum;</span><br><span class="line">                <span class="comment">// 结果大于目标，右边的左移</span></span><br><span class="line">                <span class="keyword">if</span>(sum &gt; target)</span><br><span class="line">                    end--;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(sum &lt; target)</span><br><span class="line">                    start++;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="comment">// 相等时直接返回结果</span></span><br><span class="line">                    <span class="keyword">return</span> ans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;15-3Sum&quot;&gt;&lt;a href=&quot;#15-3Sum&quot; class=&quot;headerlink&quot; title=&quot;15. 3Sum&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/3sum/&quot;&gt;15. 3Sum&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.&lt;/p&gt;
    
    </summary>
    
    
      <category term="algorithm" scheme="https://removeif.github.io/categories/algorithm/"/>
    
    
      <category term="双指针" scheme="https://removeif.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>2019年终总结</title>
    <link href="https://removeif.github.io/think/2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93.html"/>
    <id>https://removeif.github.io/think/2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93.html</id>
    <published>2019-12-31T13:05:49.000Z</published>
    <updated>2020-02-02T02:00:25.587Z</updated>
    
    <content type="html"><![CDATA[<p>时间过得太快了，感觉每天时间都不够用，一眨眼一年又过去了！</p><a id="more"></a><p>也没啥特总结的，就几句话：<br>革命尚未成功，还得加倍努力。<br>珍惜时间，珍惜生命，珍惜眼前人。<br>充满正能量的度过往后余生。  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时间过得太快了，感觉每天时间都不够用，一眨眼一年又过去了！&lt;/p&gt;
    
    </summary>
    
    
      <category term="think" scheme="https://removeif.github.io/categories/think/"/>
    
    
      <category term="think" scheme="https://removeif.github.io/tags/think/"/>
    
  </entry>
  
  <entry>
    <title>西安旅游攻略3日游</title>
    <link href="https://removeif.github.io/travel/%E8%A5%BF%E5%AE%89%E6%97%85%E6%B8%B8%E6%94%BB%E7%95%A53%E6%97%A5%E6%B8%B8.html"/>
    <id>https://removeif.github.io/travel/%E8%A5%BF%E5%AE%89%E6%97%85%E6%B8%B8%E6%94%BB%E7%95%A53%E6%97%A5%E6%B8%B8.html</id>
    <published>2019-12-31T10:50:31.000Z</published>
    <updated>2020-02-02T02:00:25.588Z</updated>
    
    <content type="html"><![CDATA[<p>西安，长安！</p><a id="more"></a><h2 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h2><h3 id="陕西历史博物馆"><a href="#陕西历史博物馆" class="headerlink" title="陕西历史博物馆"></a>陕西历史博物馆</h3><p>之前很少坐火车，特别是长途的火车，想体验一下长时间的坐火车感受，选择了比较慢的K字头的绿皮火车，一路颠簸的去了西安，一整晚没睡着，简直太困了。预算够的话尽量选择高铁、动车、飞机，少花些时间在交通工具上，因为费时又费神。没特殊情况以后是再也不做慢车了😂。早上八点多到达<code>西安南站</code>，</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191231164703.png" alt="西安南"></p><p>下车之后打开高德地图，因为提前预定了<code>陕西历史博物馆</code>的门票（有免费票-基本陈列物，对于普通人差不多就够了，比较专业人士可以预约购买另外两种票，好像分别30和270，在陕西历史博物馆公众号上预约购买），9.0-10.30入场的票。然后就导航去博物馆，发现有个公交车可以直接到，然后去站台没看到那公交，也不知道什么情况。来了一个去历史地铁站的大巴，然后就上了，比公交贵两块，感觉还行，挺方便。</p><p>下了大巴直接做地铁去了西安历史博物馆。</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191231164810.png" alt="西安历史博物馆"></p><p>到了历史博物馆后，预约票取票在西南口。和普通买票的地方分开的，不要排错了地方！人比较多，注意合理安排错峰时间。</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191231165004.png" alt="丝绸之路"></p><p>整个游览过程<strong>大概一个多小时</strong>。</p><p><strong>推荐指数：4星</strong></p><h3 id="小雁塔"><a href="#小雁塔" class="headerlink" title="小雁塔"></a>小雁塔</h3><p>之前马蜂窝上看到推荐的，现场刷身份证入场。免费。有小雁塔和一个博物馆，文物也是一些历史文物，还是值得一看，冬季去，里面腊梅正开着，很香。</p><div class="img-y"> <p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191231165126.png" alt="小雁塔"> <img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191231165238.png" alt="腊梅"></p></div><p>整个游览过程<strong>大概一小时之内</strong>。</p><p><strong>推荐指数：3.5星</strong></p><h3 id="赛格购物中心"><a href="#赛格购物中心" class="headerlink" title="赛格购物中心"></a>赛格购物中心</h3><p>网红购物中心，6楼全是美食，又很多网红餐厅，没去吃，只点了一杯酸奶牛。没想象中那么震惊，说是最长的扶梯。结果是一层一层的，加起来最长。进门能够看到一个最大的室内瀑布，还挺美的。</p><div class="img-y"> <p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191231165339.png" alt="室内瀑布"> <img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191231191239.png" alt="扶梯"></p></div> <p>整个游览过程<strong>因人而异，花不了多长时间</strong>。</p><p><strong>推荐指数：3.5星</strong></p><p>上面几个地方想个不远，游完就去了酒店。酒店在钟楼附近，办理好入住，大概1点左右，点了些外卖，吃了就睡了一会儿，前一天晚上基本没睡，太累了。大概4点多睡醒了，收拾收拾出门了。</p><h3 id="西安城墙"><a href="#西安城墙" class="headerlink" title="西安城墙"></a>西安城墙</h3><p>大概5点多，溜到了西安城墙的永宁门，也就是南门，东南西北都有门可以进入，每个门最晚<strong>入门时间不一样</strong>，提前查好。<code>门票54</code>，城墙上有<code>租自行车的45一人</code>，任何一个还车点都能还。城墙全长<strong>14KM</strong>左右，我走完用了<strong>2h.20min</strong>，还是比较快的，根据自己情况预算时间。建议一定晚上去，晚上城墙上有很多灯笼🏮，夜景很好，建议去走一圈，感觉很好，那种感觉就像是自己是皇帝一样，走在上面看着自己的江山。城墙上能够看到日落和月亮，选择好的天气去，真的很重要。</p><div class="img-x"><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191231165523.png" alt="城墙"> <img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191231191359.png" alt="灯笼"></p></div> <p>整个游览过程<strong>因人而异，2-4小时</strong>。</p><p><strong>推荐指数：4.5星</strong></p><h2 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h2><p>第二天报了团，强烈建议报中超旅行的团，<code>价格260（兵马俑+华清池+临潼博物馆+午饭）</code>，导游<code>张丽美</code>，感觉讲的超级好。报团可以很方便的接送去景区，以及推荐一些好的东西，讲解一些当地城市的真正旅游文化。</p><h3 id="兵马俑"><a href="#兵马俑" class="headerlink" title="兵马俑"></a>兵马俑</h3><p>为了错峰，上午去看了兵马俑。西安兵马俑必去 之地就不必多介绍了，自己去感受。看完兵马俑就去吃饭了。</p><div class="img-x"> <p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191231165628.png" alt="兵马俑"> </p></div><p>整个游览过程<strong>因人而异，2-4小时</strong>。</p><p><strong>推荐指数：4.5星</strong></p><h3 id="蓝田玉商场"><a href="#蓝田玉商场" class="headerlink" title="蓝田玉商场"></a>蓝田玉商场</h3><p>中午吃饭的时候，去逛了逛，蓝田玉产地，有手镯（妈妈），芙蓉玉（老婆、女朋友），给自己的妈妈，老婆买一个真的不能太好了。可以去逛下，离华清池不远，说是全是12315认证过得，比其他地方的便宜。<strong>通过历往经验来看导游的话多数情况都信不得，景区的商品10有8、9是坑，自己多辨别，提前上网多查查，不要被坑了，被导游的片面之词蒙蔽了！！！</strong></p><p><strong>推荐指数：4.6星</strong></p><h3 id="临潼博物馆"><a href="#临潼博物馆" class="headerlink" title="临潼博物馆"></a>临潼博物馆</h3><p>吃完饭就去了临潼博物馆，博物馆里的全是珍宝，CCTV9有专门报道，可以搜到，提前可以先看下纪录片。推荐细看金棺银椁，以及佛祖的舍利（异常珍贵）。提前准备一些<code>佛教相关</code>的物件（配饰等），可以免费得到<code>舍利的加持</code>！</p><p>整个游览过程<strong>1小时</strong>。</p><p><strong>推荐指数：4.6星</strong></p><h3 id="华清池"><a href="#华清池" class="headerlink" title="华清池"></a>华清池</h3><p>看了临潼博物馆后就去了华清池，因为冬季去的，景色并不太好。可以看看当时西安事变相关的一些遗址，以及蒋介石的藏身地（可以坐电瓶车上半山看，票价20，也可以爬上去，不远）。有个<code>长恨歌</code>，因为是冬季去的，没演出，推荐度很高，建议要去的时候查好季节，去看一下。骊山上有个烽火台，没上去，可以坐缆车，导游没推荐，性价比不高。</p><div class="img-x"> <p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191231165820.png" alt="长恨歌"></p></div><p>整个游览过程<strong>1-2小时</strong>。</p><p><strong>推荐指数：3.5星</strong></p><h3 id="驼铃传奇"><a href="#驼铃传奇" class="headerlink" title="驼铃传奇"></a>驼铃传奇</h3><p>可以说西安最值的一段体验了，每个季节演出场次不同，一天几场，一场60分钟。讲述了整个丝绸之路。票价200到400，虽然贵些，但是真的值得看。总共有12个屏幕，我见过的最大的屏幕了，切换场景时，观众席会旋转，体验很好，有真实的狼，骆驼，瀑布，暴雨，模拟雪友情出演。</p><div class="img-x"> <p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191231170013.png" alt="开场"> <img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191231170157.png" alt="狼道"> <img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191231170335.png" alt="瀑布"></p></div><p>整个游览过程<strong>1小时</strong>。</p><p><strong>推荐指数：5星+1星</strong></p><h3 id="钟楼、鼓楼"><a href="#钟楼、鼓楼" class="headerlink" title="钟楼、鼓楼"></a>钟楼、鼓楼</h3><p>看完上面的，已经八九点了，晚上去看了下钟楼和鼓楼夜景，没上去，以及关门了。</p><div class="img-x"> <p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191231190757.png" alt="鼓楼旁边"></p></div><h2 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h2><h3 id="西安事变博物馆"><a href="#西安事变博物馆" class="headerlink" title="西安事变博物馆"></a>西安事变博物馆</h3><p>展现了整个西安事变的过程，以及张学友的一生，值得去看看，以史明鉴，铭记历史！</p><div class="img-x"><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191231193609.png" alt=""> <img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191231193700.png" alt=""> <img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191231193734.png" alt=""> <img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191231193809.png" alt=""> <img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191231193904.png" alt=""></p></div><p>整个游览过程<strong>1小时</strong>。</p><p><strong>推荐指数：4.5星</strong></p><h3 id="牛羊肉泡沫"><a href="#牛羊肉泡沫" class="headerlink" title="牛羊肉泡沫"></a>牛羊肉泡沫</h3><p>老孙家（关东总店），挨着永兴坊不远，很值得去尝试一下。自己去体验下掰的过程。</p><p>吃法：服务员上了泡馍，自己掰成黄豆大小，给服务员加工。然后开吃，一口甜蒜，一口泡馍，简直不要太爽！</p><div class="img-x"><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191231184711.png" alt=""> <img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191231184820.png" alt=""></p></div><p>整个过程<strong>0.5-1小时</strong>。</p><p><strong>推荐指数：4.6星</strong></p><p>吃完泡馍就去北站坐车回去了，整个旅游结束！</p><h2 id="干货："><a href="#干货：" class="headerlink" title="干货："></a>干货：</h2><p><strong>提前准备</strong></p><ul><li>查好天气</li><li>提前预约票</li><li>选好季节</li><li>提前做好攻略</li><li>部分景点最好报团，自己计算性价比</li></ul><p><strong>导游车上问到长安三绝，居然没人知道，唉，提前没做好攻略。</strong></p><ul><li>兵马俑等四个博物馆</li><li>驼铃传奇</li><li>牛羊肉泡馍</li></ul><p><strong>导游讲解笔记小本本</strong></p><div class="img-y"><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191231183812.png" alt=""> <img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191231183842.png" alt=""> <img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191231183908.png" alt=""> <img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191231190410.png" alt=""> <img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191231190444.png" alt=""></p></div><p><strong>敲黑板</strong><br><strong>导游的话不可全信，特别是推销当地特色商品时，不管说的多么天花乱坠都不要被蒙蔽了，保持清醒的头脑！</strong><br><strong>导游的话不可全信，特别是推销当地特色商品时，不管说的多么天花乱坠都不要被蒙蔽了，保持清醒的头脑！</strong><br><strong>导游的话不可全信，特别是推销当地特色商品时，不管说的多么天花乱坠都不要被蒙蔽了，保持清醒的头脑！</strong></p><p><strong>声明：</strong>以上评论全是自己的主观臆断，所有文字靠着记忆记录，如有错误欢迎指正。</p><p><em>写于2019.12.31，D1933高铁上。</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;西安，长安！&lt;/p&gt;
    
    </summary>
    
    
      <category term="travel" scheme="https://removeif.github.io/categories/travel/"/>
    
    
      <category term="西安" scheme="https://removeif.github.io/tags/%E8%A5%BF%E5%AE%89/"/>
    
      <category term="长安" scheme="https://removeif.github.io/tags/%E9%95%BF%E5%AE%89/"/>
    
      <category term="旅行" scheme="https://removeif.github.io/tags/%E6%97%85%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>一张图学会python3</title>
    <link href="https://removeif.github.io/python/%E4%B8%80%E5%BC%A0%E5%9B%BE%E5%AD%A6%E4%BC%9Apython3.html"/>
    <id>https://removeif.github.io/python/%E4%B8%80%E5%BC%A0%E5%9B%BE%E5%AD%A6%E4%BC%9Apython3.html</id>
    <published>2019-12-26T15:20:21.000Z</published>
    <updated>2020-02-02T02:00:25.584Z</updated>
    
    <content type="html"><![CDATA[<p>这张图包含了Python 3 几乎所有的知识点，包括输出、输入、变量、赋值、计算、模块、函数、参数、返回值、缩进、注释、for循环、条件判断、逻辑运算、字符串及格式化、转义字符、类型转换、列表，甚至也包含了点面向对象的应用（调用对象的方法）。</p><p>跟着这张图片一步一步学习，学会 Python指日可待！</p><a id="more"></a><p>正确查看方法，<code>右键图片-新便签页中打开链接-放大查看</code>  </p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191226224343.png" alt="python3语法"><br><a href="https://github.com/coodict/python3-in-one-pic">图片来源</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这张图包含了Python 3 几乎所有的知识点，包括输出、输入、变量、赋值、计算、模块、函数、参数、返回值、缩进、注释、for循环、条件判断、逻辑运算、字符串及格式化、转义字符、类型转换、列表，甚至也包含了点面向对象的应用（调用对象的方法）。&lt;/p&gt;
&lt;p&gt;跟着这张图片一步一步学习，学会 Python指日可待！&lt;/p&gt;
    
    </summary>
    
    
      <category term="python3" scheme="https://removeif.github.io/categories/python3/"/>
    
    
      <category term="python3基础" scheme="https://removeif.github.io/tags/python3%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>hash冲突开放地址法rehash</title>
    <link href="https://removeif.github.io/java/basic/hash%E5%86%B2%E7%AA%81%E5%BC%80%E6%94%BE%E5%9C%B0%E5%9D%80%E6%B3%95rehash.html"/>
    <id>https://removeif.github.io/java/basic/hash%E5%86%B2%E7%AA%81%E5%BC%80%E6%94%BE%E5%9C%B0%E5%9D%80%E6%B3%95rehash.html</id>
    <published>2019-12-26T15:16:04.000Z</published>
    <updated>2020-02-02T02:00:25.575Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hash碰撞"><a href="#Hash碰撞" class="headerlink" title="Hash碰撞"></a>Hash碰撞</h3><p>Hash函数就是将任意长度的输入转化成固定长度的输出的一类函数。</p><p>比如说我的输入是任意一个自然数（0,1,2,3…），而我要求经过一个函数后我的输出的数的范围要在0-9这样一个范围之间。</p><a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191226223745.png" alt=""></p><p>很容易想到，我们可以使用Hash函数：</p><p><code>Hash(key) = key % 10</code></p><p>其中key就是输入</p><p>在哈希表（散列表）里，Hash函数的作用就是将关键字Key转化为一个固定长度数组的下标，以便存取键值对&lt;Key,Value&gt;</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191226223842.png" alt=""></p><p>当多个键（key）经过Hash函数处理后落在了同一个位置时怎么办呢？</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191226224019.png" alt=""></p><p>此时使用链地址法可看：<a href="http://mp.weixin.qq.com/s?__biz=MzU1MDE4MzUxNA==&mid=2247483679&idx=1&sn=4a51847fb40fafe418bca0b906a03e0a&chksm=fba5362accd2bf3cba68324072863e93a354e65ecb1bdfb9f7dbd857af41f553b72d46b2cb36&scene=21#wechat_redirect">神速Hash</a></p><h4 id="链地址法"><a href="#链地址法" class="headerlink" title="链地址法"></a>链地址法</h4><p>用链表，来一个元素加一个，让这个位置存储一个指针，指向一个链表，让所有相同位置的元素都放在这个链表中</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191226224507.png" alt=""></p><p>在存储的时候，如果多个元素被Hash到同一位置，那么就加入到该位置所指向的链表中，如果该位置没有元素，则为null(指向空)。</p><p>此图中6先放进去了，因为这个插入链表的时候要采用‘头插’的方式，也就是插入链表的最前面（图中里数组最近的元素）。</p><p>因为经常发生这样的事情：新加入的元素很可能被再次访问到，所以放到头的话，如果查找就不用再遍历链表了。</p><p><strong>rehash</strong></p><p>Hash函数设计的非常好，能够将元素均匀Hash（散列）开来，但是当我们实际存入的值越来越多的时候，这个链表也势必越来越长，那当我们进行查找的时候，势必就会遍历链表，是否效率也就越来越慢？</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191226224731.png" alt=""></p><p>这样的话，随着链表的不断增长，查询某一个元素的时间也就增加了，如果链表长度远远大于数组长度，不就和用链表存储一样了吗？</p><p>对，现在只能扩大数组的长度大约为原来的两倍</p><p>然后选取一个相关的新的Hash函数（比如之前使用 key % m，现在只改变一下m的值）</p><p>将旧Hash表中所有的元素通过新的Hash函数计算出新的Hash值，并将其插入到新表中（仍然使用链表），这就叫rehash</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191226224913.png" alt=""></p><p>这里的数组就扩大了近两倍，由于要大小要选素数，那就选原数组大小两倍后的第一个素数7，旧Hash表和新Hash表采用了不同的Hash函数，但相关，只是m的取值变了。</p><p><strong>什么时候开始rehash？</strong></p><p><strong>装载因子 α</strong> </p><p>我们可以定义这样一个变量 α = 所有元素个数/数组的大小，我们叫它装载因子吧，它代表着我们的Hash表（也就是数组）的装满程度，在这里也代表链表的平均长度。</p><p>比如说，我们的数组大小为 5 ，我们给里面存入 3个元素，那么 α = 3/5 =0.6， 这个Hash表装满程度为60%，平均每条链有0.6个元素，当然 α 也可以等于和大于 1。</p><p>这个装载因子代表了Hash表的装满程度，这里也可以代表链表的平均长度，那么也就可以代表查询时的时间长短了</p><p>基于此，我们为了不让查询时间长，也就是查询性能低，我们可以设置一个临界 α 值，当随着存入元素导致 α 大于这个临界 α 值的时候</p><p>我们可以通过rehash来调整当前的 α 值，使之低于我们设定的 临界 α 值，从而使我们的查询性能保持在较好的范围之内</p><p>比如说，我们设定 临界 α = 0.7，对于一个Hash表大小为<strong>5</strong>的Hash表而言</p><p>当存入存入第四个元素的时候，α 就超出了临界 α 值，我们可以将数组长度变为11进行rehash（因为11是原表两倍后的第一个素数），使得装载因子 α 小于 0.7</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191226225339.png" alt=""></p><p>通过rehash我们可以使得装载因子在一定范围内，那我们的查询性能也就得到了保证了</p><p><strong>那这个 临界的 α 值应该选择多大呢？</strong></p><p>这个 临界 α 如果选的小了，那数组的空间利用率就会太低，就比如说数组大小为100，α = 0.01，那装满程度为1%，99%还没有被利用</p><p>如果 α 太大了，那冲突就会很多，比如说 数组大小为 5，α = 10, 那平均每条链有10个元素，装满程度为1000%</p><p>即使Hash函数设计的合理，基本上每次存放元素的时候就会冲突，所以鉴于两者之间我觉得 0.6 - 0.9 之间是一个不错的选择，不妨选0.75。</p><h3 id="开放地址法"><a href="#开放地址法" class="headerlink" title="开放地址法"></a>开放地址法</h3><p>所谓开放地址法就是发生冲突时在散列表（也就是数组里）里去寻找合适的位置存取对应的元素。</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191226225818.png" alt=""></p><p>合适的位置该怎么找呢？</p><h4 id="线性探测法"><a href="#线性探测法" class="headerlink" title="线性探测法"></a>线性探测法</h4><p>最容易想到的就是当前位置冲突了，那我就去找相邻的下一个位置。</p><p>就拿放入元素举例吧，当你放入&lt;a,101&gt;到下标为2的位置后，另一个&lt;c,103&gt;键值对也落入了这个位置，那么它就向后依次加一寻找合适的位置，然后把&lt;c,103&gt;放入进去。</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191226225952.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191226230006.png" alt=""></p><p>我们把这种方法称作线性探测法,我们可以将Hash以及寻找位置的过程抽象成一个函数：</p><p><code>hash(key) = (hash1(key) + i) % 7,i=0,1,2,...6</code></p><p>所以关键字要进行查找或者插入，首先看(hash1(key)+0)%7 位置是自己最终的位置吗？如果有冲突，就探测（查看）下一个位置:(hash1(key)+1)%7。依次进行</p><blockquote><p>所谓探测，就是在插入的时候检查哪个位置可以插入，或者查找时查找哪个位置是要查找的键值对，本质就是探寻这个键值对最终的位置。    </p></blockquote><p>但是这样会有一个问题，就是随着键值对的增多，会在哈希表里形成连续的键值对</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191226230227.png" alt=""></p><p>这样的话，当插入元素时，任意一个落入这个区间的元素都要一直探测到区间末尾，并且最终将自己加入到这个区间内。这样就会导致落在区间内的关键字Key要进行多次探测才能找到合适的位置，并且还会继续增大这个连续区间，使探测时间变得更长，这样的现象被称为“一次聚集（primary clustering）”</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191226230319.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191226230333.png" alt=""></p><h4 id="平方探测法"><a href="#平方探测法" class="headerlink" title="平方探测法"></a>平方探测法</h4><p>我们可以在探测时不一个挨着一个地向后探测，我们可以跳跃着探测，这样就避免了一次聚集。</p><p>其实我们可以让它按照 i^2 的规律来跳跃探测</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191226230416.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191226230440.png" alt=""></p><p>这样的话，元素就不会聚集在某一块区域了，我们把这种方法称为平方探测法</p><p>同样我们可以抽象成下面的函数：</p><p><code>hash(key) = (hash1(key) + i^2) % 7,i=0,1,2,...6</code></p><p>其实可以扩展到更一般的形式：</p><p><code>hash(key) = (hash1(key) +c1i+c2 i^2) % 7,i=0,1,2,...6</code></p><p>虽然平方探测法解决了线性探测法的一次聚集，但是它也有一个小问题，就是关键字key散列到同一位置后探测时的路径是一样的。</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191226230630.png" alt=""></p><p>这样对于许多落在同一位置的关键字而言，越是后面插入的元素，探测的时间就越长。</p><p>这种现象被称作“二次聚集(secondary clustering)”,其实这个在线性探测法里也有。</p><p>这种现象出现的原因是由于对于落在同一个位置的关键字我们采取了一个依赖 i 的函数（i或者i^2）来进行探测，它不会因为关键字的不同或其他因素而改变探测的路径。那么我们是不是可以让探测的方法依赖于关键字呢？</p><h4 id="双散列"><a href="#双散列" class="headerlink" title="双散列"></a>双散列</h4><p>答案是可以的，我们可以再弄另外一个Hash函数，对落在同一个位置的关键字进行再次的Hash,探测的时候就用依赖这个Hash值去探测，比如我们可以使用下面的函数：</p><p><code>hash(key) = (hash1(key) +hash2(key)*i) % 7,i=0,1,2,...6</code></p><p>经过hash1的散列后，会定位到某一个地址，如果这个地址冲突，那么就按照1<em>hash2(key)、2</em>hash2(key)… 的偏移去探测合适的位置。</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191226230925.png" alt=""></p><p>由于Hash2函数不同于Hash1,所以两个不同的关键字Hash1值和Hash2值同时相同的概率就会变得非常低。</p><p>这样就避免了二次聚集，但同时也付出了计算另一个散列函数Hash2的代价。</p><p>如果hash2(key)=0,那探测不就一直在原地不动，失效了吗？</p><p>所以hash2函数在选择的时候要避免这种情况。</p><p>参考文章:<br><a href="https://mp.weixin.qq.com/s/yTEs1rlRFCnCNrVlX_ul4Q">参考链接1</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hash碰撞&quot;&gt;&lt;a href=&quot;#Hash碰撞&quot; class=&quot;headerlink&quot; title=&quot;Hash碰撞&quot;&gt;&lt;/a&gt;Hash碰撞&lt;/h3&gt;&lt;p&gt;Hash函数就是将任意长度的输入转化成固定长度的输出的一类函数。&lt;/p&gt;
&lt;p&gt;比如说我的输入是任意一个自然数（0,1,2,3…），而我要求经过一个函数后我的输出的数的范围要在0-9这样一个范围之间。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://removeif.github.io/categories/java/"/>
    
      <category term="java基础" scheme="https://removeif.github.io/categories/java/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="hash冲突" scheme="https://removeif.github.io/tags/hash%E5%86%B2%E7%AA%81/"/>
    
      <category term="rehash" scheme="https://removeif.github.io/tags/rehash/"/>
    
  </entry>
  
  <entry>
    <title>算法成长之路leetcode13-14</title>
    <link href="https://removeif.github.io/algorithm/%E7%AE%97%E6%B3%95%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AFleetcode13-14.html"/>
    <id>https://removeif.github.io/algorithm/%E7%AE%97%E6%B3%95%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AFleetcode13-14.html</id>
    <published>2019-12-24T14:47:34.000Z</published>
    <updated>2020-02-02T02:00:25.564Z</updated>
    
    <content type="html"><![CDATA[<h3 id="13-Roman-to-Integer"><a href="#13-Roman-to-Integer" class="headerlink" title="13. Roman to Integer"></a><a href="https://leetcode-cn.com/problems/roman-to-integer/">13. Roman to Integer</a></h3><p>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.</p><a id="more"></a><table><thead><tr><th align="left">Symbol</th><th align="left">Value</th></tr></thead><tbody><tr><td align="left">I</td><td align="left">1</td></tr><tr><td align="left">V</td><td align="left">5</td></tr><tr><td align="left">X</td><td align="left">10</td></tr><tr><td align="left">L</td><td align="left">50</td></tr><tr><td align="left">C</td><td align="left">100</td></tr><tr><td align="left">D</td><td align="left">500</td></tr><tr><td align="left">M</td><td align="left">1000</td></tr></tbody></table><p>For example, two is written as II in Roman numeral, just two one’s added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.</p><p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:</p><p>I can be placed before V (5) and X (10) to make 4 and 9.<br>X can be placed before L (50) and C (100) to make 40 and 90.<br>C can be placed before D (500) and M (1000) to make 400 and 900.<br>Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.</p><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: &quot;III&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: &quot;IV&quot;</span><br><span class="line">Output: 4</span><br><span class="line">Example 3:</span><br><span class="line"></span><br><span class="line">Input: &quot;IX&quot;</span><br><span class="line">Output: 9</span><br><span class="line">Example 4:</span><br><span class="line"></span><br><span class="line">Input: &quot;LVIII&quot;</span><br><span class="line">Output: 58</span><br><span class="line">Explanation: L &#x3D; 50, V&#x3D; 5, III &#x3D; 3.</span><br><span class="line">Example 5:</span><br><span class="line"></span><br><span class="line">Input: &quot;MCMXCIV&quot;</span><br><span class="line">Output: 1994</span><br><span class="line">Explanation: M &#x3D; 1000, CM &#x3D; 900, XC &#x3D; 90 and IV &#x3D; 4.</span><br></pre></td></tr></table></figure><h4 id="JAVA题解"><a href="#JAVA题解" class="headerlink" title="JAVA题解"></a>JAVA题解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 字符          数值</span></span><br><span class="line"><span class="comment"> * I             1</span></span><br><span class="line"><span class="comment"> * V             5</span></span><br><span class="line"><span class="comment"> * X             10</span></span><br><span class="line"><span class="comment"> * L             50</span></span><br><span class="line"><span class="comment"> * C             100</span></span><br><span class="line"><span class="comment"> * D             500</span></span><br><span class="line"><span class="comment"> * M             1000</span></span><br><span class="line"><span class="comment"> * 例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，</span></span><br><span class="line"><span class="comment"> * 例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，</span></span><br><span class="line"><span class="comment"> * 所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。</span></span><br><span class="line"><span class="comment"> * 这个特殊的规则只适用于以下六种情况：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</span></span><br><span class="line"><span class="comment"> * X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 </span></span><br><span class="line"><span class="comment"> * C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</span></span><br><span class="line"><span class="comment"> * 给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 示例 1:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 输入: "III"</span></span><br><span class="line"><span class="comment"> * 输出: 3</span></span><br><span class="line"><span class="comment"> * 示例 2:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 输入: "IV"</span></span><br><span class="line"><span class="comment"> * 输出: 4</span></span><br><span class="line"><span class="comment"> * 示例 3:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 输入: "IX"</span></span><br><span class="line"><span class="comment"> * 输出: 9</span></span><br><span class="line"><span class="comment"> * 示例 4:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 输入: "LVIII"</span></span><br><span class="line"><span class="comment"> * 输出: 58</span></span><br><span class="line"><span class="comment"> * 解释: L = 50, V= 5, III = 3.</span></span><br><span class="line"><span class="comment"> * 示例 5:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 输入: "MCMXCIV"</span></span><br><span class="line"><span class="comment"> * 输出: 1994</span></span><br><span class="line"><span class="comment"> * 解释: M = 1000, CM = 900, XC = 90, IV = 4.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment"> * 链接：https://leetcode-cn.com/problems/roman-to-integer</span></span><br><span class="line"><span class="comment"> * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leetcode13</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] moneys = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        String[] moneyToStr = <span class="keyword">new</span> String[]&#123;<span class="string">"M"</span>, <span class="string">"CM"</span>, <span class="string">"D"</span>, <span class="string">"CD"</span>, <span class="string">"C"</span>, <span class="string">"XC"</span>, <span class="string">"L"</span>, <span class="string">"XL"</span>, <span class="string">"X"</span>, <span class="string">"IX"</span>, <span class="string">"V"</span>, <span class="string">"IV"</span>, <span class="string">"I"</span>&#125;;</span><br><span class="line">        <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> tempJ = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; ) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = tempJ; j &lt; moneyToStr.length; ) &#123;</span><br><span class="line">                <span class="comment">// 从左往右开始一个字符一个字符匹配，匹配到一个字符后开始下一个</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">char</span>[]&#123;chars[i]&#125;).equals(moneyToStr[j])) &#123;</span><br><span class="line">                    result += moneys[j];</span><br><span class="line">                    i++;</span><br><span class="line">                    <span class="comment">// 此时下一次可能还会出现一样的字符如VV=20</span></span><br><span class="line">                    tempJ = j;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">// 匹配到两个字符是开始下两个字符</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i + <span class="number">1</span> &lt; chars.length &amp;&amp; <span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">char</span>[]&#123;chars[i], chars[i + <span class="number">1</span>]&#125;).equals(moneyToStr[j])) &#123;</span><br><span class="line">                    result += moneys[j];</span><br><span class="line">                    i += <span class="number">2</span>;</span><br><span class="line">                    <span class="comment">// 下次出现的一定是一个字符的,如IV下次不会再出现IV 只能出现I</span></span><br><span class="line">                    tempJ = j + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">romanToInt1</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"I"</span>, <span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">"IV"</span>, <span class="number">4</span>);</span><br><span class="line">        map.put(<span class="string">"V"</span>, <span class="number">5</span>);</span><br><span class="line">        map.put(<span class="string">"IX"</span>, <span class="number">9</span>);</span><br><span class="line">        map.put(<span class="string">"X"</span>, <span class="number">10</span>);</span><br><span class="line">        map.put(<span class="string">"XL"</span>, <span class="number">40</span>);</span><br><span class="line">        map.put(<span class="string">"L"</span>, <span class="number">50</span>);</span><br><span class="line">        map.put(<span class="string">"XC"</span>, <span class="number">90</span>);</span><br><span class="line">        map.put(<span class="string">"C"</span>, <span class="number">100</span>);</span><br><span class="line">        map.put(<span class="string">"CD"</span>, <span class="number">400</span>);</span><br><span class="line">        map.put(<span class="string">"D"</span>, <span class="number">500</span>);</span><br><span class="line">        map.put(<span class="string">"CM"</span>, <span class="number">900</span>);</span><br><span class="line">        map.put(<span class="string">"M"</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 所有的字符，要么匹配两个要么匹配一个，没有其余的情况</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; s.length();) &#123;</span><br><span class="line">            <span class="comment">// 两个匹配的</span></span><br><span class="line">            <span class="keyword">if</span>(i + <span class="number">1</span> &lt; s.length() &amp;&amp; map.containsKey(s.substring(i, i+<span class="number">2</span>))) &#123;</span><br><span class="line">                ans += map.get(s.substring(i, i+<span class="number">2</span>));</span><br><span class="line">                <span class="comment">// 匹配上后往后移两个</span></span><br><span class="line">                i += <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 一个匹配上的</span></span><br><span class="line">                ans += map.get(s.substring(i, i+<span class="number">1</span>));</span><br><span class="line">                <span class="comment">// 匹配后往后移一个</span></span><br><span class="line">                i ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(romanToInt(<span class="string">"XIX"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14-Longest-Common-Prefix"><a href="#14-Longest-Common-Prefix" class="headerlink" title="14. Longest Common Prefix"></a><a href="https://leetcode-cn.com/problems/longest-common-prefix/">14. Longest Common Prefix</a></h3><p>Write a function to find the longest common prefix string amongst an array of strings.</p><p>If there is no common prefix, return an empty string “”.</p><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">Output: &quot;fl&quot;</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">Output: &quot;&quot;</span><br><span class="line">Explanation: There is no common prefix among the input strings.</span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line">All given inputs are in lowercase letters a-z.</span><br></pre></td></tr></table></figure><h4 id="JAVA题解-1"><a href="#JAVA题解-1" class="headerlink" title="JAVA题解"></a>JAVA题解</h4><h5 id="水平扫描"><a href="#水平扫描" class="headerlink" title="水平扫描"></a>水平扫描</h5><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191224225712.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191224225319.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithm;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编写一个函数来查找字符串数组中的最长公共前缀。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 如果不存在公共前缀，返回空字符串 ""。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 示例 1:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 输入: ["flower","flow","flight"]</span></span><br><span class="line"><span class="comment"> * 输出: "fl"</span></span><br><span class="line"><span class="comment"> * 示例 2:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 输入: ["dog","racecar","car"]</span></span><br><span class="line"><span class="comment"> * 输出: ""</span></span><br><span class="line"><span class="comment"> * 解释: 输入不存在公共前缀。</span></span><br><span class="line"><span class="comment"> * 说明:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 所有输入只包含小写字母 a-z 。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment"> * 链接：https://leetcode-cn.com/problems/longest-common-prefix</span></span><br><span class="line"><span class="comment"> * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leetcode14</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (strs.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (strs.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> strs[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        String pre = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; strs[<span class="number">0</span>].length(); i++) &#123;</span><br><span class="line">            pre = strs[<span class="number">0</span>].substring(<span class="number">0</span>, i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">boolean</span> end = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (; j &lt; strs.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!strs[j].startsWith(pre)) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (pre.length() == strs[j].length()) &#123;</span><br><span class="line">                    end = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (j == strs.length &amp;&amp; !end) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j != strs.length) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (pre.length() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> pre.substring(<span class="number">0</span>, pre.length() - <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> pre;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 水平扫描法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">longestCommonPrefix1</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (strs.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        String prefix = strs[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 1,2-&gt;s1,3-&gt;s2,4;前两个中找到前缀公共最长的s1,然后和第3个一起找出s2，以此类推</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; strs.length; i++)</span><br><span class="line">            <span class="comment">// 不相等时为-1</span></span><br><span class="line">            <span class="keyword">while</span> (strs[i].indexOf(prefix) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 从后往前缩短，直到找到最长的</span></span><br><span class="line">                prefix = prefix.substring(<span class="number">0</span>, prefix.length() - <span class="number">1</span>);</span><br><span class="line">                <span class="comment">// 找完都没找到的话返回空</span></span><br><span class="line">                <span class="keyword">if</span> (prefix.isEmpty()) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(longestCommonPrefix1(<span class="keyword">new</span> String[]&#123;<span class="string">"flower"</span>,<span class="string">"fl"</span>,<span class="string">"flight"</span>&#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 水平扫描，单个字符逐一进行比较</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">longestCommonPrefix2</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (strs == <span class="keyword">null</span> || strs.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs[<span class="number">0</span>].length() ; i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = strs[<span class="number">0</span>].charAt(i);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; strs.length; j ++) &#123;</span><br><span class="line">                <span class="comment">// 如果i == strs[j].length() 代表找出最短的，直接返回，或者不相等时直接返回</span></span><br><span class="line">                <span class="keyword">if</span> (i == strs[j].length() || strs[j].charAt(i) != c)</span><br><span class="line">                    <span class="keyword">return</span> strs[<span class="number">0</span>].substring(<span class="number">0</span>, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 到此处已经找完</span></span><br><span class="line">        <span class="keyword">return</span> strs[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="分治算法"><a href="#分治算法" class="headerlink" title="分治算法"></a>分治算法</h5><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191224225516.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191224225530.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (strs == <span class="keyword">null</span> || strs.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;    </span><br><span class="line">        <span class="keyword">return</span> longestCommonPrefix(strs, <span class="number">0</span> , strs.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 只有一个字符串的时候，返回此字符串</span></span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        <span class="keyword">return</span> strs[l];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r)/<span class="number">2</span>;</span><br><span class="line">      <span class="comment">// 找出左边最长前缀</span></span><br><span class="line">        String lcpLeft =   longestCommonPrefix(strs, l , mid);</span><br><span class="line">        <span class="comment">// 找出右边最长前缀</span></span><br><span class="line">        String lcpRight =  longestCommonPrefix(strs, mid + <span class="number">1</span>,r);</span><br><span class="line">      <span class="comment">// 左边右边中找出最长前缀</span></span><br><span class="line">        <span class="keyword">return</span> commonPrefix(lcpLeft, lcpRight);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">commonPrefix</span><span class="params">(String left,String right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> min = Math.min(left.length(), right.length());       </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; min; i++) &#123;</span><br><span class="line">      <span class="comment">// 循环最小的一边字符逐一比较,不相等时跳出</span></span><br><span class="line">        <span class="keyword">if</span> ( left.charAt(i) != right.charAt(i) )</span><br><span class="line">            <span class="keyword">return</span> left.substring(<span class="number">0</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left.substring(<span class="number">0</span>, min);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="二分查找法"><a href="#二分查找法" class="headerlink" title="二分查找法"></a>二分查找法</h5><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191224230413.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191224230426.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (strs == <span class="keyword">null</span> || strs.length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">int</span> minLen = Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (String str : strs)</span><br><span class="line">        minLen = Math.min(minLen, str.length());</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> high = minLen;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        <span class="keyword">int</span> middle = (low + high) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (isCommonPrefix(strs, middle))</span><br><span class="line">            low = middle + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            high = middle - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> strs[<span class="number">0</span>].substring(<span class="number">0</span>, (low + high) / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isCommonPrefix</span><span class="params">(String[] strs, <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    String str1 = strs[<span class="number">0</span>].substring(<span class="number">0</span>,len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; strs.length; i++)</span><br><span class="line">        <span class="keyword">if</span> (!strs[i].startsWith(str1))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="字典树"><a href="#字典树" class="headerlink" title="字典树"></a>字典树</h5><p>给定一些键值字符串 S = [S 1 ,S 2 …S n ]，我们要找到字符串 q 与 S 的最长公共前缀。 这样的查询操作可能会非常频繁。</p><p>我们可以通过将所有的键值 S 存储到一颗字典树中来优化最长公共前缀查询操作。 如果你想学习更多关于字典树的内容，可以从 <a href="https://leetcode-cn.com/problems/implement-trie-prefix-tree/solution/">208. 实现 Trie (前缀树)</a>开始。在字典树中，从根向下的每一个节点都代表一些键值的公共前缀。 但是我们需要找到字符串q 和所有键值字符串的最长公共前缀。 这意味着我们需要从根找到一条最深的路径，满足以下条件：</p><p>这是所查询的字符串 q 的一个前缀</p><p>路径上的每一个节点都有且仅有一个孩子。 否则，找到的路径就不是所有字符串的公共前缀</p><p>路径不包含被标记成某一个键值字符串结尾的节点。 因为最长公共前缀不可能比某个字符串本身长</p><p><strong>算法</strong></p><p>最后的问题就是如何找到字典树中满足上述所有要求的最深节点。 最有效的方法就是建立一颗包含字符串[S 1 …S n ] 的字典树。 然后在这颗树中匹配 q 的前缀。 我们从根节点遍历这颗字典树，直到因为不能满足某个条件而不能再遍历为止。</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191224231052.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String q, String[] strs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (strs == <span class="keyword">null</span> || strs.length == <span class="number">0</span>)</span><br><span class="line">         <span class="keyword">return</span> <span class="string">""</span>;  </span><br><span class="line">    <span class="keyword">if</span> (strs.length == <span class="number">1</span>)</span><br><span class="line">         <span class="keyword">return</span> strs[<span class="number">0</span>];</span><br><span class="line">    Trie trie = <span class="keyword">new</span> Trie();      </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; strs.length ; i++) &#123;</span><br><span class="line">        trie.insert(strs[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> trie.searchLongestPrefix(q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子节点的链接数组</span></span><br><span class="line">    <span class="keyword">private</span> TrieNode[] links;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> R = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isEnd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非空子节点的数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">char</span> ch, TrieNode node)</span> </span>&#123;</span><br><span class="line">        links[ch -<span class="string">'a'</span>] = node;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLinks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 假设方法 containsKey、isEnd、get、put 都已经实现了</span></span><br><span class="line">    <span class="comment">// 可以参考文章：https://leetcode.com/articles/implement-trie-prefix-tree/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TrieNode root;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        root = <span class="keyword">new</span> TrieNode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设方法 insert、search、searchPrefix 都已经实现了</span></span><br><span class="line"><span class="comment">// 可以参考文章：https://leetcode.com/articles/implement-trie-prefix-tree/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">searchLongestPrefix</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        TrieNode node = root;</span><br><span class="line">        StringBuilder prefix = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> curLetter = word.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (node.containsKey(curLetter) &amp;&amp; (node.getLinks() == <span class="number">1</span>) &amp;&amp; (!node.isEnd())) &#123;</span><br><span class="line">                prefix.append(curLetter);</span><br><span class="line">                node = node.get(curLetter);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> prefix.toString();</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> prefix.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;13-Roman-to-Integer&quot;&gt;&lt;a href=&quot;#13-Roman-to-Integer&quot; class=&quot;headerlink&quot; title=&quot;13. Roman to Integer&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/roman-to-integer/&quot;&gt;13. Roman to Integer&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.&lt;/p&gt;
    
    </summary>
    
    
      <category term="algorithm" scheme="https://removeif.github.io/categories/algorithm/"/>
    
    
      <category term="分治" scheme="https://removeif.github.io/tags/%E5%88%86%E6%B2%BB/"/>
    
      <category term="二分查找" scheme="https://removeif.github.io/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>贪心算法解析示例</title>
    <link href="https://removeif.github.io/algorithm/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E8%A7%A3%E6%9E%90%E7%A4%BA%E4%BE%8B.html"/>
    <id>https://removeif.github.io/algorithm/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E8%A7%A3%E6%9E%90%E7%A4%BA%E4%BE%8B.html</id>
    <published>2019-12-22T15:26:15.000Z</published>
    <updated>2020-02-02T02:00:25.566Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>贪心算法（又称贪婪算法）是指，在对<a href="https://baike.baidu.com/item/问题求解">问题求解</a>时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的是在某种意义上的局部<a href="https://baike.baidu.com/item/最优解">最优解</a>。</p><p>贪心算法不是对所有问题都能得到整体最优解，关键是贪心策略的选择，选择的贪心策略必须具备无后效性，即某个状态以前的过程不会影响以后的状态，只与当前状态有关。</p><a id="more"></a><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>贪心算法的基本思路是从问题的某一个初始解出发一步一步地进行，根据某个优化测度，每一步都要确保能获得局部最优解。每一步只考虑一个数据，他的选取应该满足局部优化的条件。若下一个数据和部分最优解连在一起不再是可行解时，就不把该数据添加到部分解中，直到把所有数据枚举完，或者不能再添加算法停止</p><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><ul><li>建立数学模型来描述问题；</li><li>把求解的问题分成若干个子问题；</li><li>对每一子问题求解，得到子问题的局部最优解；</li><li>把子问题的解局部最优解合成原来解问题的一个解。              </li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>假设山洞中有 n 种宝物，每种宝物有一定重量 w 和相应的价值 v，毛驴运载能力有限，<br>只能运走 m 重量的宝物，一种宝物只能拿一样，宝物可以分割。那么怎么才能使毛驴运走宝<br>物的价值最大呢？<br><strong>尝试贪心策略：</strong><br>（1）每次挑选价值最大的宝物装入背包，得到的结果是否最优？<br>（2）每次挑选重量最小的宝物装入，能否得到最优解？<br>（3）每次选取单位重量价值最大的宝物，能否使价值最高？<br>思考一下，如果选价值最大的宝物，但重量非常大，也是不行的，因为运载能力是有限<br>的，所以第 1 种策略舍弃；如果选重量最小的物品装入，那么其价值不一定高，所以不能在<br>总重限制的情况下保证价值最大，第 2 种策略舍弃；而第 3 种是每次选取单位重量价值最大<br>的宝物，也就是说每次选择性价比（价值/重量）最高的宝物，如果可以达到运载重量 m，</p><p>那么一定能得到价值最大。<br>因此采用第 3 种贪心策略，每次从剩下的宝物中选择性价比最高的宝物。</p><p><strong>算法设计：</strong><br>（1）数据结构及初始化。将 n 种宝物的重量和价值存储在结构体 three（包含重量、价<br>值、性价比 3 个成员）中，同时求出每种宝物的性价比也存储在对应的结构体 three 中，将<br>其按照性价比从高到低排序。采用 sum 来存储毛驴能够运走的最大价值，初始化为 0。<br>（2）根据贪心策略，按照性价比从大到小选取宝物，直到达到毛驴的运载能力。每次选<br>择性价比高的物品，判断是否小于 m（毛驴运载能力），如果小于 m，则放入，sum（已放入<br>物品的价值）加上当前宝物的价值，m 减去放入宝物的重量；如果不小于 m，则取该宝物的<br>一部分 <code>m * p[i]，m=0</code>，程序结束。m 减少到 0，则 sum 得到最大值。</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191221230800.png" alt=""></p><p><strong>完美图解</strong><br>假设现在有一批宝物，价值和重量如表 2-3 所示，毛驴运载能力 m=30，那么怎么装入<br>最大价值的物品？<br><strong>宝物清单：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">宝物 i  1  2  3  4  5  6  7  8  9  10</span><br><span class="line">重量 w[i]  4  2  9  5  5  8  5  4  5  5</span><br><span class="line">价值 v[i]  3  8  18  6  8  20  5  6  7  15</span><br></pre></td></tr></table></figure><p><strong>（1）因为贪心策略是每次选择性价比（价值/重量）高的宝物，按照性价比降序排序：</strong><br><strong>排序后宝物清单：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">宝物 i  2  10  6  3  5  8  9  4  7  1</span><br><span class="line">重量 w[i]  2  5  8  9  5  4  5  5  5  4</span><br><span class="line">价值 v[i]  8  15  20  18  8  6  7  6  5  3</span><br><span class="line">性价比 p[i]  4  3  2.5  2  1.6  1.5  1.4  1.2  1  0.75</span><br></pre></td></tr></table></figure><p><strong>（2）按照贪心策略，每次选择性价比高的宝物放入：</strong><br>第 1 次选择宝物 2，剩余容量 30−2=28，目前装入最大价值为 8。<br>第 2 次选择宝物 10，剩余容量 28−5=23，目前装入最大价值为 8+15=23。<br>第 3 次选择宝物 6，剩余容量 23−8=15，目前装入最大价值为 23+20=43。<br>第 4 次选择宝物 3，剩余容量 15−9=6，目前装入最大价值为 43+18=61。</p><p>第 5 次选择宝物 5，剩余容量 6−5=1，目前装入最大价值为 61+8=69。<br>第 6 次选择宝物 8，发现上次处理完时剩余容量为 1，而 8 号宝物重量为 4，无法全部<br>放入，那么可以采用部分装入的形式，装入 1 个重量单位，因为 8 号宝物的单位重量价值为<br>1.5，因此放入价值 1×1.5=1.5，你也可以认为装入了 8 号宝物的 1/4，目前装入最大价值为<br>69+1.5=70.5，剩余容量为 0。<br><strong>（3）构造最优解</strong><br>把这些放入的宝物序号组合在一起，就得到了最优解（2，10，6，3，5，8），其中最后<br>一个宝物为部分装入（装了 8 号财宝的 1/4），能够装入宝物的最大价值为 70.5。</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191221230512.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191221230643.png" alt=""></p><h4 id="伪代码详解"><a href="#伪代码详解" class="headerlink" title="伪代码详解"></a>伪代码详解</h4><p><strong>（1）数据结构定义</strong><br>根据算法设计中的数据结构，我们首先定义一个结构体 three：<br>struct three{<br>double w; //每种宝物的重量<br>double v; //每种宝物的价值<br>double p; //每种宝物的性价比（价值/重量）<br>｝<br><strong>（2）性价比排序</strong><br>我们可以利用 C++中的排序函数 sort（见附录 B），对宝物的性价比从大到小（非递增）<br>排序。要使用此函数需引入头文件：<br>#include <algorithm><br>语法描述为：<br>sort(begin, end)// 参数 begin 和 end 表示一个范围，分别为待排序数组的首地址和尾地址<br>在本例中我们采用结构体形式存储，按结构体中的一个字段，即按性价比排序。如果不<br>使用自定义比较函数，那么 sort 函数排序时不知道按哪一项的值排序，因此采用自定义比较<br>函数的办法实现宝物性价比的降序排序：<br>bool cmp(three a,three b)//比较函数按照宝物性价比降序排列<br>{<br>return a.p &gt; b.p; //指明按照宝物性价比降序排列<br>}<br>sort(s, s+n, cmp); //前两个参数分别为待排序数组的首地址和尾地址<br>//最后一个参数 compare 表示比较的类型<br><strong>（3）贪心算法求解</strong><br>在性价比排序的基础上，进行贪心算法运算。如果剩余容量比当前宝物的重量大，则可以放入，剩余容量减去当前宝物的重量，已放入物品的价值加上当前宝物的价值。如果剩余<br>容量比当前宝物的重量小，表示不可以全部放入，可以切割下来一部分（正好是剩余容量），<br>然后令剩余容量乘以当前物品的单位重量价值，已放入物品的价值加上该价值，即为能放入<br>宝物的最大价值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)<span class="comment">//按照排好的顺序，执行贪心策略</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>( m &gt; s[i].w )<span class="comment">//如果宝物的重量小于毛驴剩下的运载能力，即剩余容量</span></span><br><span class="line">&#123;</span><br><span class="line">m -= s[i].w;</span><br><span class="line">sum += s[i].v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">//如果宝物的重量大于毛驴剩下的承载能力</span></span><br><span class="line">&#123;</span><br><span class="line">sum += m 乘以 s[i].p; <span class="comment">//进行宝物切割，切割一部分(m 重量)，正好达到驴子承重</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现代码："><a href="#实现代码：" class="headerlink" title="实现代码："></a>实现代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">1000005</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">three</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> w;<span class="comment">//每个宝物的重量</span></span><br><span class="line">    <span class="keyword">double</span> v;<span class="comment">//每个宝物的价值</span></span><br><span class="line">    <span class="keyword">double</span> p;<span class="comment">//性价比</span></span><br><span class="line">&#125;s[M];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(three a,three b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.p&gt;b.p;<span class="comment">//根据宝物的单位价值从大到小排序</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;<span class="comment">//n 表示有 n 个宝物</span></span><br><span class="line">    <span class="keyword">double</span> m ;<span class="comment">//m 表示毛驴的承载能力</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入宝物数量 n 及毛驴的承载能力 m ："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入每个宝物的重量和价值，用空格分开： "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s[i].w&gt;&gt;s[i].v;</span><br><span class="line">        s[i].p=s[i].v/s[i].w;<span class="comment">//每个宝物单位价值</span></span><br><span class="line">    &#125;</span><br><span class="line">    sort(s,s+n,cmp);</span><br><span class="line">    <span class="keyword">double</span> sum=<span class="number">0.0</span>;<span class="comment">// sum 表示贪心记录运走宝物的价值之和</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="comment">//按照排好的顺序贪心</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( m&gt;s[i].w )<span class="comment">//如果宝物的重量小于毛驴剩下的承载能力</span></span><br><span class="line">    &#123;</span><br><span class="line">        m-=s[i].w;</span><br><span class="line">        sum+=s[i].v;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">else</span><span class="comment">//如果宝物的重量大于毛驴剩下的承载能力</span></span><br><span class="line">        &#123;</span><br><span class="line">            sum+=m * s[i].p;<span class="comment">//部分装入</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"装入宝物的最大价值 Maximum value="</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>如果物品不能被分割，就不能采用贪心算法。</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191221231432.png" alt=""></p><h3 id="leetcode12-整数转罗马数字"><a href="#leetcode12-整数转罗马数字" class="headerlink" title="leetcode12. 整数转罗马数字"></a><a href="https://leetcode-cn.com/problems/integer-to-roman/">leetcode12. 整数转罗马数字</a></h3><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191221231719.png" alt=""></p><p>生活中的经验：</p><p><strong>在以前还使用现金购物的时候，如果我们不想让对方找钱，付款的时候我们会尽量选择面值大的纸币给对方，这样才会使得我们给对方的纸币张数最少，对方点钱的时候也最方便。</strong></p><p>本题“整数转罗马数字”也有类似的思想：在表示一个较大整数的时候，“罗马数字”的设计者不会让你都用 11 加起来，我们总是希望写出来的“罗马数字”的个数越少越好，以方便表示，并且这种表示方式还应该是唯一的。</p><p><strong>“罗马数字”与阿拉伯数字的对应关系表中，并且按照从大到小的顺序排列</strong>。</p><table><thead><tr><th align="left">罗马数字</th><th align="left">阿拉伯数字</th></tr></thead><tbody><tr><td align="left">M</td><td align="left">1000</td></tr><tr><td align="left">CM</td><td align="left">900</td></tr><tr><td align="left">D</td><td align="left">500</td></tr><tr><td align="left">CD</td><td align="left">400</td></tr><tr><td align="left">C</td><td align="left">100</td></tr><tr><td align="left">XC</td><td align="left">90</td></tr><tr><td align="left">L</td><td align="left">50</td></tr><tr><td align="left">XL</td><td align="left">40</td></tr><tr><td align="left">X</td><td align="left">10</td></tr><tr><td align="left">IX</td><td align="left">9</td></tr><tr><td align="left">V</td><td align="left">5</td></tr><tr><td align="left">IV</td><td align="left">4</td></tr><tr><td align="left">I</td><td align="left">1</td></tr></tbody></table><p>于是，“将整数转换为罗马数字”的过程，就是用上面这张表中右边的数字作为“加法因子”去分解一个整数，目的是“分解的整数个数”尽可能少，因此，对于这道问题，类似于用最少的纸币凑成一个整数，贪心算法的规则如下：</p><p><strong>每一步都使用当前较大的罗马数字作为加法因子，最后得到罗马数字表示就是长度最少的。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 把阿拉伯数字与罗马数字可能出现的所有情况和对应关系，放在两个数组中</span></span><br><span class="line">        <span class="comment">// 并且按照阿拉伯数字的大小降序排列，这是贪心选择思想</span></span><br><span class="line">        <span class="keyword">int</span>[] nums = &#123;<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        String[] romans = &#123;<span class="string">"M"</span>, <span class="string">"CM"</span>, <span class="string">"D"</span>, <span class="string">"CD"</span>, <span class="string">"C"</span>, <span class="string">"XC"</span>, <span class="string">"L"</span>, <span class="string">"XL"</span>, <span class="string">"X"</span>, <span class="string">"IX"</span>, <span class="string">"V"</span>, <span class="string">"IV"</span>, <span class="string">"I"</span>&#125;;</span><br><span class="line"></span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (index &lt; <span class="number">13</span>) &#123;</span><br><span class="line">            <span class="comment">// 特别注意：这里是等号</span></span><br><span class="line">            <span class="keyword">while</span> (num &gt;= nums[index]) &#123;</span><br><span class="line">                <span class="comment">// 注意：这里是等于号，表示尽量使用大的"面值"</span></span><br><span class="line">                stringBuilder.append(romans[index]);</span><br><span class="line">                num -= nums[index];</span><br><span class="line">            &#125;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">作者：liweiwei1419</span><br><span class="line">链接：https:<span class="comment">//leetcode-cn.com/problems/integer-to-roman/solution/tan-xin-suan-fa-by-liweiwei1419/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><p>参考文章:<br><a href="https://blog.csdn.net/yanyanwenmeng/article/details/83008780">参考链接1</a><br><a href="https://www.cnblogs.com/aerer/p/9931068.html">参考链接2</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;贪心算法（又称贪婪算法）是指，在对&lt;a href=&quot;https://baike.baidu.com/item/问题求解&quot;&gt;问题求解&lt;/a&gt;时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的是在某种意义上的局部&lt;a href=&quot;https://baike.baidu.com/item/最优解&quot;&gt;最优解&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;贪心算法不是对所有问题都能得到整体最优解，关键是贪心策略的选择，选择的贪心策略必须具备无后效性，即某个状态以前的过程不会影响以后的状态，只与当前状态有关。&lt;/p&gt;
    
    </summary>
    
    
      <category term="algorithm" scheme="https://removeif.github.io/categories/algorithm/"/>
    
    
      <category term="贪心算法" scheme="https://removeif.github.io/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
      <category term="最优解" scheme="https://removeif.github.io/tags/%E6%9C%80%E4%BC%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>不蒜子统计常见问题</title>
    <link href="https://removeif.github.io/theme/%E4%B8%8D%E8%92%9C%E5%AD%90%E7%BB%9F%E8%AE%A1%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html"/>
    <id>https://removeif.github.io/theme/%E4%B8%8D%E8%92%9C%E5%AD%90%E7%BB%9F%E8%AE%A1%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html</id>
    <published>2019-12-21T00:46:08.000Z</published>
    <updated>2020-02-02T02:00:25.585Z</updated>
    
    <content type="html"><![CDATA[<p>不蒜子统计官网：<a href="http://busuanzi.ibruce.info/">http://busuanzi.ibruce.info/</a></p><p>详细使用教程：<a href="http://ibruce.info/2015/04/04/busuanzi/">http://ibruce.info/2015/04/04/busuanzi/</a></p><p>目前支持的功能：（两行代码，搞定计数；方便、简洁、实用）</p><p>a、显示站点总访问量</p><p>b、显示单页面访问量</p><a id="more"></a><p>c、显示站点总访问量和单页面访问量</p><p>d、只计数不显示</p><p>关于怎么实现当天、昨天、本月、上月（即具体时间段）的访问量目前没有支持，请配合目前不蒜子支持的功能自行实现。</p><h3 id="1-常见问题400错误，统计不生效"><a href="#1-常见问题400错误，统计不生效" class="headerlink" title="1.常见问题400错误，统计不生效"></a>1.常见问题400错误，统计不生效</h3><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191221085006.png" alt="">            </p><p>如图<strong>（1）</strong>的地方没有加载出统计数据</p><p>此时F12打开浏览器控制台，找到<strong>（2）</strong>network地方，刷新一下页面找到<strong>（3）</strong>，请求统计的网址如图所示，查看<strong>（4）</strong>referrer-policy是否如图所示，如图的话是不能访问的，需要更改。</p><p><strong>导致此问题原因</strong>，检查网页源码中，一般header有如下标签</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191221085114.png" alt="">    </p><p><strong>解决方法</strong>，去掉此标签，之后访问如下<strong>（1）</strong>已有统计值，<strong>（2）</strong>已改变。可详细对比正常使用不蒜子统计网址<a href="https://removeif.github.io/">https://removeif.github.io/</a> 中请求<strong>busuanzi?jsonpCallback=BusuanziCallback_236107382952地址</strong>的请求和返回参数的差异！</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191221085231.png" alt=""></p><p><strong>这样设置带来的影响</strong>，可能有些图床的图片不能显示，会图裂，如新浪图床。解决方法，可以用其他不冲突的图床。</p><h3 id="2-统计访问数巨大（清零问题）"><a href="#2-统计访问数巨大（清零问题）" class="headerlink" title="2.统计访问数巨大（清零问题）"></a>2.统计访问数巨大（清零问题）</h3><p><a href="http://localhost:4000/">http://localhost:4000/</a> 或<a href="http://127.0.0.1:4000/">http://127.0.0.1:4000/</a> 访问时，统计数巨大，这是正常的，不用清零。部署到线上，用线上域名网址访问数据就正常了。</p><h3 id="3-统计无法访问如图所示"><a href="#3-统计无法访问如图所示" class="headerlink" title="3.统计无法访问如图所示"></a>3.统计无法访问如图所示</h3><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191221085258.png" alt=""></p><p>查看红色url部分如下所示</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191221085320.png" alt=""></p><p>此问题是Request URL填写错误，请确保Request URL前部分为<a href="http://busuanzi.ibruce.info/busuanzi?"><strong>http://busuanzi.ibruce.info/busuanzi?</strong></a><strong>，，，，如下</strong></p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191221085345.png" alt=""></p><p>同时查看Response，出现如下数据，就是成功访问了不蒜子统计，如果网站中还没出统计数据，就是自己的代码写错了，检查代码</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191221085405.png" alt=""></p><h3 id="4-其余问题"><a href="#4-其余问题" class="headerlink" title="4.其余问题"></a>4.其余问题</h3><p><strong>(1)</strong>.同一个页面，同名的id标签确保只能放一个如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span> <span class="attr">style</span>=<span class="string">"display: inline;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同一个页面id名为busuanzi_value_site_uv只能放一个!</p><p><strong>(2)</strong>.safari（包括移动端的safari）浏览器页面pv统计问题，如下，因为Safari浏览器referer在文章页面时也上送的域名（而单个页面的pv统计是根据页面路径，即上送的referer），所以此时页面的pv返回的站点的pv值。暂时没解决方法，可自行搜索解决方案构造正确的referer值。对于此问题可以换个浏览器看哇，比如Chrome，哈哈。</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191221085514.png" alt=""></p><p><strong>(3)</strong>.部分live2d可能与不蒜子统计有冲突，出现此问题时，请查看网页源码引用统计id处是否被隐藏，一般网页上会自动加上display: none;自行选择性的使用。网友的解决方法，修改源码为以下，并引用修改后的js文件</p><p>不蒜子源码文件：</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191221085823.png" alt=""></p><p> 修改为如下：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">var bszCaller, bszTag;</span><br><span class="line"><span class="addition">!function() &#123;</span></span><br><span class="line">    var c, d, e, a = !1, b = [];</span><br><span class="line">    ready = function(c) &#123;</span><br><span class="line">        return a || "interactive" <span class="comment">=== document.readyState || "complete" === document.readyState ? c.call(document) : b.push(function() &#123;</span></span><br><span class="line">            return c.call(this)</span><br><span class="line">        &#125;),</span><br><span class="line">        this</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    d = function() &#123;</span><br><span class="line">        for (var a = 0, c = b.length; c &gt; a; a++)</span><br><span class="line">            b[a].apply(document);</span><br><span class="line">        b = []</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    e = function() &#123;</span><br><span class="line">        a || (a = !0,</span><br><span class="line">        d.call(window),</span><br><span class="line">        document.removeEventListener ? document.removeEventListener("DOMContentLoaded", e, !1) : document.attachEvent &amp;&amp; (document.detachEvent("onreadystatechange", e),</span><br><span class="line">        window == window.top &amp;&amp; (clearInterval(c),</span><br><span class="line">        c = null)))</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    document.addEventListener ? document.addEventListener("DOMContentLoaded", e, !1) : document.attachEvent &amp;&amp; (document.attachEvent("onreadystatechange", function() &#123;</span><br><span class="line">        /loaded|complete/.test(document.readyState) &amp;&amp; e()</span><br><span class="line">    &#125;),</span><br><span class="line">    window == window.top &amp;&amp; (c = setInterval(function() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            a || document.documentElement.doScroll("left")</span><br><span class="line">        &#125; catch (b) &#123;</span><br><span class="line">            return</span><br><span class="line">        &#125;</span><br><span class="line">        e()</span><br><span class="line">    &#125;, 5)))</span><br><span class="line">&#125;(),</span><br><span class="line">bszCaller = &#123;</span><br><span class="line">    fetch: function(a, b) &#123;</span><br><span class="line">        var c = "BusuanziCallback_" + Math.floor(1099511627776 * Math.random());</span><br><span class="line">        window[c] = this.evalCall(b),</span><br><span class="line">        a = a.replace("=BusuanziCallback", "=" + c),</span><br><span class="line">        scriptTag = document.createElement("SCRIPT"),</span><br><span class="line">        scriptTag.type = "text/javascript",</span><br><span class="line">        scriptTag.defer = !0,</span><br><span class="line">        scriptTag.src = a,</span><br><span class="line">        document.getElementsByTagName("HEAD")[0].appendChild(scriptTag)</span><br><span class="line">    &#125;,</span><br><span class="line">    evalCall: function(a) &#123;</span><br><span class="line">        return function(b) &#123;</span><br><span class="line">            ready(function() &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    a(b), </span><br><span class="line"><span class="deletion">-                      // 此处为修改的逻辑</span></span><br><span class="line"><span class="deletion">-                      scriptTag.parentElement.removeChild(scriptTag)</span></span><br><span class="line"><span class="addition">+                      if(scriptTag != null &amp;&amp; scriptTag.parentElement != null)&#123;</span></span><br><span class="line"><span class="addition">+                       scriptTag.parentElement.removeChild(scriptTag)</span></span><br><span class="line"><span class="addition">+                      &#125;</span></span><br><span class="line">                &#125; catch (c) &#123;</span><br><span class="line">                    bszTag.hides()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">bszCaller.fetch("//busuanzi.ibruce.info/busuanzi?jsonpCallback=BusuanziCallback", function(a) &#123;</span><br><span class="line">    bszTag.texts(a),</span><br><span class="line">    bszTag.shows()</span><br><span class="line">&#125;),</span><br><span class="line">bszTag = &#123;</span><br><span class="line">    bszs: ["site_pv", "page_pv", "site_uv"],</span><br><span class="line">    texts: function(a) &#123;</span><br><span class="line">        this.bszs.map(function(b) &#123;</span><br><span class="line">            var c = document.getElementById("busuanzi_value_" + b);</span><br><span class="line">            c &amp;&amp; (c.innerHTML = a[b])</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    hides: function() &#123;</span><br><span class="line">        this.bszs.map(function(a) &#123;</span><br><span class="line">            var b = document.getElementById("busuanzi_container_" + a);</span><br><span class="line">            b &amp;&amp; (b.style.display = "none")</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    shows: function() &#123;</span><br><span class="line">        this.bszs.map(function(a) &#123;</span><br><span class="line">            var b = document.getElementById("busuanzi_container_" + a);</span><br><span class="line">            b &amp;&amp; (b.style.display = "inline")</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="5-官方群！！！"><a href="#5-官方群！！！" class="headerlink" title="5.官方群！！！"></a>5.官方群！！！</h3><p>群号：419260983，有其余问题进群讨论，<strong>提问时遇到其他的问题请同时发出问题的在线网址！！！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不蒜子统计官网：&lt;a href=&quot;http://busuanzi.ibruce.info/&quot;&gt;http://busuanzi.ibruce.info/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;详细使用教程：&lt;a href=&quot;http://ibruce.info/2015/04/04/busuanzi/&quot;&gt;http://ibruce.info/2015/04/04/busuanzi/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目前支持的功能：（两行代码，搞定计数；方便、简洁、实用）&lt;/p&gt;
&lt;p&gt;a、显示站点总访问量&lt;/p&gt;
&lt;p&gt;b、显示单页面访问量&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具教程" scheme="https://removeif.github.io/categories/%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/"/>
    
      <category term="博客统计插件" scheme="https://removeif.github.io/categories/%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/%E5%8D%9A%E5%AE%A2%E7%BB%9F%E8%AE%A1%E6%8F%92%E4%BB%B6/"/>
    
    
      <category term="博客统计插件" scheme="https://removeif.github.io/tags/%E5%8D%9A%E5%AE%A2%E7%BB%9F%E8%AE%A1%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>算法成长之路leetcode11-12</title>
    <link href="https://removeif.github.io/algorithm/%E7%AE%97%E6%B3%95%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AFleetcode11-12.html"/>
    <id>https://removeif.github.io/algorithm/%E7%AE%97%E6%B3%95%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AFleetcode11-12.html</id>
    <published>2019-12-17T10:25:03.000Z</published>
    <updated>2020-02-02T02:00:25.564Z</updated>
    
    <content type="html"><![CDATA[<h3 id="11-Container-With-Most-Water"><a href="#11-Container-With-Most-Water" class="headerlink" title="11. Container With Most Water"></a><a href="https://leetcode-cn.com/problems/container-with-most-water/">11. Container With Most Water</a></h3><p>Given n non-negative integers a1, a2, …, an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p><a id="more"></a><p>Note: You may not slant the container and n is at least 2.</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191217182702.png" alt=""></p><p>The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.</p><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Input: [1,8,6,2,5,4,8,3,7]</span><br><span class="line">Output: 49</span><br></pre></td></tr></table></figure><h4 id="JAVA题解"><a href="#JAVA题解" class="headerlink" title="JAVA题解"></a>JAVA题解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithm;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给定 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。</span></span><br><span class="line"><span class="comment"> * 在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。</span></span><br><span class="line"><span class="comment"> * 找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 说明：你不能倾斜容器，且 n 的值至少为 2。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 示例:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 输入: [1,8,6,2,5,4,8,3,7]</span></span><br><span class="line"><span class="comment"> * 输出: 49</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment"> * 链接：https://leetcode-cn.com/problems/container-with-most-water</span></span><br><span class="line"><span class="comment"> * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leetcode11</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暴力解法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; height.length; j++) &#123;</span><br><span class="line">                max = Math.max(max, Math.min(height[i], height[j]) * (j-i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 官方 双指针法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 算法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 这种方法背后的思路在于，两线段之间形成的区域总是会受到其中较短那条长度的限制。此外，两线段距离越远，得到的面积就越大。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 我们在由线段长度构成的数组中使用两个指针，一个放在开始，一个置于末尾。</span></span><br><span class="line"><span class="comment">     * 此外，我们会使用变量 maxareamaxarea 来持续存储到目前为止所获得的最大面积。</span></span><br><span class="line"><span class="comment">     * 在每一步中，我们会找出指针所指向的两条线段形成的区域，更新 maxareamaxarea，并将指向较短线段的指针向较长线段那端移动一步。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 作者：LeetCode</span></span><br><span class="line"><span class="comment">     * 链接：https://leetcode-cn.com/problems/container-with-most-water/solution/sheng-zui-duo-shui-de-rong-qi-by-leetcode/</span></span><br><span class="line"><span class="comment">     * 来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment">     * 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 算法流程： 设置双指针 ii,jj 分别位于容器壁两端，根据规则移动指针（后续说明），并且更新面积最大值 res，直到 i == j 时返回 res。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 指针移动规则与证明： 每次选定围成水槽两板高度 h[i]h[i],h[j]h[j] 中的短板，向中间收窄 11 格。以下证明：</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 设每一状态下水槽面积为 S(i, j)S(i,j),(0 &lt;= i &lt; j &lt; n)(0&lt;=i&lt;j&lt;n)，由于水槽的实际高度由两板中的短板决定，</span></span><br><span class="line"><span class="comment">     * 则可得面积公式 S(i, j) = min(h[i], h[j]) × (j - i)S(i,j)=min(h[i],h[j])×(j−i)。</span></span><br><span class="line"><span class="comment">     * 在每一个状态下，无论长板或短板收窄 11 格，都会导致水槽 底边宽度 -1−1：</span></span><br><span class="line"><span class="comment">     * 若向内移动短板，水槽的短板 min(h[i], h[j])min(h[i],h[j]) 可能变大，因此水槽面积 S(i, j)S(i,j) 可能增大。</span></span><br><span class="line"><span class="comment">     * 若向内移动长板，水槽的短板 min(h[i], h[j])min(h[i],h[j]) 不变或变小，下个水槽的面积一定小于当前水槽面积。</span></span><br><span class="line"><span class="comment">     * 因此，向内收窄短板可以获取面积最大值。换个角度理解：</span></span><br><span class="line"><span class="comment">     * 若不指定移动规则，所有移动出现的 S(i, j)S(i,j) 的状态数为 C(n, 2)C(n,2)，即暴力枚举出所有状态。</span></span><br><span class="line"><span class="comment">     * 在状态 S(i, j)S(i,j) 下向内移动短板至 S(i + 1, j)S(i+1,j)（假设 h[i] &lt; h[j]h[i]&lt;h[j] ），</span></span><br><span class="line"><span class="comment">     * 则相当于消去了 &#123;S(i, j - 1), S(i, j - 2), ... , S(i, i + 1)&#125;S(i,j−1),S(i,j−2),...,S(i,i+1) 状态集合。</span></span><br><span class="line"><span class="comment">     * 而所有消去状态的面积一定 &lt;= S(i, j)&lt;=S(i,j)：</span></span><br><span class="line"><span class="comment">     * 短板高度：相比 S(i, j)S(i,j) 相同或更短（&lt;= h[i]&lt;=h[i]）；</span></span><br><span class="line"><span class="comment">     * 底边宽度：相比 S(i, j)S(i,j) 更短。</span></span><br><span class="line"><span class="comment">     * 因此所有消去的状态的面积都 &lt; S(i, j)&lt;S(i,j)。通俗的讲，我们每次向内移动短板，所有的消去状态都不会导致丢失面积最大值 。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 作者：jyd</span></span><br><span class="line"><span class="comment">     * 链接：https://leetcode-cn.com/problems/container-with-most-water/solution/container-with-most-water-shuang-zhi-zhen-fa-yi-do/</span></span><br><span class="line"><span class="comment">     * 来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment">     * 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> height</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxArea1</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> maxarea = <span class="number">0</span>, l = <span class="number">0</span>, r = height.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="comment">// 计算面积，取最大值</span></span><br><span class="line">            maxarea = Math.max(maxarea, Math.min(height[l], height[r]) * (r - l));</span><br><span class="line">            <span class="comment">// 小的向大的一方移动，如果左边小于右边，左边向右边移动一位，即左++,l++，否则右移</span></span><br><span class="line">            <span class="keyword">if</span> (height[l] &lt; height[r])</span><br><span class="line">                l++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                r--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxarea;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxArea2</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = height.length - <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">            res = height[i] &lt; height[j] ?</span><br><span class="line">                    Math.max(res, (j - i) * height[i++]):</span><br><span class="line">                    Math.max(res, (j - i) * height[j--]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// best one</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxArea3</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lastIndex = height.length - <span class="number">1</span>, max = <span class="number">0</span>, temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lastIndex;) &#123;</span><br><span class="line">            <span class="comment">// 取左右边上的最小的数</span></span><br><span class="line">            temp = Math.min(height[i], height[lastIndex]);</span><br><span class="line">            <span class="comment">// 计算 距离最大面积</span></span><br><span class="line">            <span class="keyword">if</span> (temp * (lastIndex - i) &gt; max) &#123;</span><br><span class="line">                max = temp * (lastIndex - i);</span><br><span class="line">                System.out.println(<span class="string">""</span> + i + <span class="string">","</span> + lastIndex);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 最小值在右边的话 右边往左边移动</span></span><br><span class="line">            <span class="keyword">while</span> (temp &gt;= height[lastIndex] &amp;&amp; i &lt; lastIndex)</span><br><span class="line">                lastIndex--;</span><br><span class="line">            <span class="comment">// 最小值在左边的话 左边往右移动 直到重合</span></span><br><span class="line">            <span class="keyword">while</span> (temp &gt;= height[i] &amp;&amp; i &lt; lastIndex)</span><br><span class="line">                i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(maxArea3(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">10</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">7</span>&#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-Integer-to-Roman"><a href="#12-Integer-to-Roman" class="headerlink" title="12. Integer to Roman"></a><a href="https://leetcode-cn.com/problems/integer-to-roman/">12. Integer to Roman</a></h3><p>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.</p><p>Symbol       Value<br>I             1<br>V             5<br>X             10<br>L             50<br>C             100<br>D             500<br>M             1000<br>For example, two is written as II in Roman numeral, just two one’s added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.</p><p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:</p><p>I can be placed before V (5) and X (10) to make 4 and 9.<br>X can be placed before L (50) and C (100) to make 40 and 90.<br>C can be placed before D (500) and M (1000) to make 400 and 900.<br>Given an integer, convert it to a roman numeral. Input is guaranteed to be within the range from 1 to 3999.</p><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: 3</span><br><span class="line">Output: &quot;III&quot;</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: 4</span><br><span class="line">Output: &quot;IV&quot;</span><br><span class="line">Example 3:</span><br><span class="line"></span><br><span class="line">Input: 9</span><br><span class="line">Output: &quot;IX&quot;</span><br><span class="line">Example 4:</span><br><span class="line"></span><br><span class="line">Input: 58</span><br><span class="line">Output: &quot;LVIII&quot;</span><br><span class="line">Explanation: L &#x3D; 50, V &#x3D; 5, III &#x3D; 3.</span><br><span class="line">Example 5:</span><br><span class="line"></span><br><span class="line">Input: 1994</span><br><span class="line">Output: &quot;MCMXCIV&quot;</span><br><span class="line">Explanation: M &#x3D; 1000, CM &#x3D; 900, XC &#x3D; 90 and IV &#x3D; 4.</span><br></pre></td></tr></table></figure><h4 id="JAVA题解-1"><a href="#JAVA题解-1" class="headerlink" title="JAVA题解"></a>JAVA题解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithm;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 字符          数值</span></span><br><span class="line"><span class="comment"> * I             1</span></span><br><span class="line"><span class="comment"> * V             5</span></span><br><span class="line"><span class="comment"> * X             10</span></span><br><span class="line"><span class="comment"> * L             50</span></span><br><span class="line"><span class="comment"> * C             100</span></span><br><span class="line"><span class="comment"> * D             500</span></span><br><span class="line"><span class="comment"> * M             1000</span></span><br><span class="line"><span class="comment"> * 例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，</span></span><br><span class="line"><span class="comment"> * 即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 通常情况下，罗马数字中小的数字在大的数字的右边。</span></span><br><span class="line"><span class="comment"> * 但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，</span></span><br><span class="line"><span class="comment"> * 所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，</span></span><br><span class="line"><span class="comment"> * 数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</span></span><br><span class="line"><span class="comment"> * X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 </span></span><br><span class="line"><span class="comment"> * C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</span></span><br><span class="line"><span class="comment"> * 给定一个整数，将其转为罗马数字。输入确保在 1 到 3999 的范围内。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 示例 1:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 输入: 3</span></span><br><span class="line"><span class="comment"> * 输出: "III"</span></span><br><span class="line"><span class="comment"> * 示例 2:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 输入: 4</span></span><br><span class="line"><span class="comment"> * 输出: "IV"</span></span><br><span class="line"><span class="comment"> * 示例 3:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 输入: 9</span></span><br><span class="line"><span class="comment"> * 输出: "IX"</span></span><br><span class="line"><span class="comment"> * 示例 4:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 输入: 58</span></span><br><span class="line"><span class="comment"> * 输出: "LVIII"</span></span><br><span class="line"><span class="comment"> * 解释: L = 50, V = 5, III = 3.</span></span><br><span class="line"><span class="comment"> * 示例 5:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 输入: 1994</span></span><br><span class="line"><span class="comment"> * 输出: "MCMXCIV"</span></span><br><span class="line"><span class="comment"> * 解释: M = 1000, CM = 900, XC = 90, IV = 4.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment"> * 链接：https://leetcode-cn.com/problems/integer-to-roman</span></span><br><span class="line"><span class="comment"> * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leetcode12</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行用时 :6 ms, 在所有 java 提交中击败了的用户</span></span><br><span class="line"><span class="comment">     * 内存消耗 :36.1 MB, 在所有 java 提交中击败了100.00%的用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 个位数</span></span><br><span class="line">        String[] map = <span class="keyword">new</span> String[]&#123;<span class="string">""</span>, <span class="string">"I"</span>, <span class="string">"II"</span>, <span class="string">"III"</span>, <span class="string">"IV"</span>, <span class="string">"V"</span>, <span class="string">"VI"</span>, <span class="string">"VII"</span>, <span class="string">"VIII"</span>, <span class="string">"IX"</span>&#125;;</span><br><span class="line">        <span class="comment">// 十位数</span></span><br><span class="line">        String[] map1 = <span class="keyword">new</span> String[]&#123;<span class="string">""</span>, <span class="string">"X"</span>, <span class="string">"XX"</span>, <span class="string">"XXX"</span>, <span class="string">"XL"</span>, <span class="string">"L"</span>, <span class="string">"LX"</span>, <span class="string">"LXX"</span>, <span class="string">"LXXX"</span>, <span class="string">"XC"</span>&#125;;</span><br><span class="line">        <span class="comment">// 百位</span></span><br><span class="line">        String[] map2 = <span class="keyword">new</span> String[]&#123;<span class="string">""</span>, <span class="string">"C"</span>, <span class="string">"CC"</span>, <span class="string">"CCC"</span>, <span class="string">"CD"</span>, <span class="string">"D"</span>, <span class="string">"DC"</span>, <span class="string">"DCC"</span>, <span class="string">"DCCC"</span>, <span class="string">"CM"</span>&#125;;</span><br><span class="line">        <span class="comment">// 千位</span></span><br><span class="line">        String[] map3 = <span class="keyword">new</span> String[]&#123;<span class="string">""</span>, <span class="string">"M"</span>, <span class="string">"MM"</span>, <span class="string">"MMM"</span>&#125;;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        String[] res = <span class="keyword">new</span> String[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = num % i;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">10</span>) &#123;</span><br><span class="line">                temp = temp / (i / <span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">switch</span> (j) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    res[j++] = map[temp];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    res[j++] = map1[temp];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    res[j++] = map2[temp];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    res[j++] = map3[temp];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i = <span class="number">10</span>*i;</span><br><span class="line">            <span class="keyword">if</span> (j &gt; <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = res.length - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">            sb.append(res[k]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 贪心算法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 解题思路</span></span><br><span class="line"><span class="comment">     * 参考大佬们的思路 吃透之后 写出来</span></span><br><span class="line"><span class="comment">     * 贪心算法 我永远用最接近的去做比较</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 如果我去小卖部买55元的东西</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 你可以选择一张面值50的 和一张5块的</span></span><br><span class="line"><span class="comment">     * 也可以给一张100的让老板找零</span></span><br><span class="line"><span class="comment">     * 贪心算法就是前者</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 假定我买3块的东西 我先用5块去比较 太多了 老板问 你还有小点的纸币没 我找不开</span></span><br><span class="line"><span class="comment">     * 这时候 你给个两块 还差一块 又给了一块</span></span><br><span class="line"><span class="comment">     * 看着很蠢 但是这确实有效</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 作者：guo-tang-feng</span></span><br><span class="line"><span class="comment">     * 链接：https://leetcode-cn.com/problems/integer-to-roman/solution/tan-xin-suan-fa-by-guo-tang-feng/</span></span><br><span class="line"><span class="comment">     * 来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment">     * 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">intToRoman1</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span>[] moneys = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        String[] moneyToStr = <span class="keyword">new</span> String[]&#123;<span class="string">"M"</span>, <span class="string">"CM"</span>, <span class="string">"D"</span>, <span class="string">"CD"</span>, <span class="string">"C"</span>, <span class="string">"XC"</span>, <span class="string">"L"</span>, <span class="string">"XL"</span>, <span class="string">"X"</span>, <span class="string">"IX"</span>, <span class="string">"V"</span>, <span class="string">"IV"</span>, <span class="string">"I"</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果大于最大的数</span></span><br><span class="line">            <span class="keyword">if</span> (num &gt;= moneys[index]) &#123;</span><br><span class="line">                <span class="comment">// 加进去</span></span><br><span class="line">                stringBuilder.append(moneyToStr[index]);</span><br><span class="line">                <span class="comment">// 把加进去的减掉</span></span><br><span class="line">                num -= moneys[index];</span><br><span class="line">                <span class="comment">// 索引前移，num -= moneys[index] 还可能满足 num &gt;= moneys[index]</span></span><br><span class="line">                <span class="comment">// ，此时如果只index++，那么就漏掉一部分了，所以要index--，如2000减掉1000还有1000 还是应该和moneys[0]比较</span></span><br><span class="line">                index--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 索引后移</span></span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 第一次超过100%用户的内存，有点小小激动 😂</span></span><br><span class="line">        System.out.println(intToRoman(<span class="number">400</span>));</span><br><span class="line">        System.out.println(intToRoman1(<span class="number">1994</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;11-Container-With-Most-Water&quot;&gt;&lt;a href=&quot;#11-Container-With-Most-Water&quot; class=&quot;headerlink&quot; title=&quot;11. Container With Most Water&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/container-with-most-water/&quot;&gt;11. Container With Most Water&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Given n non-negative integers a1, a2, …, an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.&lt;/p&gt;
    
    </summary>
    
    
      <category term="algorithm" scheme="https://removeif.github.io/categories/algorithm/"/>
    
    
      <category term="贪心算法" scheme="https://removeif.github.io/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
